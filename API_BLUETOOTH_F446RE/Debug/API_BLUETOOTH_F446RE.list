
API_BLUETOOTH_F446RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e78  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000380  08004048  08004048  00014048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043c8  080043c8  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080043c8  080043c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080043d0  080043d0  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043d0  080043d0  000143d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043d4  080043d4  000143d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080043d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000090  08004468  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08004468  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf60  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d0e  00000000  00000000  0002d020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c8  00000000  00000000  0002ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000720  00000000  00000000  0002f4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000223c9  00000000  00000000  0002fc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a6f3  00000000  00000000  00051fe1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9eeb  00000000  00000000  0005c6d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001265bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bdc  00000000  00000000  00126614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000090 	.word	0x20000090
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004030 	.word	0x08004030

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000094 	.word	0x20000094
 800020c:	08004030 	.word	0x08004030

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <setupBLE>:

void sendInstruction (AtInstruction_t instruction, char* parameter);
char** str_split (char* a_str, const char a_delim);
int getSubstring(char *source, char *target,int from, int to);

void setupBLE(UART_HandleTypeDef *huartInterface) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	huart = huartInterface;
 80005c0:	4a05      	ldr	r2, [pc, #20]	; (80005d8 <setupBLE+0x20>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6013      	str	r3, [r2, #0]
	sendInstruction(SET_PERMISSIONS, "11111");
 80005c6:	4905      	ldr	r1, [pc, #20]	; (80005dc <setupBLE+0x24>)
 80005c8:	2007      	movs	r0, #7
 80005ca:	f000 f809 	bl	80005e0 <sendInstruction>
}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200000b8 	.word	0x200000b8
 80005dc:	0800408c 	.word	0x0800408c

080005e0 <sendInstruction>:

void sendInstruction (AtInstruction_t instruction, char* parameter) {
 80005e0:	b590      	push	{r4, r7, lr}
 80005e2:	b085      	sub	sp, #20
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	6039      	str	r1, [r7, #0]
 80005ea:	71fb      	strb	r3, [r7, #7]
	char *instructionPrefix = atInstructions[instruction];
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	4a11      	ldr	r2, [pc, #68]	; (8000634 <sendInstruction+0x54>)
 80005f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f4:	60fb      	str	r3, [r7, #12]
	char *completeInstruction = (char*) malloc(30 * sizeof(char));
 80005f6:	201e      	movs	r0, #30
 80005f8:	f002 f9b4 	bl	8002964 <malloc>
 80005fc:	4603      	mov	r3, r0
 80005fe:	60bb      	str	r3, [r7, #8]
	sprintf(completeInstruction, "%s%s\r\n", instructionPrefix, parameter);
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	490c      	ldr	r1, [pc, #48]	; (8000638 <sendInstruction+0x58>)
 8000606:	68b8      	ldr	r0, [r7, #8]
 8000608:	f002 fde2 	bl	80031d0 <siprintf>
	HAL_UART_Transmit(huart, (uint8_t *) completeInstruction, strlen(completeInstruction), HAL_MAX_DELAY);
 800060c:	4b0b      	ldr	r3, [pc, #44]	; (800063c <sendInstruction+0x5c>)
 800060e:	681c      	ldr	r4, [r3, #0]
 8000610:	68b8      	ldr	r0, [r7, #8]
 8000612:	f7ff fdfd 	bl	8000210 <strlen>
 8000616:	4603      	mov	r3, r0
 8000618:	b29a      	uxth	r2, r3
 800061a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800061e:	68b9      	ldr	r1, [r7, #8]
 8000620:	4620      	mov	r0, r4
 8000622:	f001 fdbc 	bl	800219e <HAL_UART_Transmit>
	free(completeInstruction);
 8000626:	68b8      	ldr	r0, [r7, #8]
 8000628:	f002 f9a4 	bl	8002974 <free>
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bd90      	pop	{r4, r7, pc}
 8000634:	20000000 	.word	0x20000000
 8000638:	08004094 	.word	0x08004094
 800063c:	200000b8 	.word	0x200000b8

08000640 <setName>:

void setName (char *name) {
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
	sendInstruction(SET_NAME, name);
 8000648:	6879      	ldr	r1, [r7, #4]
 800064a:	2000      	movs	r0, #0
 800064c:	f7ff ffc8 	bl	80005e0 <sendInstruction>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <setRole>:

void setRole (Role_t role) {
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
	char roleString[2];
	itoa(role, roleString, 10);
 8000662:	79fb      	ldrb	r3, [r7, #7]
 8000664:	f107 010c 	add.w	r1, r7, #12
 8000668:	220a      	movs	r2, #10
 800066a:	4618      	mov	r0, r3
 800066c:	f002 f978 	bl	8002960 <itoa>
	sendInstruction(SET_ROLE, roleString);
 8000670:	f107 030c 	add.w	r3, r7, #12
 8000674:	4619      	mov	r1, r3
 8000676:	2001      	movs	r0, #1
 8000678:	f7ff ffb2 	bl	80005e0 <sendInstruction>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <masterScanForSlaves>:
	char powerString[5];
	gcvt(power, 2, powerString);
	sendInstruction(SET_TRANSMITTING_POWER, powerString);
}

Device_t* masterScanForSlaves () {
 8000684:	b5b0      	push	{r4, r5, r7, lr}
 8000686:	b0a2      	sub	sp, #136	; 0x88
 8000688:	af00      	add	r7, sp, #0
	char inputBuffer[100] = "";
 800068a:	2300      	movs	r3, #0
 800068c:	603b      	str	r3, [r7, #0]
 800068e:	1d3b      	adds	r3, r7, #4
 8000690:	2260      	movs	r2, #96	; 0x60
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f002 f975 	bl	8002984 <memset>
	char *allText = (char *) malloc(1000 * sizeof(char));
 800069a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800069e:	f002 f961 	bl	8002964 <malloc>
 80006a2:	4603      	mov	r3, r0
 80006a4:	67fb      	str	r3, [r7, #124]	; 0x7c
	// Send the scan request
	sendInstruction(MASTER_SCAN_FOR_SLAVES, "");
 80006a6:	495c      	ldr	r1, [pc, #368]	; (8000818 <masterScanForSlaves+0x194>)
 80006a8:	2005      	movs	r0, #5
 80006aa:	f7ff ff99 	bl	80005e0 <sendInstruction>
	// Receive the scan answer
	while(!(strstr(allText, "STOP:SCAN") != NULL)) {
 80006ae:	e00c      	b.n	80006ca <masterScanForSlaves+0x46>
		HAL_UART_Receive(huart, (uint8_t *) inputBuffer, 1, HAL_MAX_DELAY);
 80006b0:	4b5a      	ldr	r3, [pc, #360]	; (800081c <masterScanForSlaves+0x198>)
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	4639      	mov	r1, r7
 80006b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006ba:	2201      	movs	r2, #1
 80006bc:	f001 fe01 	bl	80022c2 <HAL_UART_Receive>
		strcat(allText, inputBuffer);
 80006c0:	463b      	mov	r3, r7
 80006c2:	4619      	mov	r1, r3
 80006c4:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80006c6:	f002 fda3 	bl	8003210 <strcat>
	while(!(strstr(allText, "STOP:SCAN") != NULL)) {
 80006ca:	4955      	ldr	r1, [pc, #340]	; (8000820 <masterScanForSlaves+0x19c>)
 80006cc:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80006ce:	f002 fdd8 	bl	8003282 <strstr>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d0eb      	beq.n	80006b0 <masterScanForSlaves+0x2c>
	}
	// Break the scan into lines:
	char** lines = str_split(allText, '\n');
 80006d8:	210a      	movs	r1, #10
 80006da:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80006dc:	f000 f8a2 	bl	8000824 <str_split>
 80006e0:	67b8      	str	r0, [r7, #120]	; 0x78
	// First line contains trash. We have to remove it.
	char *firstLine = lines[0];
 80006e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	677b      	str	r3, [r7, #116]	; 0x74
	char *e;
	int index;
	e = strchr(firstLine, '+');
 80006e8:	212b      	movs	r1, #43	; 0x2b
 80006ea:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80006ec:	f002 fd9f 	bl	800322e <strchr>
 80006f0:	6738      	str	r0, [r7, #112]	; 0x70
	index = (int)(e - firstLine);
 80006f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80006f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006f6:	1ad3      	subs	r3, r2, r3
 80006f8:	66fb      	str	r3, [r7, #108]	; 0x6c
	getSubstring(firstLine, firstLine, index, strlen(firstLine));
 80006fa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80006fc:	f7ff fd88 	bl	8000210 <strlen>
 8000700:	4603      	mov	r3, r0
 8000702:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000704:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8000706:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8000708:	f000 f916 	bl	8000938 <getSubstring>

	// Breaking the lines into tokens and creating the struct
	size_t nbOfEntries = 0;
 800070c:	2300      	movs	r3, #0
 800070e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	while (*(lines + nbOfEntries) != 0) nbOfEntries++;
 8000712:	e004      	b.n	800071e <masterScanForSlaves+0x9a>
 8000714:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000718:	3301      	adds	r3, #1
 800071a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800071e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000722:	009b      	lsls	r3, r3, #2
 8000724:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000726:	4413      	add	r3, r2
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d1f2      	bne.n	8000714 <masterScanForSlaves+0x90>
	nbOfEntries--;
 800072e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000732:	3b01      	subs	r3, #1
 8000734:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	Device_t *entries = (Device_t *) malloc(nbOfEntries * sizeof(Device_t));
 8000738:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800073c:	011b      	lsls	r3, r3, #4
 800073e:	4618      	mov	r0, r3
 8000740:	f002 f910 	bl	8002964 <malloc>
 8000744:	4603      	mov	r3, r0
 8000746:	66bb      	str	r3, [r7, #104]	; 0x68
	for (int i = 0; i < nbOfEntries; i++) {
 8000748:	2300      	movs	r3, #0
 800074a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800074e:	e057      	b.n	8000800 <masterScanForSlaves+0x17c>
		char **tokens = str_split(lines[i], ',');
 8000750:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000754:	009b      	lsls	r3, r3, #2
 8000756:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8000758:	4413      	add	r3, r2
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	212c      	movs	r1, #44	; 0x2c
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f860 	bl	8000824 <str_split>
 8000764:	6678      	str	r0, [r7, #100]	; 0x64
		getSubstring(tokens[0], tokens[0], 7, strlen(tokens[0]));
 8000766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000768:	681c      	ldr	r4, [r3, #0]
 800076a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800076c:	681d      	ldr	r5, [r3, #0]
 800076e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4618      	mov	r0, r3
 8000774:	f7ff fd4c 	bl	8000210 <strlen>
 8000778:	4603      	mov	r3, r0
 800077a:	2207      	movs	r2, #7
 800077c:	4629      	mov	r1, r5
 800077e:	4620      	mov	r0, r4
 8000780:	f000 f8da 	bl	8000938 <getSubstring>
		getSubstring(tokens[2], tokens[2], 0, strlen(tokens[2])-2);
 8000784:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000786:	3308      	adds	r3, #8
 8000788:	681c      	ldr	r4, [r3, #0]
 800078a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800078c:	3308      	adds	r3, #8
 800078e:	681d      	ldr	r5, [r3, #0]
 8000790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000792:	3308      	adds	r3, #8
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fd3a 	bl	8000210 <strlen>
 800079c:	4603      	mov	r3, r0
 800079e:	3b02      	subs	r3, #2
 80007a0:	2200      	movs	r2, #0
 80007a2:	4629      	mov	r1, r5
 80007a4:	4620      	mov	r0, r4
 80007a6:	f000 f8c7 	bl	8000938 <getSubstring>

		entries[i].index = i+1;
 80007aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007ae:	011b      	lsls	r3, r3, #4
 80007b0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80007b2:	4413      	add	r3, r2
 80007b4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80007b8:	3201      	adds	r2, #1
 80007ba:	601a      	str	r2, [r3, #0]
		entries[i].mac = tokens[0];
 80007bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007c0:	011b      	lsls	r3, r3, #4
 80007c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80007c4:	4413      	add	r3, r2
 80007c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007c8:	6812      	ldr	r2, [r2, #0]
 80007ca:	605a      	str	r2, [r3, #4]
		entries[i].signalStrength = atoi(tokens[1]);
 80007cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007ce:	3304      	adds	r3, #4
 80007d0:	6819      	ldr	r1, [r3, #0]
 80007d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007d6:	011b      	lsls	r3, r3, #4
 80007d8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80007da:	18d4      	adds	r4, r2, r3
 80007dc:	4608      	mov	r0, r1
 80007de:	f002 f867 	bl	80028b0 <atoi>
 80007e2:	4603      	mov	r3, r0
 80007e4:	60a3      	str	r3, [r4, #8]
		entries[i].name = tokens[2];
 80007e6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007ea:	011b      	lsls	r3, r3, #4
 80007ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80007ee:	4413      	add	r3, r2
 80007f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80007f2:	6892      	ldr	r2, [r2, #8]
 80007f4:	60da      	str	r2, [r3, #12]
	for (int i = 0; i < nbOfEntries; i++) {
 80007f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80007fa:	3301      	adds	r3, #1
 80007fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8000800:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000804:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8000808:	429a      	cmp	r2, r3
 800080a:	d8a1      	bhi.n	8000750 <masterScanForSlaves+0xcc>
	}

	return entries;
 800080c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
}
 800080e:	4618      	mov	r0, r3
 8000810:	3788      	adds	r7, #136	; 0x88
 8000812:	46bd      	mov	sp, r7
 8000814:	bdb0      	pop	{r4, r5, r7, pc}
 8000816:	bf00      	nop
 8000818:	0800409c 	.word	0x0800409c
 800081c:	200000b8 	.word	0x200000b8
 8000820:	080040a0 	.word	0x080040a0

08000824 <str_split>:
void connectMasterToSlaveFromMACAddress (char *mac) {
	sendInstruction(MASTER_CONNECT_SLAVE, mac);
}

char** str_split(char* a_str, const char a_delim)
{
 8000824:	b590      	push	{r4, r7, lr}
 8000826:	b08b      	sub	sp, #44	; 0x2c
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
    char** result    = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	613b      	str	r3, [r7, #16]
    size_t count     = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
    char* tmp        = a_str;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	623b      	str	r3, [r7, #32]
    char* last_comma = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
    char delim[2];
    delim[0] = a_delim;
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	733b      	strb	r3, [r7, #12]
    delim[1] = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	737b      	strb	r3, [r7, #13]

    /* Count how many elements will be extracted. */
    while (*tmp)
 8000848:	e00c      	b.n	8000864 <str_split+0x40>
    {
        if (a_delim == *tmp)
 800084a:	6a3b      	ldr	r3, [r7, #32]
 800084c:	781b      	ldrb	r3, [r3, #0]
 800084e:	78fa      	ldrb	r2, [r7, #3]
 8000850:	429a      	cmp	r2, r3
 8000852:	d104      	bne.n	800085e <str_split+0x3a>
        {
            count++;
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	3301      	adds	r3, #1
 8000858:	627b      	str	r3, [r7, #36]	; 0x24
            last_comma = tmp;
 800085a:	6a3b      	ldr	r3, [r7, #32]
 800085c:	61fb      	str	r3, [r7, #28]
        }
        tmp++;
 800085e:	6a3b      	ldr	r3, [r7, #32]
 8000860:	3301      	adds	r3, #1
 8000862:	623b      	str	r3, [r7, #32]
    while (*tmp)
 8000864:	6a3b      	ldr	r3, [r7, #32]
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1ee      	bne.n	800084a <str_split+0x26>
    }

    /* Add space for trailing token. */
    count += last_comma < (a_str + strlen(a_str) - 1);
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f7ff fccf 	bl	8000210 <strlen>
 8000872:	4603      	mov	r3, r0
 8000874:	3b01      	subs	r3, #1
 8000876:	687a      	ldr	r2, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	69fa      	ldr	r2, [r7, #28]
 800087c:	429a      	cmp	r2, r3
 800087e:	bf34      	ite	cc
 8000880:	2301      	movcc	r3, #1
 8000882:	2300      	movcs	r3, #0
 8000884:	b2db      	uxtb	r3, r3
 8000886:	461a      	mov	r2, r3
 8000888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088a:	4413      	add	r3, r2
 800088c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Add space for terminating null string so caller
       knows where the list of returned strings ends. */
    count++;
 800088e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000890:	3301      	adds	r3, #1
 8000892:	627b      	str	r3, [r7, #36]	; 0x24

    result = malloc(sizeof(char*) * count);
 8000894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000896:	009b      	lsls	r3, r3, #2
 8000898:	4618      	mov	r0, r3
 800089a:	f002 f863 	bl	8002964 <malloc>
 800089e:	4603      	mov	r3, r0
 80008a0:	613b      	str	r3, [r7, #16]

    if (result)
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d039      	beq.n	800091c <str_split+0xf8>
    {
        size_t idx  = 0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
        char* token = strtok(a_str, delim);
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	4619      	mov	r1, r3
 80008b2:	6878      	ldr	r0, [r7, #4]
 80008b4:	f002 fcfc 	bl	80032b0 <strtok>
 80008b8:	6178      	str	r0, [r7, #20]

        while (token)
 80008ba:	e01b      	b.n	80008f4 <str_split+0xd0>
        {
            assert(idx < count);
 80008bc:	69ba      	ldr	r2, [r7, #24]
 80008be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d305      	bcc.n	80008d0 <str_split+0xac>
 80008c4:	4b18      	ldr	r3, [pc, #96]	; (8000928 <str_split+0x104>)
 80008c6:	4a19      	ldr	r2, [pc, #100]	; (800092c <str_split+0x108>)
 80008c8:	21a8      	movs	r1, #168	; 0xa8
 80008ca:	4819      	ldr	r0, [pc, #100]	; (8000930 <str_split+0x10c>)
 80008cc:	f001 ffd2 	bl	8002874 <__assert_func>
            *(result + idx++) = strdup(token);
 80008d0:	69bb      	ldr	r3, [r7, #24]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	61ba      	str	r2, [r7, #24]
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	693a      	ldr	r2, [r7, #16]
 80008da:	18d4      	adds	r4, r2, r3
 80008dc:	6978      	ldr	r0, [r7, #20]
 80008de:	f002 fcb3 	bl	8003248 <strdup>
 80008e2:	4603      	mov	r3, r0
 80008e4:	6023      	str	r3, [r4, #0]
            token = strtok(0, delim);
 80008e6:	f107 030c 	add.w	r3, r7, #12
 80008ea:	4619      	mov	r1, r3
 80008ec:	2000      	movs	r0, #0
 80008ee:	f002 fcdf 	bl	80032b0 <strtok>
 80008f2:	6178      	str	r0, [r7, #20]
        while (token)
 80008f4:	697b      	ldr	r3, [r7, #20]
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d1e0      	bne.n	80008bc <str_split+0x98>
        }
        assert(idx == count - 1);
 80008fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fc:	3b01      	subs	r3, #1
 80008fe:	69ba      	ldr	r2, [r7, #24]
 8000900:	429a      	cmp	r2, r3
 8000902:	d005      	beq.n	8000910 <str_split+0xec>
 8000904:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <str_split+0x110>)
 8000906:	4a09      	ldr	r2, [pc, #36]	; (800092c <str_split+0x108>)
 8000908:	21ac      	movs	r1, #172	; 0xac
 800090a:	4809      	ldr	r0, [pc, #36]	; (8000930 <str_split+0x10c>)
 800090c:	f001 ffb2 	bl	8002874 <__assert_func>
        *(result + idx) = 0;
 8000910:	69bb      	ldr	r3, [r7, #24]
 8000912:	009b      	lsls	r3, r3, #2
 8000914:	693a      	ldr	r2, [r7, #16]
 8000916:	4413      	add	r3, r2
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
    }

    return result;
 800091c:	693b      	ldr	r3, [r7, #16]
}
 800091e:	4618      	mov	r0, r3
 8000920:	372c      	adds	r7, #44	; 0x2c
 8000922:	46bd      	mov	sp, r7
 8000924:	bd90      	pop	{r4, r7, pc}
 8000926:	bf00      	nop
 8000928:	080040ac 	.word	0x080040ac
 800092c:	08004130 	.word	0x08004130
 8000930:	080040b8 	.word	0x080040b8
 8000934:	080040e0 	.word	0x080040e0

08000938 <getSubstring>:

int  getSubstring(char *source, char *target,int from, int to)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b088      	sub	sp, #32
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	607a      	str	r2, [r7, #4]
 8000944:	603b      	str	r3, [r7, #0]
	int length=0;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
	int i=0,j=0;
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]

	//get length
	while(source[i++]!='\0')
 8000952:	e002      	b.n	800095a <getSubstring+0x22>
		length++;
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	3301      	adds	r3, #1
 8000958:	61fb      	str	r3, [r7, #28]
	while(source[i++]!='\0')
 800095a:	69bb      	ldr	r3, [r7, #24]
 800095c:	1c5a      	adds	r2, r3, #1
 800095e:	61ba      	str	r2, [r7, #24]
 8000960:	461a      	mov	r2, r3
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d1f3      	bne.n	8000954 <getSubstring+0x1c>

	if(from<0 || from>length){
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	db03      	blt.n	800097a <getSubstring+0x42>
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	69fb      	ldr	r3, [r7, #28]
 8000976:	429a      	cmp	r2, r3
 8000978:	dd04      	ble.n	8000984 <getSubstring+0x4c>
		printf("Invalid \'from\' index\n");
 800097a:	4817      	ldr	r0, [pc, #92]	; (80009d8 <getSubstring+0xa0>)
 800097c:	f002 fc10 	bl	80031a0 <puts>
		return 1;
 8000980:	2301      	movs	r3, #1
 8000982:	e025      	b.n	80009d0 <getSubstring+0x98>
	}
	if(to>length){
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	69fb      	ldr	r3, [r7, #28]
 8000988:	429a      	cmp	r2, r3
 800098a:	dd04      	ble.n	8000996 <getSubstring+0x5e>
		printf("Invalid \'to\' index\n");
 800098c:	4813      	ldr	r0, [pc, #76]	; (80009dc <getSubstring+0xa4>)
 800098e:	f002 fc07 	bl	80031a0 <puts>
		return 1;
 8000992:	2301      	movs	r3, #1
 8000994:	e01c      	b.n	80009d0 <getSubstring+0x98>
	}

	for(i=from,j=0;i<=to;i++,j++){
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	61bb      	str	r3, [r7, #24]
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
 800099e:	e00d      	b.n	80009bc <getSubstring+0x84>
		target[j]=source[i];
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	68fa      	ldr	r2, [r7, #12]
 80009a4:	441a      	add	r2, r3
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	68b9      	ldr	r1, [r7, #8]
 80009aa:	440b      	add	r3, r1
 80009ac:	7812      	ldrb	r2, [r2, #0]
 80009ae:	701a      	strb	r2, [r3, #0]
	for(i=from,j=0;i<=to;i++,j++){
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	3301      	adds	r3, #1
 80009b4:	61bb      	str	r3, [r7, #24]
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	3301      	adds	r3, #1
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	69ba      	ldr	r2, [r7, #24]
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	429a      	cmp	r2, r3
 80009c2:	dded      	ble.n	80009a0 <getSubstring+0x68>
	}

	//assign NULL at the end of string
	target[j]='\0';
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	4413      	add	r3, r2
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]

	return 0;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	080040f4 	.word	0x080040f4
 80009dc:	0800410c 	.word	0x0800410c

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e4:	f000 fb1e 	bl	8001024 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e8:	f000 f816 	bl	8000a18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ec:	f000 f8d6 	bl	8000b9c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009f0:	f000 f8aa 	bl	8000b48 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80009f4:	f000 f87e 	bl	8000af4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  setupBLE(&huart1);
 80009f8:	4805      	ldr	r0, [pc, #20]	; (8000a10 <main+0x30>)
 80009fa:	f7ff fddd 	bl	80005b8 <setupBLE>
  setName("myBLEModuleYES");
 80009fe:	4805      	ldr	r0, [pc, #20]	; (8000a14 <main+0x34>)
 8000a00:	f7ff fe1e 	bl	8000640 <setName>
//  setBeaconUuid("FDB50693A4E24FB1AFCFC6EB07647825");
  setRole(MASTER);
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff fe27 	bl	8000658 <setRole>
  masterScanForSlaves();
 8000a0a:	f7ff fe3b 	bl	8000684 <masterScanForSlaves>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
 8000a0e:	e7fe      	b.n	8000a0e <main+0x2e>
 8000a10:	200000bc 	.word	0x200000bc
 8000a14:	08004120 	.word	0x08004120

08000a18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b094      	sub	sp, #80	; 0x50
 8000a1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	2234      	movs	r2, #52	; 0x34
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f001 ffac 	bl	8002984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a2c:	f107 0308 	add.w	r3, r7, #8
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
 8000a36:	609a      	str	r2, [r3, #8]
 8000a38:	60da      	str	r2, [r3, #12]
 8000a3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	4b2a      	ldr	r3, [pc, #168]	; (8000aec <SystemClock_Config+0xd4>)
 8000a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a44:	4a29      	ldr	r2, [pc, #164]	; (8000aec <SystemClock_Config+0xd4>)
 8000a46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a4c:	4b27      	ldr	r3, [pc, #156]	; (8000aec <SystemClock_Config+0xd4>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a58:	2300      	movs	r3, #0
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <SystemClock_Config+0xd8>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a64:	4a22      	ldr	r2, [pc, #136]	; (8000af0 <SystemClock_Config+0xd8>)
 8000a66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6a:	6013      	str	r3, [r2, #0]
 8000a6c:	4b20      	ldr	r3, [pc, #128]	; (8000af0 <SystemClock_Config+0xd8>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a74:	603b      	str	r3, [r7, #0]
 8000a76:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a80:	2310      	movs	r3, #16
 8000a82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a84:	2302      	movs	r3, #2
 8000a86:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a90:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a94:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000a96:	2304      	movs	r3, #4
 8000a98:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f001 f88e 	bl	8001bc8 <HAL_RCC_OscConfig>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000ab2:	f000 f8e1 	bl	8000c78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ab6:	230f      	movs	r3, #15
 8000ab8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aba:	2302      	movs	r3, #2
 8000abc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ac2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ac6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000acc:	f107 0308 	add.w	r3, r7, #8
 8000ad0:	2102      	movs	r1, #2
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fdac 	bl	8001630 <HAL_RCC_ClockConfig>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000ade:	f000 f8cb 	bl	8000c78 <Error_Handler>
  }
}
 8000ae2:	bf00      	nop
 8000ae4:	3750      	adds	r7, #80	; 0x50
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40023800 	.word	0x40023800
 8000af0:	40007000 	.word	0x40007000

08000af4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <MX_USART1_UART_Init+0x50>)
 8000afc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b0c:	4b0c      	ldr	r3, [pc, #48]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b12:	4b0b      	ldr	r3, [pc, #44]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b18:	4b09      	ldr	r3, [pc, #36]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b1a:	220c      	movs	r2, #12
 8000b1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b24:	4b06      	ldr	r3, [pc, #24]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2a:	4805      	ldr	r0, [pc, #20]	; (8000b40 <MX_USART1_UART_Init+0x4c>)
 8000b2c:	f001 faea 	bl	8002104 <HAL_UART_Init>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b36:	f000 f89f 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3a:	bf00      	nop
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200000bc 	.word	0x200000bc
 8000b44:	40011000 	.word	0x40011000

08000b48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b4e:	4a12      	ldr	r2, [pc, #72]	; (8000b98 <MX_USART2_UART_Init+0x50>)
 8000b50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b52:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b54:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b60:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b6c:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b6e:	220c      	movs	r2, #12
 8000b70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b78:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <MX_USART2_UART_Init+0x4c>)
 8000b80:	f001 fac0 	bl	8002104 <HAL_UART_Init>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b8a:	f000 f875 	bl	8000c78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000100 	.word	0x20000100
 8000b98:	40004400 	.word	0x40004400

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b08a      	sub	sp, #40	; 0x28
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	601a      	str	r2, [r3, #0]
 8000baa:	605a      	str	r2, [r3, #4]
 8000bac:	609a      	str	r2, [r3, #8]
 8000bae:	60da      	str	r2, [r3, #12]
 8000bb0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4b2d      	ldr	r3, [pc, #180]	; (8000c6c <MX_GPIO_Init+0xd0>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a2c      	ldr	r2, [pc, #176]	; (8000c6c <MX_GPIO_Init+0xd0>)
 8000bbc:	f043 0304 	orr.w	r3, r3, #4
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <MX_GPIO_Init+0xd0>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0304 	and.w	r3, r3, #4
 8000bca:	613b      	str	r3, [r7, #16]
 8000bcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	4b26      	ldr	r3, [pc, #152]	; (8000c6c <MX_GPIO_Init+0xd0>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a25      	ldr	r2, [pc, #148]	; (8000c6c <MX_GPIO_Init+0xd0>)
 8000bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b23      	ldr	r3, [pc, #140]	; (8000c6c <MX_GPIO_Init+0xd0>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	2300      	movs	r3, #0
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	4b1f      	ldr	r3, [pc, #124]	; (8000c6c <MX_GPIO_Init+0xd0>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a1e      	ldr	r2, [pc, #120]	; (8000c6c <MX_GPIO_Init+0xd0>)
 8000bf4:	f043 0301 	orr.w	r3, r3, #1
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b1c      	ldr	r3, [pc, #112]	; (8000c6c <MX_GPIO_Init+0xd0>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0301 	and.w	r3, r3, #1
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c06:	2300      	movs	r3, #0
 8000c08:	607b      	str	r3, [r7, #4]
 8000c0a:	4b18      	ldr	r3, [pc, #96]	; (8000c6c <MX_GPIO_Init+0xd0>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a17      	ldr	r2, [pc, #92]	; (8000c6c <MX_GPIO_Init+0xd0>)
 8000c10:	f043 0302 	orr.w	r3, r3, #2
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <MX_GPIO_Init+0xd0>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0302 	and.w	r3, r3, #2
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000c22:	2200      	movs	r2, #0
 8000c24:	2120      	movs	r1, #32
 8000c26:	4812      	ldr	r0, [pc, #72]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000c28:	f000 fce8 	bl	80015fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c32:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c3c:	f107 0314 	add.w	r3, r7, #20
 8000c40:	4619      	mov	r1, r3
 8000c42:	480c      	ldr	r0, [pc, #48]	; (8000c74 <MX_GPIO_Init+0xd8>)
 8000c44:	f000 fb46 	bl	80012d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000c48:	2320      	movs	r3, #32
 8000c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_GPIO_Init+0xd4>)
 8000c60:	f000 fb38 	bl	80012d4 <HAL_GPIO_Init>

}
 8000c64:	bf00      	nop
 8000c66:	3728      	adds	r7, #40	; 0x28
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40023800 	.word	0x40023800
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40020800 	.word	0x40020800

08000c78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c7c:	b672      	cpsid	i
}
 8000c7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8000c80:	e7fe      	b.n	8000c80 <Error_Handler+0x8>
	...

08000c84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	4b10      	ldr	r3, [pc, #64]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	4a0f      	ldr	r2, [pc, #60]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c98:	6453      	str	r3, [r2, #68]	; 0x44
 8000c9a:	4b0d      	ldr	r3, [pc, #52]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ca2:	607b      	str	r3, [r7, #4]
 8000ca4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
 8000caa:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	4a08      	ldr	r2, [pc, #32]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000cb6:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <HAL_MspInit+0x4c>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cbe:	603b      	str	r3, [r7, #0]
 8000cc0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cc2:	2007      	movs	r0, #7
 8000cc4:	f000 fad2 	bl	800126c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40023800 	.word	0x40023800

08000cd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08c      	sub	sp, #48	; 0x30
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]
 8000cea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a32      	ldr	r2, [pc, #200]	; (8000dbc <HAL_UART_MspInit+0xe8>)
 8000cf2:	4293      	cmp	r3, r2
 8000cf4:	d12d      	bne.n	8000d52 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	61bb      	str	r3, [r7, #24]
 8000cfa:	4b31      	ldr	r3, [pc, #196]	; (8000dc0 <HAL_UART_MspInit+0xec>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	4a30      	ldr	r2, [pc, #192]	; (8000dc0 <HAL_UART_MspInit+0xec>)
 8000d00:	f043 0310 	orr.w	r3, r3, #16
 8000d04:	6453      	str	r3, [r2, #68]	; 0x44
 8000d06:	4b2e      	ldr	r3, [pc, #184]	; (8000dc0 <HAL_UART_MspInit+0xec>)
 8000d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0a:	f003 0310 	and.w	r3, r3, #16
 8000d0e:	61bb      	str	r3, [r7, #24]
 8000d10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	617b      	str	r3, [r7, #20]
 8000d16:	4b2a      	ldr	r3, [pc, #168]	; (8000dc0 <HAL_UART_MspInit+0xec>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	4a29      	ldr	r2, [pc, #164]	; (8000dc0 <HAL_UART_MspInit+0xec>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6313      	str	r3, [r2, #48]	; 0x30
 8000d22:	4b27      	ldr	r3, [pc, #156]	; (8000dc0 <HAL_UART_MspInit+0xec>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d2e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d34:	2302      	movs	r3, #2
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3c:	2303      	movs	r3, #3
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d40:	2307      	movs	r3, #7
 8000d42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 031c 	add.w	r3, r7, #28
 8000d48:	4619      	mov	r1, r3
 8000d4a:	481e      	ldr	r0, [pc, #120]	; (8000dc4 <HAL_UART_MspInit+0xf0>)
 8000d4c:	f000 fac2 	bl	80012d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d50:	e030      	b.n	8000db4 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4a1c      	ldr	r2, [pc, #112]	; (8000dc8 <HAL_UART_MspInit+0xf4>)
 8000d58:	4293      	cmp	r3, r2
 8000d5a:	d12b      	bne.n	8000db4 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	613b      	str	r3, [r7, #16]
 8000d60:	4b17      	ldr	r3, [pc, #92]	; (8000dc0 <HAL_UART_MspInit+0xec>)
 8000d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d64:	4a16      	ldr	r2, [pc, #88]	; (8000dc0 <HAL_UART_MspInit+0xec>)
 8000d66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_UART_MspInit+0xec>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	2300      	movs	r3, #0
 8000d7a:	60fb      	str	r3, [r7, #12]
 8000d7c:	4b10      	ldr	r3, [pc, #64]	; (8000dc0 <HAL_UART_MspInit+0xec>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a0f      	ldr	r2, [pc, #60]	; (8000dc0 <HAL_UART_MspInit+0xec>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b0d      	ldr	r3, [pc, #52]	; (8000dc0 <HAL_UART_MspInit+0xec>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d94:	230c      	movs	r3, #12
 8000d96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da0:	2303      	movs	r3, #3
 8000da2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da4:	2307      	movs	r3, #7
 8000da6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da8:	f107 031c 	add.w	r3, r7, #28
 8000dac:	4619      	mov	r1, r3
 8000dae:	4805      	ldr	r0, [pc, #20]	; (8000dc4 <HAL_UART_MspInit+0xf0>)
 8000db0:	f000 fa90 	bl	80012d4 <HAL_GPIO_Init>
}
 8000db4:	bf00      	nop
 8000db6:	3730      	adds	r7, #48	; 0x30
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	40011000 	.word	0x40011000
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	40020000 	.word	0x40020000
 8000dc8:	40004400 	.word	0x40004400

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f956 	bl	80010c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <_getpid>:
char **environ = __env;

/* Functions */
void initialise_monitor_handles() {}

int _getpid(void) { return 1; }
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	2301      	movs	r3, #1
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <_kill>:

int _kill(int pid, int sig) {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	6039      	str	r1, [r7, #0]
  errno = EINVAL;
 8000e3a:	f001 fd3d 	bl	80028b8 <__errno>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2216      	movs	r2, #22
 8000e42:	601a      	str	r2, [r3, #0]
  return -1;
 8000e44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}

08000e50 <_exit>:

void _exit(int status) {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ffe7 	bl	8000e30 <_kill>
  while (1) {
 8000e62:	e7fe      	b.n	8000e62 <_exit+0x12>

08000e64 <_read>:
  } /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len) {
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b086      	sub	sp, #24
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	60f8      	str	r0, [r7, #12]
 8000e6c:	60b9      	str	r1, [r7, #8]
 8000e6e:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000e70:	2300      	movs	r3, #0
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	e00a      	b.n	8000e8c <_read+0x28>
    *ptr++ = __io_getchar();
 8000e76:	f3af 8000 	nop.w
 8000e7a:	4601      	mov	r1, r0
 8000e7c:	68bb      	ldr	r3, [r7, #8]
 8000e7e:	1c5a      	adds	r2, r3, #1
 8000e80:	60ba      	str	r2, [r7, #8]
 8000e82:	b2ca      	uxtb	r2, r1
 8000e84:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	697a      	ldr	r2, [r7, #20]
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	dbf0      	blt.n	8000e76 <_read+0x12>
  }

  return len;
 8000e94:	687b      	ldr	r3, [r7, #4]
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}

08000e9e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8000e9e:	b580      	push	{r7, lr}
 8000ea0:	b086      	sub	sp, #24
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	60f8      	str	r0, [r7, #12]
 8000ea6:	60b9      	str	r1, [r7, #8]
 8000ea8:	607a      	str	r2, [r7, #4]
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
 8000eae:	e009      	b.n	8000ec4 <_write+0x26>
    __io_putchar(*ptr++);
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	1c5a      	adds	r2, r3, #1
 8000eb4:	60ba      	str	r2, [r7, #8]
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	4618      	mov	r0, r3
 8000eba:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	697a      	ldr	r2, [r7, #20]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	dbf1      	blt.n	8000eb0 <_write+0x12>
  }
  return len;
 8000ecc:	687b      	ldr	r3, [r7, #4]
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <_close>:

int _close(int file) { return -1; }
 8000ed6:	b480      	push	{r7}
 8000ed8:	b083      	sub	sp, #12
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
 8000ede:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <_fstat>:

int _fstat(int file, struct stat *st) {
 8000eee:	b480      	push	{r7}
 8000ef0:	b083      	sub	sp, #12
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
 8000ef6:	6039      	str	r1, [r7, #0]
  st->st_mode = S_IFCHR;
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000efe:	605a      	str	r2, [r3, #4]
  return 0;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <_isatty>:

int _isatty(int file) { return 1; }
 8000f0e:	b480      	push	{r7}
 8000f10:	b083      	sub	sp, #12
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
 8000f16:	2301      	movs	r3, #1
 8000f18:	4618      	mov	r0, r3
 8000f1a:	370c      	adds	r7, #12
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <_lseek>:

int _lseek(int file, int ptr, int dir) { return 0; }
 8000f24:	b480      	push	{r7}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	2300      	movs	r3, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
	...

08000f40 <_sbrk>:
 * reserved size, please increase the '_Min_Stack_Size'.
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr) {
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end;             /* Symbol defined in the linker script */
  extern uint8_t _estack;          /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f48:	4a14      	ldr	r2, [pc, #80]	; (8000f9c <_sbrk+0x5c>)
 8000f4a:	4b15      	ldr	r3, [pc, #84]	; (8000fa0 <_sbrk+0x60>)
 8000f4c:	1ad3      	subs	r3, r2, r3
 8000f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end) {
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <_sbrk+0x64>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d102      	bne.n	8000f62 <_sbrk+0x22>
    __sbrk_heap_end = &_end;
 8000f5c:	4b11      	ldr	r3, [pc, #68]	; (8000fa4 <_sbrk+0x64>)
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <_sbrk+0x68>)
 8000f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap) {
 8000f62:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <_sbrk+0x64>)
 8000f64:	681a      	ldr	r2, [r3, #0]
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d207      	bcs.n	8000f80 <_sbrk+0x40>
    errno = ENOMEM;
 8000f70:	f001 fca2 	bl	80028b8 <__errno>
 8000f74:	4603      	mov	r3, r0
 8000f76:	220c      	movs	r2, #12
 8000f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f7e:	e009      	b.n	8000f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f80:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f86:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	4a05      	ldr	r2, [pc, #20]	; (8000fa4 <_sbrk+0x64>)
 8000f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f92:	68fb      	ldr	r3, [r7, #12]
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20020000 	.word	0x20020000
 8000fa0:	00000400 	.word	0x00000400
 8000fa4:	200000ac 	.word	0x200000ac
 8000fa8:	20000158 	.word	0x20000158

08000fac <SystemInit>:
 *         Initialize the FPU setting, vector table location and External memory
 *         configuration.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |=
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <SystemInit+0x20>)
 8000fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb6:	4a05      	ldr	r2, [pc, #20]	; (8000fcc <SystemInit+0x20>)
 8000fb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS |
              VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif                         /* USER_VECT_TAB_ADDRESS */
}
 8000fc0:	bf00      	nop
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr
 8000fca:	bf00      	nop
 8000fcc:	e000ed00 	.word	0xe000ed00

08000fd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001008 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fd6:	490e      	ldr	r1, [pc, #56]	; (8001010 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fd8:	4a0e      	ldr	r2, [pc, #56]	; (8001014 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fdc:	e002      	b.n	8000fe4 <LoopCopyDataInit>

08000fde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fe2:	3304      	adds	r3, #4

08000fe4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fe4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fe6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fe8:	d3f9      	bcc.n	8000fde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fea:	4a0b      	ldr	r2, [pc, #44]	; (8001018 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fec:	4c0b      	ldr	r4, [pc, #44]	; (800101c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff0:	e001      	b.n	8000ff6 <LoopFillZerobss>

08000ff2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ff2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ff4:	3204      	adds	r2, #4

08000ff6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ff6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ff8:	d3fb      	bcc.n	8000ff2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ffa:	f7ff ffd7 	bl	8000fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ffe:	f001 fc73 	bl	80028e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001002:	f7ff fced 	bl	80009e0 <main>
  bx  lr    
 8001006:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001008:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800100c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001010:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001014:	080043d8 	.word	0x080043d8
  ldr r2, =_sbss
 8001018:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 800101c:	20000158 	.word	0x20000158

08001020 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001020:	e7fe      	b.n	8001020 <ADC_IRQHandler>
	...

08001024 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001028:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a0d      	ldr	r2, [pc, #52]	; (8001064 <HAL_Init+0x40>)
 800102e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001032:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_Init+0x40>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a0a      	ldr	r2, [pc, #40]	; (8001064 <HAL_Init+0x40>)
 800103a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800103e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <HAL_Init+0x40>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a07      	ldr	r2, [pc, #28]	; (8001064 <HAL_Init+0x40>)
 8001046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800104a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800104c:	2003      	movs	r0, #3
 800104e:	f000 f90d 	bl	800126c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001052:	2000      	movs	r0, #0
 8001054:	f000 f808 	bl	8001068 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001058:	f7ff fe14 	bl	8000c84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	40023c00 	.word	0x40023c00

08001068 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001070:	4b12      	ldr	r3, [pc, #72]	; (80010bc <HAL_InitTick+0x54>)
 8001072:	681a      	ldr	r2, [r3, #0]
 8001074:	4b12      	ldr	r3, [pc, #72]	; (80010c0 <HAL_InitTick+0x58>)
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800107e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001082:	fbb2 f3f3 	udiv	r3, r2, r3
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f917 	bl	80012ba <HAL_SYSTICK_Config>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	e00e      	b.n	80010b4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2b0f      	cmp	r3, #15
 800109a:	d80a      	bhi.n	80010b2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800109c:	2200      	movs	r2, #0
 800109e:	6879      	ldr	r1, [r7, #4]
 80010a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010a4:	f000 f8ed 	bl	8001282 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010a8:	4a06      	ldr	r2, [pc, #24]	; (80010c4 <HAL_InitTick+0x5c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e000      	b.n	80010b4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3708      	adds	r7, #8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000020 	.word	0x20000020
 80010c0:	20000028 	.word	0x20000028
 80010c4:	20000024 	.word	0x20000024

080010c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010cc:	4b06      	ldr	r3, [pc, #24]	; (80010e8 <HAL_IncTick+0x20>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	461a      	mov	r2, r3
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <HAL_IncTick+0x24>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4413      	add	r3, r2
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_IncTick+0x24>)
 80010da:	6013      	str	r3, [r2, #0]
}
 80010dc:	bf00      	nop
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop
 80010e8:	20000028 	.word	0x20000028
 80010ec:	20000144 	.word	0x20000144

080010f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  return uwTick;
 80010f4:	4b03      	ldr	r3, [pc, #12]	; (8001104 <HAL_GetTick+0x14>)
 80010f6:	681b      	ldr	r3, [r3, #0]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000144 	.word	0x20000144

08001108 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b480      	push	{r7}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001124:	4013      	ands	r3, r2
 8001126:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001130:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001138:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800113a:	4a04      	ldr	r2, [pc, #16]	; (800114c <__NVIC_SetPriorityGrouping+0x44>)
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	60d3      	str	r3, [r2, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <__NVIC_GetPriorityGrouping+0x18>)
 8001156:	68db      	ldr	r3, [r3, #12]
 8001158:	0a1b      	lsrs	r3, r3, #8
 800115a:	f003 0307 	and.w	r3, r3, #7
}
 800115e:	4618      	mov	r0, r3
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	4603      	mov	r3, r0
 8001174:	6039      	str	r1, [r7, #0]
 8001176:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001178:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	db0a      	blt.n	8001196 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	b2da      	uxtb	r2, r3
 8001184:	490c      	ldr	r1, [pc, #48]	; (80011b8 <__NVIC_SetPriority+0x4c>)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	0112      	lsls	r2, r2, #4
 800118c:	b2d2      	uxtb	r2, r2
 800118e:	440b      	add	r3, r1
 8001190:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001194:	e00a      	b.n	80011ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	b2da      	uxtb	r2, r3
 800119a:	4908      	ldr	r1, [pc, #32]	; (80011bc <__NVIC_SetPriority+0x50>)
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	f003 030f 	and.w	r3, r3, #15
 80011a2:	3b04      	subs	r3, #4
 80011a4:	0112      	lsls	r2, r2, #4
 80011a6:	b2d2      	uxtb	r2, r2
 80011a8:	440b      	add	r3, r1
 80011aa:	761a      	strb	r2, [r3, #24]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	e000e100 	.word	0xe000e100
 80011bc:	e000ed00 	.word	0xe000ed00

080011c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b089      	sub	sp, #36	; 0x24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f003 0307 	and.w	r3, r3, #7
 80011d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011d4:	69fb      	ldr	r3, [r7, #28]
 80011d6:	f1c3 0307 	rsb	r3, r3, #7
 80011da:	2b04      	cmp	r3, #4
 80011dc:	bf28      	it	cs
 80011de:	2304      	movcs	r3, #4
 80011e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	3304      	adds	r3, #4
 80011e6:	2b06      	cmp	r3, #6
 80011e8:	d902      	bls.n	80011f0 <NVIC_EncodePriority+0x30>
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3b03      	subs	r3, #3
 80011ee:	e000      	b.n	80011f2 <NVIC_EncodePriority+0x32>
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fa02 f303 	lsl.w	r3, r2, r3
 80011fe:	43da      	mvns	r2, r3
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	401a      	ands	r2, r3
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001208:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	fa01 f303 	lsl.w	r3, r1, r3
 8001212:	43d9      	mvns	r1, r3
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001218:	4313      	orrs	r3, r2
         );
}
 800121a:	4618      	mov	r0, r3
 800121c:	3724      	adds	r7, #36	; 0x24
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
	...

08001228 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3b01      	subs	r3, #1
 8001234:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001238:	d301      	bcc.n	800123e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800123a:	2301      	movs	r3, #1
 800123c:	e00f      	b.n	800125e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800123e:	4a0a      	ldr	r2, [pc, #40]	; (8001268 <SysTick_Config+0x40>)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3b01      	subs	r3, #1
 8001244:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001246:	210f      	movs	r1, #15
 8001248:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800124c:	f7ff ff8e 	bl	800116c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <SysTick_Config+0x40>)
 8001252:	2200      	movs	r2, #0
 8001254:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001256:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Config+0x40>)
 8001258:	2207      	movs	r2, #7
 800125a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800125c:	2300      	movs	r3, #0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	e000e010 	.word	0xe000e010

0800126c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001274:	6878      	ldr	r0, [r7, #4]
 8001276:	f7ff ff47 	bl	8001108 <__NVIC_SetPriorityGrouping>
}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}

08001282 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001282:	b580      	push	{r7, lr}
 8001284:	b086      	sub	sp, #24
 8001286:	af00      	add	r7, sp, #0
 8001288:	4603      	mov	r3, r0
 800128a:	60b9      	str	r1, [r7, #8]
 800128c:	607a      	str	r2, [r7, #4]
 800128e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001294:	f7ff ff5c 	bl	8001150 <__NVIC_GetPriorityGrouping>
 8001298:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68b9      	ldr	r1, [r7, #8]
 800129e:	6978      	ldr	r0, [r7, #20]
 80012a0:	f7ff ff8e 	bl	80011c0 <NVIC_EncodePriority>
 80012a4:	4602      	mov	r2, r0
 80012a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012aa:	4611      	mov	r1, r2
 80012ac:	4618      	mov	r0, r3
 80012ae:	f7ff ff5d 	bl	800116c <__NVIC_SetPriority>
}
 80012b2:	bf00      	nop
 80012b4:	3718      	adds	r7, #24
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ba:	b580      	push	{r7, lr}
 80012bc:	b082      	sub	sp, #8
 80012be:	af00      	add	r7, sp, #0
 80012c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ffb0 	bl	8001228 <SysTick_Config>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	; 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012de:	2300      	movs	r3, #0
 80012e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012e2:	2300      	movs	r3, #0
 80012e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012e6:	2300      	movs	r3, #0
 80012e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012ea:	2300      	movs	r3, #0
 80012ec:	61fb      	str	r3, [r7, #28]
 80012ee:	e165      	b.n	80015bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012f0:	2201      	movs	r2, #1
 80012f2:	69fb      	ldr	r3, [r7, #28]
 80012f4:	fa02 f303 	lsl.w	r3, r2, r3
 80012f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	697a      	ldr	r2, [r7, #20]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	429a      	cmp	r2, r3
 800130a:	f040 8154 	bne.w	80015b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f003 0303 	and.w	r3, r3, #3
 8001316:	2b01      	cmp	r3, #1
 8001318:	d005      	beq.n	8001326 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001322:	2b02      	cmp	r3, #2
 8001324:	d130      	bne.n	8001388 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800132c:	69fb      	ldr	r3, [r7, #28]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	2203      	movs	r2, #3
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	43db      	mvns	r3, r3
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	4013      	ands	r3, r2
 800133c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	005b      	lsls	r3, r3, #1
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800135c:	2201      	movs	r2, #1
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 0201 	and.w	r2, r3, #1
 8001376:	69fb      	ldr	r3, [r7, #28]
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	69ba      	ldr	r2, [r7, #24]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f003 0303 	and.w	r3, r3, #3
 8001390:	2b03      	cmp	r3, #3
 8001392:	d017      	beq.n	80013c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800139a:	69fb      	ldr	r3, [r7, #28]
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	2203      	movs	r2, #3
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	43db      	mvns	r3, r3
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4013      	ands	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	689a      	ldr	r2, [r3, #8]
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f003 0303 	and.w	r3, r3, #3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d123      	bne.n	8001418 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	08da      	lsrs	r2, r3, #3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	3208      	adds	r2, #8
 80013d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	220f      	movs	r2, #15
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	691a      	ldr	r2, [r3, #16]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	08da      	lsrs	r2, r3, #3
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	3208      	adds	r2, #8
 8001412:	69b9      	ldr	r1, [r7, #24]
 8001414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800141e:	69fb      	ldr	r3, [r7, #28]
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	2203      	movs	r2, #3
 8001424:	fa02 f303 	lsl.w	r3, r2, r3
 8001428:	43db      	mvns	r3, r3
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	4013      	ands	r3, r2
 800142e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0203 	and.w	r2, r3, #3
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	69ba      	ldr	r2, [r7, #24]
 8001442:	4313      	orrs	r3, r2
 8001444:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80ae 	beq.w	80015b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	4b5d      	ldr	r3, [pc, #372]	; (80015d4 <HAL_GPIO_Init+0x300>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	4a5c      	ldr	r2, [pc, #368]	; (80015d4 <HAL_GPIO_Init+0x300>)
 8001464:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001468:	6453      	str	r3, [r2, #68]	; 0x44
 800146a:	4b5a      	ldr	r3, [pc, #360]	; (80015d4 <HAL_GPIO_Init+0x300>)
 800146c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800146e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001476:	4a58      	ldr	r2, [pc, #352]	; (80015d8 <HAL_GPIO_Init+0x304>)
 8001478:	69fb      	ldr	r3, [r7, #28]
 800147a:	089b      	lsrs	r3, r3, #2
 800147c:	3302      	adds	r3, #2
 800147e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001482:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	220f      	movs	r2, #15
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a4f      	ldr	r2, [pc, #316]	; (80015dc <HAL_GPIO_Init+0x308>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d025      	beq.n	80014ee <HAL_GPIO_Init+0x21a>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4e      	ldr	r2, [pc, #312]	; (80015e0 <HAL_GPIO_Init+0x30c>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d01f      	beq.n	80014ea <HAL_GPIO_Init+0x216>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a4d      	ldr	r2, [pc, #308]	; (80015e4 <HAL_GPIO_Init+0x310>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d019      	beq.n	80014e6 <HAL_GPIO_Init+0x212>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a4c      	ldr	r2, [pc, #304]	; (80015e8 <HAL_GPIO_Init+0x314>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d013      	beq.n	80014e2 <HAL_GPIO_Init+0x20e>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a4b      	ldr	r2, [pc, #300]	; (80015ec <HAL_GPIO_Init+0x318>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d00d      	beq.n	80014de <HAL_GPIO_Init+0x20a>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4a4a      	ldr	r2, [pc, #296]	; (80015f0 <HAL_GPIO_Init+0x31c>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d007      	beq.n	80014da <HAL_GPIO_Init+0x206>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a49      	ldr	r2, [pc, #292]	; (80015f4 <HAL_GPIO_Init+0x320>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d101      	bne.n	80014d6 <HAL_GPIO_Init+0x202>
 80014d2:	2306      	movs	r3, #6
 80014d4:	e00c      	b.n	80014f0 <HAL_GPIO_Init+0x21c>
 80014d6:	2307      	movs	r3, #7
 80014d8:	e00a      	b.n	80014f0 <HAL_GPIO_Init+0x21c>
 80014da:	2305      	movs	r3, #5
 80014dc:	e008      	b.n	80014f0 <HAL_GPIO_Init+0x21c>
 80014de:	2304      	movs	r3, #4
 80014e0:	e006      	b.n	80014f0 <HAL_GPIO_Init+0x21c>
 80014e2:	2303      	movs	r3, #3
 80014e4:	e004      	b.n	80014f0 <HAL_GPIO_Init+0x21c>
 80014e6:	2302      	movs	r3, #2
 80014e8:	e002      	b.n	80014f0 <HAL_GPIO_Init+0x21c>
 80014ea:	2301      	movs	r3, #1
 80014ec:	e000      	b.n	80014f0 <HAL_GPIO_Init+0x21c>
 80014ee:	2300      	movs	r3, #0
 80014f0:	69fa      	ldr	r2, [r7, #28]
 80014f2:	f002 0203 	and.w	r2, r2, #3
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	4093      	lsls	r3, r2
 80014fa:	69ba      	ldr	r2, [r7, #24]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001500:	4935      	ldr	r1, [pc, #212]	; (80015d8 <HAL_GPIO_Init+0x304>)
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	089b      	lsrs	r3, r3, #2
 8001506:	3302      	adds	r3, #2
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800150e:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <HAL_GPIO_Init+0x324>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	43db      	mvns	r3, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4013      	ands	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d003      	beq.n	8001532 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	4313      	orrs	r3, r2
 8001530:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001532:	4a31      	ldr	r2, [pc, #196]	; (80015f8 <HAL_GPIO_Init+0x324>)
 8001534:	69bb      	ldr	r3, [r7, #24]
 8001536:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001538:	4b2f      	ldr	r3, [pc, #188]	; (80015f8 <HAL_GPIO_Init+0x324>)
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153e:	693b      	ldr	r3, [r7, #16]
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d003      	beq.n	800155c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	4313      	orrs	r3, r2
 800155a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155c:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <HAL_GPIO_Init+0x324>)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001562:	4b25      	ldr	r3, [pc, #148]	; (80015f8 <HAL_GPIO_Init+0x324>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	43db      	mvns	r3, r3
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	4013      	ands	r3, r2
 8001570:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800157a:	2b00      	cmp	r3, #0
 800157c:	d003      	beq.n	8001586 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800157e:	69ba      	ldr	r2, [r7, #24]
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001586:	4a1c      	ldr	r2, [pc, #112]	; (80015f8 <HAL_GPIO_Init+0x324>)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800158c:	4b1a      	ldr	r3, [pc, #104]	; (80015f8 <HAL_GPIO_Init+0x324>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001592:	693b      	ldr	r3, [r7, #16]
 8001594:	43db      	mvns	r3, r3
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	4013      	ands	r3, r2
 800159a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d003      	beq.n	80015b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015a8:	69ba      	ldr	r2, [r7, #24]
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015b0:	4a11      	ldr	r2, [pc, #68]	; (80015f8 <HAL_GPIO_Init+0x324>)
 80015b2:	69bb      	ldr	r3, [r7, #24]
 80015b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	3301      	adds	r3, #1
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	2b0f      	cmp	r3, #15
 80015c0:	f67f ae96 	bls.w	80012f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015c4:	bf00      	nop
 80015c6:	bf00      	nop
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40023800 	.word	0x40023800
 80015d8:	40013800 	.word	0x40013800
 80015dc:	40020000 	.word	0x40020000
 80015e0:	40020400 	.word	0x40020400
 80015e4:	40020800 	.word	0x40020800
 80015e8:	40020c00 	.word	0x40020c00
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40021800 	.word	0x40021800
 80015f8:	40013c00 	.word	0x40013c00

080015fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
 8001604:	460b      	mov	r3, r1
 8001606:	807b      	strh	r3, [r7, #2]
 8001608:	4613      	mov	r3, r2
 800160a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800160c:	787b      	ldrb	r3, [r7, #1]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001612:	887a      	ldrh	r2, [r7, #2]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001618:	e003      	b.n	8001622 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800161a:	887b      	ldrh	r3, [r7, #2]
 800161c:	041a      	lsls	r2, r3, #16
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
}
 8001622:	bf00      	nop
 8001624:	370c      	adds	r7, #12
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr
	...

08001630 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
 8001638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001640:	2301      	movs	r3, #1
 8001642:	e0cc      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001644:	4b68      	ldr	r3, [pc, #416]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 030f 	and.w	r3, r3, #15
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	429a      	cmp	r2, r3
 8001650:	d90c      	bls.n	800166c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001652:	4b65      	ldr	r3, [pc, #404]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	683a      	ldr	r2, [r7, #0]
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800165a:	4b63      	ldr	r3, [pc, #396]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	429a      	cmp	r2, r3
 8001666:	d001      	beq.n	800166c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0b8      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0302 	and.w	r3, r3, #2
 8001674:	2b00      	cmp	r3, #0
 8001676:	d020      	beq.n	80016ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0304 	and.w	r3, r3, #4
 8001680:	2b00      	cmp	r3, #0
 8001682:	d005      	beq.n	8001690 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001684:	4b59      	ldr	r3, [pc, #356]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001686:	689b      	ldr	r3, [r3, #8]
 8001688:	4a58      	ldr	r2, [pc, #352]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800168a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800168e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0308 	and.w	r3, r3, #8
 8001698:	2b00      	cmp	r3, #0
 800169a:	d005      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800169c:	4b53      	ldr	r3, [pc, #332]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4a52      	ldr	r2, [pc, #328]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016a8:	4b50      	ldr	r3, [pc, #320]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	494d      	ldr	r1, [pc, #308]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d044      	beq.n	8001750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d107      	bne.n	80016de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ce:	4b47      	ldr	r3, [pc, #284]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d119      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e07f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d003      	beq.n	80016ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d107      	bne.n	80016fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016ee:	4b3f      	ldr	r3, [pc, #252]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d109      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e06f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fe:	4b3b      	ldr	r3, [pc, #236]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	2b00      	cmp	r3, #0
 8001708:	d101      	bne.n	800170e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e067      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800170e:	4b37      	ldr	r3, [pc, #220]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f023 0203 	bic.w	r2, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4934      	ldr	r1, [pc, #208]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 800171c:	4313      	orrs	r3, r2
 800171e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001720:	f7ff fce6 	bl	80010f0 <HAL_GetTick>
 8001724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001726:	e00a      	b.n	800173e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001728:	f7ff fce2 	bl	80010f0 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	f241 3288 	movw	r2, #5000	; 0x1388
 8001736:	4293      	cmp	r3, r2
 8001738:	d901      	bls.n	800173e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e04f      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173e:	4b2b      	ldr	r3, [pc, #172]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 020c 	and.w	r2, r3, #12
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	009b      	lsls	r3, r3, #2
 800174c:	429a      	cmp	r2, r3
 800174e:	d1eb      	bne.n	8001728 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001750:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 030f 	and.w	r3, r3, #15
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d20c      	bcs.n	8001778 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	683a      	ldr	r2, [r7, #0]
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001766:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 030f 	and.w	r3, r3, #15
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	429a      	cmp	r2, r3
 8001772:	d001      	beq.n	8001778 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e032      	b.n	80017de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	2b00      	cmp	r3, #0
 8001782:	d008      	beq.n	8001796 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001784:	4b19      	ldr	r3, [pc, #100]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	4916      	ldr	r1, [pc, #88]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 8001792:	4313      	orrs	r3, r2
 8001794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d009      	beq.n	80017b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017a2:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	490e      	ldr	r1, [pc, #56]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017b6:	f000 f855 	bl	8001864 <HAL_RCC_GetSysClockFreq>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <HAL_RCC_ClockConfig+0x1bc>)
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	490a      	ldr	r1, [pc, #40]	; (80017f0 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	5ccb      	ldrb	r3, [r1, r3]
 80017ca:	fa22 f303 	lsr.w	r3, r2, r3
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_RCC_ClockConfig+0x1c4>)
 80017d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017d2:	4b09      	ldr	r3, [pc, #36]	; (80017f8 <HAL_RCC_ClockConfig+0x1c8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7ff fc46 	bl	8001068 <HAL_InitTick>

  return HAL_OK;
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	40023c00 	.word	0x40023c00
 80017ec:	40023800 	.word	0x40023800
 80017f0:	0800413c 	.word	0x0800413c
 80017f4:	20000020 	.word	0x20000020
 80017f8:	20000024 	.word	0x20000024

080017fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <HAL_RCC_GetHCLKFreq+0x14>)
 8001802:	681b      	ldr	r3, [r3, #0]
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	20000020 	.word	0x20000020

08001814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001818:	f7ff fff0 	bl	80017fc <HAL_RCC_GetHCLKFreq>
 800181c:	4602      	mov	r2, r0
 800181e:	4b05      	ldr	r3, [pc, #20]	; (8001834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	0a9b      	lsrs	r3, r3, #10
 8001824:	f003 0307 	and.w	r3, r3, #7
 8001828:	4903      	ldr	r1, [pc, #12]	; (8001838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800182a:	5ccb      	ldrb	r3, [r1, r3]
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001830:	4618      	mov	r0, r3
 8001832:	bd80      	pop	{r7, pc}
 8001834:	40023800 	.word	0x40023800
 8001838:	0800414c 	.word	0x0800414c

0800183c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001840:	f7ff ffdc 	bl	80017fc <HAL_RCC_GetHCLKFreq>
 8001844:	4602      	mov	r2, r0
 8001846:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	0b5b      	lsrs	r3, r3, #13
 800184c:	f003 0307 	and.w	r3, r3, #7
 8001850:	4903      	ldr	r1, [pc, #12]	; (8001860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001852:	5ccb      	ldrb	r3, [r1, r3]
 8001854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001858:	4618      	mov	r0, r3
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	0800414c 	.word	0x0800414c

08001864 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001868:	b088      	sub	sp, #32
 800186a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001874:	2300      	movs	r3, #0
 8001876:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800187c:	2300      	movs	r3, #0
 800187e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001880:	4bce      	ldr	r3, [pc, #824]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x358>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f003 030c 	and.w	r3, r3, #12
 8001888:	2b0c      	cmp	r3, #12
 800188a:	f200 818d 	bhi.w	8001ba8 <HAL_RCC_GetSysClockFreq+0x344>
 800188e:	a201      	add	r2, pc, #4	; (adr r2, 8001894 <HAL_RCC_GetSysClockFreq+0x30>)
 8001890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001894:	080018c9 	.word	0x080018c9
 8001898:	08001ba9 	.word	0x08001ba9
 800189c:	08001ba9 	.word	0x08001ba9
 80018a0:	08001ba9 	.word	0x08001ba9
 80018a4:	080018cf 	.word	0x080018cf
 80018a8:	08001ba9 	.word	0x08001ba9
 80018ac:	08001ba9 	.word	0x08001ba9
 80018b0:	08001ba9 	.word	0x08001ba9
 80018b4:	080018d5 	.word	0x080018d5
 80018b8:	08001ba9 	.word	0x08001ba9
 80018bc:	08001ba9 	.word	0x08001ba9
 80018c0:	08001ba9 	.word	0x08001ba9
 80018c4:	08001a49 	.word	0x08001a49
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c8:	4bbd      	ldr	r3, [pc, #756]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x35c>)
 80018ca:	61bb      	str	r3, [r7, #24]
       break;
 80018cc:	e16f      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ce:	4bbd      	ldr	r3, [pc, #756]	; (8001bc4 <HAL_RCC_GetSysClockFreq+0x360>)
 80018d0:	61bb      	str	r3, [r7, #24]
      break;
 80018d2:	e16c      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d4:	4bb9      	ldr	r3, [pc, #740]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x358>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018dc:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80018de:	4bb7      	ldr	r3, [pc, #732]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x358>)
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d053      	beq.n	8001992 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ea:	4bb4      	ldr	r3, [pc, #720]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x358>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	099b      	lsrs	r3, r3, #6
 80018f0:	461a      	mov	r2, r3
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80018fa:	f04f 0100 	mov.w	r1, #0
 80018fe:	ea02 0400 	and.w	r4, r2, r0
 8001902:	603c      	str	r4, [r7, #0]
 8001904:	400b      	ands	r3, r1
 8001906:	607b      	str	r3, [r7, #4]
 8001908:	e9d7 4500 	ldrd	r4, r5, [r7]
 800190c:	4620      	mov	r0, r4
 800190e:	4629      	mov	r1, r5
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	014b      	lsls	r3, r1, #5
 800191a:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800191e:	0142      	lsls	r2, r0, #5
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	4623      	mov	r3, r4
 8001926:	1ac0      	subs	r0, r0, r3
 8001928:	462b      	mov	r3, r5
 800192a:	eb61 0103 	sbc.w	r1, r1, r3
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	f04f 0300 	mov.w	r3, #0
 8001936:	018b      	lsls	r3, r1, #6
 8001938:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800193c:	0182      	lsls	r2, r0, #6
 800193e:	1a12      	subs	r2, r2, r0
 8001940:	eb63 0301 	sbc.w	r3, r3, r1
 8001944:	f04f 0000 	mov.w	r0, #0
 8001948:	f04f 0100 	mov.w	r1, #0
 800194c:	00d9      	lsls	r1, r3, #3
 800194e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001952:	00d0      	lsls	r0, r2, #3
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4621      	mov	r1, r4
 800195a:	1852      	adds	r2, r2, r1
 800195c:	4629      	mov	r1, r5
 800195e:	eb43 0101 	adc.w	r1, r3, r1
 8001962:	460b      	mov	r3, r1
 8001964:	f04f 0000 	mov.w	r0, #0
 8001968:	f04f 0100 	mov.w	r1, #0
 800196c:	0259      	lsls	r1, r3, #9
 800196e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001972:	0250      	lsls	r0, r2, #9
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	461a      	mov	r2, r3
 8001980:	f04f 0300 	mov.w	r3, #0
 8001984:	f7fe fc9c 	bl	80002c0 <__aeabi_uldivmod>
 8001988:	4602      	mov	r2, r0
 800198a:	460b      	mov	r3, r1
 800198c:	4613      	mov	r3, r2
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	e04c      	b.n	8001a2c <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001992:	4b8a      	ldr	r3, [pc, #552]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x358>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	099b      	lsrs	r3, r3, #6
 8001998:	461a      	mov	r2, r3
 800199a:	f04f 0300 	mov.w	r3, #0
 800199e:	f240 10ff 	movw	r0, #511	; 0x1ff
 80019a2:	f04f 0100 	mov.w	r1, #0
 80019a6:	ea02 0a00 	and.w	sl, r2, r0
 80019aa:	ea03 0b01 	and.w	fp, r3, r1
 80019ae:	4650      	mov	r0, sl
 80019b0:	4659      	mov	r1, fp
 80019b2:	f04f 0200 	mov.w	r2, #0
 80019b6:	f04f 0300 	mov.w	r3, #0
 80019ba:	014b      	lsls	r3, r1, #5
 80019bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80019c0:	0142      	lsls	r2, r0, #5
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	ebb0 000a 	subs.w	r0, r0, sl
 80019ca:	eb61 010b 	sbc.w	r1, r1, fp
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	f04f 0300 	mov.w	r3, #0
 80019d6:	018b      	lsls	r3, r1, #6
 80019d8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80019dc:	0182      	lsls	r2, r0, #6
 80019de:	1a12      	subs	r2, r2, r0
 80019e0:	eb63 0301 	sbc.w	r3, r3, r1
 80019e4:	f04f 0000 	mov.w	r0, #0
 80019e8:	f04f 0100 	mov.w	r1, #0
 80019ec:	00d9      	lsls	r1, r3, #3
 80019ee:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80019f2:	00d0      	lsls	r0, r2, #3
 80019f4:	4602      	mov	r2, r0
 80019f6:	460b      	mov	r3, r1
 80019f8:	eb12 020a 	adds.w	r2, r2, sl
 80019fc:	eb43 030b 	adc.w	r3, r3, fp
 8001a00:	f04f 0000 	mov.w	r0, #0
 8001a04:	f04f 0100 	mov.w	r1, #0
 8001a08:	0299      	lsls	r1, r3, #10
 8001a0a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001a0e:	0290      	lsls	r0, r2, #10
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4610      	mov	r0, r2
 8001a16:	4619      	mov	r1, r3
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	f04f 0300 	mov.w	r3, #0
 8001a20:	f7fe fc4e 	bl	80002c0 <__aeabi_uldivmod>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001a2c:	4b63      	ldr	r3, [pc, #396]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x358>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	0c1b      	lsrs	r3, r3, #16
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	3301      	adds	r3, #1
 8001a38:	005b      	lsls	r3, r3, #1
 8001a3a:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001a3c:	69fa      	ldr	r2, [r7, #28]
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a44:	61bb      	str	r3, [r7, #24]
      break;
 8001a46:	e0b2      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a48:	4b5c      	ldr	r3, [pc, #368]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x358>)
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001a50:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a52:	4b5a      	ldr	r3, [pc, #360]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x358>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d04d      	beq.n	8001afa <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a5e:	4b57      	ldr	r3, [pc, #348]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x358>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	099b      	lsrs	r3, r3, #6
 8001a64:	461a      	mov	r2, r3
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001a6e:	f04f 0100 	mov.w	r1, #0
 8001a72:	ea02 0800 	and.w	r8, r2, r0
 8001a76:	ea03 0901 	and.w	r9, r3, r1
 8001a7a:	4640      	mov	r0, r8
 8001a7c:	4649      	mov	r1, r9
 8001a7e:	f04f 0200 	mov.w	r2, #0
 8001a82:	f04f 0300 	mov.w	r3, #0
 8001a86:	014b      	lsls	r3, r1, #5
 8001a88:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001a8c:	0142      	lsls	r2, r0, #5
 8001a8e:	4610      	mov	r0, r2
 8001a90:	4619      	mov	r1, r3
 8001a92:	ebb0 0008 	subs.w	r0, r0, r8
 8001a96:	eb61 0109 	sbc.w	r1, r1, r9
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	018b      	lsls	r3, r1, #6
 8001aa4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001aa8:	0182      	lsls	r2, r0, #6
 8001aaa:	1a12      	subs	r2, r2, r0
 8001aac:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab0:	f04f 0000 	mov.w	r0, #0
 8001ab4:	f04f 0100 	mov.w	r1, #0
 8001ab8:	00d9      	lsls	r1, r3, #3
 8001aba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001abe:	00d0      	lsls	r0, r2, #3
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	eb12 0208 	adds.w	r2, r2, r8
 8001ac8:	eb43 0309 	adc.w	r3, r3, r9
 8001acc:	f04f 0000 	mov.w	r0, #0
 8001ad0:	f04f 0100 	mov.w	r1, #0
 8001ad4:	0259      	lsls	r1, r3, #9
 8001ad6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001ada:	0250      	lsls	r0, r2, #9
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	4610      	mov	r0, r2
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	f7fe fbe8 	bl	80002c0 <__aeabi_uldivmod>
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4613      	mov	r3, r2
 8001af6:	61fb      	str	r3, [r7, #28]
 8001af8:	e04a      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001afa:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x358>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	099b      	lsrs	r3, r3, #6
 8001b00:	461a      	mov	r2, r3
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001b0a:	f04f 0100 	mov.w	r1, #0
 8001b0e:	ea02 0400 	and.w	r4, r2, r0
 8001b12:	ea03 0501 	and.w	r5, r3, r1
 8001b16:	4620      	mov	r0, r4
 8001b18:	4629      	mov	r1, r5
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	f04f 0300 	mov.w	r3, #0
 8001b22:	014b      	lsls	r3, r1, #5
 8001b24:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001b28:	0142      	lsls	r2, r0, #5
 8001b2a:	4610      	mov	r0, r2
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	1b00      	subs	r0, r0, r4
 8001b30:	eb61 0105 	sbc.w	r1, r1, r5
 8001b34:	f04f 0200 	mov.w	r2, #0
 8001b38:	f04f 0300 	mov.w	r3, #0
 8001b3c:	018b      	lsls	r3, r1, #6
 8001b3e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001b42:	0182      	lsls	r2, r0, #6
 8001b44:	1a12      	subs	r2, r2, r0
 8001b46:	eb63 0301 	sbc.w	r3, r3, r1
 8001b4a:	f04f 0000 	mov.w	r0, #0
 8001b4e:	f04f 0100 	mov.w	r1, #0
 8001b52:	00d9      	lsls	r1, r3, #3
 8001b54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001b58:	00d0      	lsls	r0, r2, #3
 8001b5a:	4602      	mov	r2, r0
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	1912      	adds	r2, r2, r4
 8001b60:	eb45 0303 	adc.w	r3, r5, r3
 8001b64:	f04f 0000 	mov.w	r0, #0
 8001b68:	f04f 0100 	mov.w	r1, #0
 8001b6c:	0299      	lsls	r1, r3, #10
 8001b6e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001b72:	0290      	lsls	r0, r2, #10
 8001b74:	4602      	mov	r2, r0
 8001b76:	460b      	mov	r3, r1
 8001b78:	4610      	mov	r0, r2
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	f04f 0300 	mov.w	r3, #0
 8001b84:	f7fe fb9c 	bl	80002c0 <__aeabi_uldivmod>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <HAL_RCC_GetSysClockFreq+0x358>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	0f1b      	lsrs	r3, r3, #28
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8001b9c:	69fa      	ldr	r2, [r7, #28]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba4:	61bb      	str	r3, [r7, #24]
      break;
 8001ba6:	e002      	b.n	8001bae <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ba8:	4b05      	ldr	r3, [pc, #20]	; (8001bc0 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001baa:	61bb      	str	r3, [r7, #24]
      break;
 8001bac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001bae:	69bb      	ldr	r3, [r7, #24]
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3720      	adds	r7, #32
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001bba:	bf00      	nop
 8001bbc:	40023800 	.word	0x40023800
 8001bc0:	00f42400 	.word	0x00f42400
 8001bc4:	007a1200 	.word	0x007a1200

08001bc8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b086      	sub	sp, #24
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e28d      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 8083 	beq.w	8001cee <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001be8:	4b94      	ldr	r3, [pc, #592]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 030c 	and.w	r3, r3, #12
 8001bf0:	2b04      	cmp	r3, #4
 8001bf2:	d019      	beq.n	8001c28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001bf4:	4b91      	ldr	r3, [pc, #580]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001bfc:	2b08      	cmp	r3, #8
 8001bfe:	d106      	bne.n	8001c0e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c00:	4b8e      	ldr	r3, [pc, #568]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c0c:	d00c      	beq.n	8001c28 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c0e:	4b8b      	ldr	r3, [pc, #556]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001c16:	2b0c      	cmp	r3, #12
 8001c18:	d112      	bne.n	8001c40 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1a:	4b88      	ldr	r3, [pc, #544]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c26:	d10b      	bne.n	8001c40 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c28:	4b84      	ldr	r3, [pc, #528]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d05b      	beq.n	8001cec <HAL_RCC_OscConfig+0x124>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d157      	bne.n	8001cec <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e25a      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c48:	d106      	bne.n	8001c58 <HAL_RCC_OscConfig+0x90>
 8001c4a:	4b7c      	ldr	r3, [pc, #496]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7b      	ldr	r2, [pc, #492]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	e01d      	b.n	8001c94 <HAL_RCC_OscConfig+0xcc>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0xb4>
 8001c62:	4b76      	ldr	r3, [pc, #472]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	4a75      	ldr	r2, [pc, #468]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6013      	str	r3, [r2, #0]
 8001c6e:	4b73      	ldr	r3, [pc, #460]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a72      	ldr	r2, [pc, #456]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	e00b      	b.n	8001c94 <HAL_RCC_OscConfig+0xcc>
 8001c7c:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a6e      	ldr	r2, [pc, #440]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	4b6c      	ldr	r3, [pc, #432]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a6b      	ldr	r2, [pc, #428]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7ff fa28 	bl	80010f0 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff fa24 	bl	80010f0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b64      	cmp	r3, #100	; 0x64
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e21f      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb6:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xdc>
 8001cc2:	e014      	b.n	8001cee <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fa14 	bl	80010f0 <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ccc:	f7ff fa10 	bl	80010f0 <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b64      	cmp	r3, #100	; 0x64
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e20b      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cde:	4b57      	ldr	r3, [pc, #348]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1f0      	bne.n	8001ccc <HAL_RCC_OscConfig+0x104>
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d06f      	beq.n	8001dda <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001cfa:	4b50      	ldr	r3, [pc, #320]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	f003 030c 	and.w	r3, r3, #12
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d017      	beq.n	8001d36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d06:	4b4d      	ldr	r3, [pc, #308]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d105      	bne.n	8001d1e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d12:	4b4a      	ldr	r3, [pc, #296]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d1e:	4b47      	ldr	r3, [pc, #284]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001d26:	2b0c      	cmp	r3, #12
 8001d28:	d11c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d2a:	4b44      	ldr	r3, [pc, #272]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d116      	bne.n	8001d64 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d36:	4b41      	ldr	r3, [pc, #260]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d005      	beq.n	8001d4e <HAL_RCC_OscConfig+0x186>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d001      	beq.n	8001d4e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e1d3      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d4e:	4b3b      	ldr	r3, [pc, #236]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	00db      	lsls	r3, r3, #3
 8001d5c:	4937      	ldr	r1, [pc, #220]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d62:	e03a      	b.n	8001dda <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d020      	beq.n	8001dae <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d6c:	4b34      	ldr	r3, [pc, #208]	; (8001e40 <HAL_RCC_OscConfig+0x278>)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff f9bd 	bl	80010f0 <HAL_GetTick>
 8001d76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001d7a:	f7ff f9b9 	bl	80010f0 <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e1b4      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0f0      	beq.n	8001d7a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d98:	4b28      	ldr	r3, [pc, #160]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	4925      	ldr	r1, [pc, #148]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	600b      	str	r3, [r1, #0]
 8001dac:	e015      	b.n	8001dda <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dae:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <HAL_RCC_OscConfig+0x278>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff f99c 	bl	80010f0 <HAL_GetTick>
 8001db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dbc:	f7ff f998 	bl	80010f0 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e193      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f003 0308 	and.w	r3, r3, #8
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d036      	beq.n	8001e54 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d016      	beq.n	8001e1c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dee:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df4:	f7ff f97c 	bl	80010f0 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001dfc:	f7ff f978 	bl	80010f0 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e173      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e0e:	4b0b      	ldr	r3, [pc, #44]	; (8001e3c <HAL_RCC_OscConfig+0x274>)
 8001e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d0f0      	beq.n	8001dfc <HAL_RCC_OscConfig+0x234>
 8001e1a:	e01b      	b.n	8001e54 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <HAL_RCC_OscConfig+0x27c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e22:	f7ff f965 	bl	80010f0 <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e28:	e00e      	b.n	8001e48 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e2a:	f7ff f961 	bl	80010f0 <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d907      	bls.n	8001e48 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e15c      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	42470000 	.word	0x42470000
 8001e44:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e48:	4b8a      	ldr	r3, [pc, #552]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e4c:	f003 0302 	and.w	r3, r3, #2
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d1ea      	bne.n	8001e2a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 8097 	beq.w	8001f90 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e62:	2300      	movs	r3, #0
 8001e64:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e66:	4b83      	ldr	r3, [pc, #524]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d10f      	bne.n	8001e92 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60bb      	str	r3, [r7, #8]
 8001e76:	4b7f      	ldr	r3, [pc, #508]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7a:	4a7e      	ldr	r2, [pc, #504]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001e7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6413      	str	r3, [r2, #64]	; 0x40
 8001e82:	4b7c      	ldr	r3, [pc, #496]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8a:	60bb      	str	r3, [r7, #8]
 8001e8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e92:	4b79      	ldr	r3, [pc, #484]	; (8002078 <HAL_RCC_OscConfig+0x4b0>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d118      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e9e:	4b76      	ldr	r3, [pc, #472]	; (8002078 <HAL_RCC_OscConfig+0x4b0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a75      	ldr	r2, [pc, #468]	; (8002078 <HAL_RCC_OscConfig+0x4b0>)
 8001ea4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ea8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff f921 	bl	80010f0 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001eb0:	e008      	b.n	8001ec4 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb2:	f7ff f91d 	bl	80010f0 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	2b02      	cmp	r3, #2
 8001ebe:	d901      	bls.n	8001ec4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e118      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ec4:	4b6c      	ldr	r3, [pc, #432]	; (8002078 <HAL_RCC_OscConfig+0x4b0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0f0      	beq.n	8001eb2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d106      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x31e>
 8001ed8:	4b66      	ldr	r3, [pc, #408]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001edc:	4a65      	ldr	r2, [pc, #404]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001ede:	f043 0301 	orr.w	r3, r3, #1
 8001ee2:	6713      	str	r3, [r2, #112]	; 0x70
 8001ee4:	e01c      	b.n	8001f20 <HAL_RCC_OscConfig+0x358>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	2b05      	cmp	r3, #5
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCC_OscConfig+0x340>
 8001eee:	4b61      	ldr	r3, [pc, #388]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ef2:	4a60      	ldr	r2, [pc, #384]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001ef4:	f043 0304 	orr.w	r3, r3, #4
 8001ef8:	6713      	str	r3, [r2, #112]	; 0x70
 8001efa:	4b5e      	ldr	r3, [pc, #376]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001efe:	4a5d      	ldr	r2, [pc, #372]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6713      	str	r3, [r2, #112]	; 0x70
 8001f06:	e00b      	b.n	8001f20 <HAL_RCC_OscConfig+0x358>
 8001f08:	4b5a      	ldr	r3, [pc, #360]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f0c:	4a59      	ldr	r2, [pc, #356]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001f0e:	f023 0301 	bic.w	r3, r3, #1
 8001f12:	6713      	str	r3, [r2, #112]	; 0x70
 8001f14:	4b57      	ldr	r3, [pc, #348]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001f16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f18:	4a56      	ldr	r2, [pc, #344]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001f1a:	f023 0304 	bic.w	r3, r3, #4
 8001f1e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d015      	beq.n	8001f54 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f28:	f7ff f8e2 	bl	80010f0 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f2e:	e00a      	b.n	8001f46 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f30:	f7ff f8de 	bl	80010f0 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d901      	bls.n	8001f46 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001f42:	2303      	movs	r3, #3
 8001f44:	e0d7      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f46:	4b4b      	ldr	r3, [pc, #300]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001f48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d0ee      	beq.n	8001f30 <HAL_RCC_OscConfig+0x368>
 8001f52:	e014      	b.n	8001f7e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f54:	f7ff f8cc 	bl	80010f0 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f5a:	e00a      	b.n	8001f72 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f5c:	f7ff f8c8 	bl	80010f0 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d901      	bls.n	8001f72 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	e0c1      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f72:	4b40      	ldr	r3, [pc, #256]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1ee      	bne.n	8001f5c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f7e:	7dfb      	ldrb	r3, [r7, #23]
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d105      	bne.n	8001f90 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f84:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f88:	4a3a      	ldr	r2, [pc, #232]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001f8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f8e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 80ad 	beq.w	80020f4 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f9a:	4b36      	ldr	r3, [pc, #216]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 030c 	and.w	r3, r3, #12
 8001fa2:	2b08      	cmp	r3, #8
 8001fa4:	d060      	beq.n	8002068 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	699b      	ldr	r3, [r3, #24]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d145      	bne.n	800203a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fae:	4b33      	ldr	r3, [pc, #204]	; (800207c <HAL_RCC_OscConfig+0x4b4>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb4:	f7ff f89c 	bl	80010f0 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fbc:	f7ff f898 	bl	80010f0 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e093      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fce:	4b29      	ldr	r3, [pc, #164]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	69da      	ldr	r2, [r3, #28]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe8:	019b      	lsls	r3, r3, #6
 8001fea:	431a      	orrs	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff0:	085b      	lsrs	r3, r3, #1
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	041b      	lsls	r3, r3, #16
 8001ff6:	431a      	orrs	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ffc:	061b      	lsls	r3, r3, #24
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	071b      	lsls	r3, r3, #28
 8002006:	491b      	ldr	r1, [pc, #108]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800200c:	4b1b      	ldr	r3, [pc, #108]	; (800207c <HAL_RCC_OscConfig+0x4b4>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7ff f86d 	bl	80010f0 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800201a:	f7ff f869 	bl	80010f0 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e064      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x452>
 8002038:	e05c      	b.n	80020f4 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800203a:	4b10      	ldr	r3, [pc, #64]	; (800207c <HAL_RCC_OscConfig+0x4b4>)
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7ff f856 	bl	80010f0 <HAL_GetTick>
 8002044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002046:	e008      	b.n	800205a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002048:	f7ff f852 	bl	80010f0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	693b      	ldr	r3, [r7, #16]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e04d      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800205a:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RCC_OscConfig+0x4ac>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f0      	bne.n	8002048 <HAL_RCC_OscConfig+0x480>
 8002066:	e045      	b.n	80020f4 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	2b01      	cmp	r3, #1
 800206e:	d107      	bne.n	8002080 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e040      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
 8002074:	40023800 	.word	0x40023800
 8002078:	40007000 	.word	0x40007000
 800207c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002080:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <HAL_RCC_OscConfig+0x538>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	2b01      	cmp	r3, #1
 800208c:	d030      	beq.n	80020f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002098:	429a      	cmp	r2, r3
 800209a:	d129      	bne.n	80020f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d122      	bne.n	80020f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020aa:	68fa      	ldr	r2, [r7, #12]
 80020ac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020b0:	4013      	ands	r3, r2
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d119      	bne.n	80020f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020c6:	085b      	lsrs	r3, r3, #1
 80020c8:	3b01      	subs	r3, #1
 80020ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d10f      	bne.n	80020f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020dc:	429a      	cmp	r2, r3
 80020de:	d107      	bne.n	80020f0 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ea:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d001      	beq.n	80020f4 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e000      	b.n	80020f6 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40023800 	.word	0x40023800

08002104 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e03f      	b.n	8002196 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fdd2 	bl	8000cd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2224      	movs	r2, #36	; 0x24
 8002134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	68da      	ldr	r2, [r3, #12]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002146:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f9cb 	bl	80024e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	691a      	ldr	r2, [r3, #16]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800215c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	695a      	ldr	r2, [r3, #20]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800216c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	68da      	ldr	r2, [r3, #12]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800217c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2220      	movs	r2, #32
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b08a      	sub	sp, #40	; 0x28
 80021a2:	af02      	add	r7, sp, #8
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	603b      	str	r3, [r7, #0]
 80021aa:	4613      	mov	r3, r2
 80021ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80021ae:	2300      	movs	r3, #0
 80021b0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b20      	cmp	r3, #32
 80021bc:	d17c      	bne.n	80022b8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d002      	beq.n	80021ca <HAL_UART_Transmit+0x2c>
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d101      	bne.n	80021ce <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e075      	b.n	80022ba <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_UART_Transmit+0x3e>
 80021d8:	2302      	movs	r3, #2
 80021da:	e06e      	b.n	80022ba <HAL_UART_Transmit+0x11c>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2201      	movs	r2, #1
 80021e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	2200      	movs	r2, #0
 80021e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2221      	movs	r2, #33	; 0x21
 80021ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021f2:	f7fe ff7d 	bl	80010f0 <HAL_GetTick>
 80021f6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	88fa      	ldrh	r2, [r7, #6]
 80021fc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	88fa      	ldrh	r2, [r7, #6]
 8002202:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800220c:	d108      	bne.n	8002220 <HAL_UART_Transmit+0x82>
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d104      	bne.n	8002220 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002216:	2300      	movs	r3, #0
 8002218:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	61bb      	str	r3, [r7, #24]
 800221e:	e003      	b.n	8002228 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002224:	2300      	movs	r3, #0
 8002226:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002230:	e02a      	b.n	8002288 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	9300      	str	r3, [sp, #0]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2200      	movs	r2, #0
 800223a:	2180      	movs	r1, #128	; 0x80
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 f8e2 	bl	8002406 <UART_WaitOnFlagUntilTimeout>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e036      	b.n	80022ba <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d10b      	bne.n	800226a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	881b      	ldrh	r3, [r3, #0]
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002260:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002262:	69bb      	ldr	r3, [r7, #24]
 8002264:	3302      	adds	r3, #2
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	e007      	b.n	800227a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	781a      	ldrb	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	3301      	adds	r3, #1
 8002278:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800227e:	b29b      	uxth	r3, r3
 8002280:	3b01      	subs	r3, #1
 8002282:	b29a      	uxth	r2, r3
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800228c:	b29b      	uxth	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1cf      	bne.n	8002232 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	9300      	str	r3, [sp, #0]
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	2200      	movs	r2, #0
 800229a:	2140      	movs	r1, #64	; 0x40
 800229c:	68f8      	ldr	r0, [r7, #12]
 800229e:	f000 f8b2 	bl	8002406 <UART_WaitOnFlagUntilTimeout>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e006      	b.n	80022ba <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	2220      	movs	r2, #32
 80022b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	e000      	b.n	80022ba <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80022b8:	2302      	movs	r3, #2
  }
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3720      	adds	r7, #32
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}

080022c2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	b08a      	sub	sp, #40	; 0x28
 80022c6:	af02      	add	r7, sp, #8
 80022c8:	60f8      	str	r0, [r7, #12]
 80022ca:	60b9      	str	r1, [r7, #8]
 80022cc:	603b      	str	r3, [r7, #0]
 80022ce:	4613      	mov	r3, r2
 80022d0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	2b20      	cmp	r3, #32
 80022e0:	f040 808c 	bne.w	80023fc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d002      	beq.n	80022f0 <HAL_UART_Receive+0x2e>
 80022ea:	88fb      	ldrh	r3, [r7, #6]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d101      	bne.n	80022f4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e084      	b.n	80023fe <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d101      	bne.n	8002302 <HAL_UART_Receive+0x40>
 80022fe:	2302      	movs	r3, #2
 8002300:	e07d      	b.n	80023fe <HAL_UART_Receive+0x13c>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2201      	movs	r2, #1
 8002306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	2200      	movs	r2, #0
 800230e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2222      	movs	r2, #34	; 0x22
 8002314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800231e:	f7fe fee7 	bl	80010f0 <HAL_GetTick>
 8002322:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	88fa      	ldrh	r2, [r7, #6]
 8002328:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	88fa      	ldrh	r2, [r7, #6]
 800232e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002338:	d108      	bne.n	800234c <HAL_UART_Receive+0x8a>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d104      	bne.n	800234c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002342:	2300      	movs	r3, #0
 8002344:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	61bb      	str	r3, [r7, #24]
 800234a:	e003      	b.n	8002354 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002350:	2300      	movs	r3, #0
 8002352:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	2200      	movs	r2, #0
 8002358:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800235c:	e043      	b.n	80023e6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	2200      	movs	r2, #0
 8002366:	2120      	movs	r1, #32
 8002368:	68f8      	ldr	r0, [r7, #12]
 800236a:	f000 f84c 	bl	8002406 <UART_WaitOnFlagUntilTimeout>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e042      	b.n	80023fe <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10c      	bne.n	8002398 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	b29b      	uxth	r3, r3
 8002386:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800238a:	b29a      	uxth	r2, r3
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002390:	69bb      	ldr	r3, [r7, #24]
 8002392:	3302      	adds	r3, #2
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	e01f      	b.n	80023d8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023a0:	d007      	beq.n	80023b2 <HAL_UART_Receive+0xf0>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d10a      	bne.n	80023c0 <HAL_UART_Receive+0xfe>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	b2da      	uxtb	r2, r3
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	701a      	strb	r2, [r3, #0]
 80023be:	e008      	b.n	80023d2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023cc:	b2da      	uxtb	r2, r3
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	3301      	adds	r3, #1
 80023d6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023dc:	b29b      	uxth	r3, r3
 80023de:	3b01      	subs	r3, #1
 80023e0:	b29a      	uxth	r2, r3
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d1b6      	bne.n	800235e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e000      	b.n	80023fe <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80023fc:	2302      	movs	r3, #2
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}

08002406 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	b090      	sub	sp, #64	; 0x40
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	603b      	str	r3, [r7, #0]
 8002412:	4613      	mov	r3, r2
 8002414:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002416:	e050      	b.n	80024ba <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800241a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800241e:	d04c      	beq.n	80024ba <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002422:	2b00      	cmp	r3, #0
 8002424:	d007      	beq.n	8002436 <UART_WaitOnFlagUntilTimeout+0x30>
 8002426:	f7fe fe63 	bl	80010f0 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002432:	429a      	cmp	r2, r3
 8002434:	d241      	bcs.n	80024ba <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	330c      	adds	r3, #12
 800243c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002440:	e853 3f00 	ldrex	r3, [r3]
 8002444:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800244c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	330c      	adds	r3, #12
 8002454:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002456:	637a      	str	r2, [r7, #52]	; 0x34
 8002458:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800245a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800245c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800245e:	e841 2300 	strex	r3, r2, [r1]
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002466:	2b00      	cmp	r3, #0
 8002468:	d1e5      	bne.n	8002436 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	3314      	adds	r3, #20
 8002470:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002472:	697b      	ldr	r3, [r7, #20]
 8002474:	e853 3f00 	ldrex	r3, [r3]
 8002478:	613b      	str	r3, [r7, #16]
   return(result);
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	f023 0301 	bic.w	r3, r3, #1
 8002480:	63bb      	str	r3, [r7, #56]	; 0x38
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3314      	adds	r3, #20
 8002488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800248a:	623a      	str	r2, [r7, #32]
 800248c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248e:	69f9      	ldr	r1, [r7, #28]
 8002490:	6a3a      	ldr	r2, [r7, #32]
 8002492:	e841 2300 	strex	r3, r2, [r1]
 8002496:	61bb      	str	r3, [r7, #24]
   return(result);
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1e5      	bne.n	800246a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2200      	movs	r2, #0
 80024b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e00f      	b.n	80024da <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	4013      	ands	r3, r2
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	bf0c      	ite	eq
 80024ca:	2301      	moveq	r3, #1
 80024cc:	2300      	movne	r3, #0
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	461a      	mov	r2, r3
 80024d2:	79fb      	ldrb	r3, [r7, #7]
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d09f      	beq.n	8002418 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3740      	adds	r7, #64	; 0x40
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
	...

080024e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024e8:	b09f      	sub	sp, #124	; 0x7c
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80024ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80024f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fa:	68d9      	ldr	r1, [r3, #12]
 80024fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	ea40 0301 	orr.w	r3, r0, r1
 8002504:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002506:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	431a      	orrs	r2, r3
 8002510:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	431a      	orrs	r2, r3
 8002516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002518:	69db      	ldr	r3, [r3, #28]
 800251a:	4313      	orrs	r3, r2
 800251c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800251e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002528:	f021 010c 	bic.w	r1, r1, #12
 800252c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002532:	430b      	orrs	r3, r1
 8002534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002536:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	695b      	ldr	r3, [r3, #20]
 800253c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002542:	6999      	ldr	r1, [r3, #24]
 8002544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002546:	681a      	ldr	r2, [r3, #0]
 8002548:	ea40 0301 	orr.w	r3, r0, r1
 800254c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800254e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	4bc5      	ldr	r3, [pc, #788]	; (8002868 <UART_SetConfig+0x384>)
 8002554:	429a      	cmp	r2, r3
 8002556:	d004      	beq.n	8002562 <UART_SetConfig+0x7e>
 8002558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4bc3      	ldr	r3, [pc, #780]	; (800286c <UART_SetConfig+0x388>)
 800255e:	429a      	cmp	r2, r3
 8002560:	d103      	bne.n	800256a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002562:	f7ff f96b 	bl	800183c <HAL_RCC_GetPCLK2Freq>
 8002566:	6778      	str	r0, [r7, #116]	; 0x74
 8002568:	e002      	b.n	8002570 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800256a:	f7ff f953 	bl	8001814 <HAL_RCC_GetPCLK1Freq>
 800256e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002572:	69db      	ldr	r3, [r3, #28]
 8002574:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002578:	f040 80b6 	bne.w	80026e8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800257c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800257e:	461c      	mov	r4, r3
 8002580:	f04f 0500 	mov.w	r5, #0
 8002584:	4622      	mov	r2, r4
 8002586:	462b      	mov	r3, r5
 8002588:	1891      	adds	r1, r2, r2
 800258a:	6439      	str	r1, [r7, #64]	; 0x40
 800258c:	415b      	adcs	r3, r3
 800258e:	647b      	str	r3, [r7, #68]	; 0x44
 8002590:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002594:	1912      	adds	r2, r2, r4
 8002596:	eb45 0303 	adc.w	r3, r5, r3
 800259a:	f04f 0000 	mov.w	r0, #0
 800259e:	f04f 0100 	mov.w	r1, #0
 80025a2:	00d9      	lsls	r1, r3, #3
 80025a4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80025a8:	00d0      	lsls	r0, r2, #3
 80025aa:	4602      	mov	r2, r0
 80025ac:	460b      	mov	r3, r1
 80025ae:	1911      	adds	r1, r2, r4
 80025b0:	6639      	str	r1, [r7, #96]	; 0x60
 80025b2:	416b      	adcs	r3, r5
 80025b4:	667b      	str	r3, [r7, #100]	; 0x64
 80025b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	461a      	mov	r2, r3
 80025bc:	f04f 0300 	mov.w	r3, #0
 80025c0:	1891      	adds	r1, r2, r2
 80025c2:	63b9      	str	r1, [r7, #56]	; 0x38
 80025c4:	415b      	adcs	r3, r3
 80025c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80025c8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80025cc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80025d0:	f7fd fe76 	bl	80002c0 <__aeabi_uldivmod>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4ba5      	ldr	r3, [pc, #660]	; (8002870 <UART_SetConfig+0x38c>)
 80025da:	fba3 2302 	umull	r2, r3, r3, r2
 80025de:	095b      	lsrs	r3, r3, #5
 80025e0:	011e      	lsls	r6, r3, #4
 80025e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e4:	461c      	mov	r4, r3
 80025e6:	f04f 0500 	mov.w	r5, #0
 80025ea:	4622      	mov	r2, r4
 80025ec:	462b      	mov	r3, r5
 80025ee:	1891      	adds	r1, r2, r2
 80025f0:	6339      	str	r1, [r7, #48]	; 0x30
 80025f2:	415b      	adcs	r3, r3
 80025f4:	637b      	str	r3, [r7, #52]	; 0x34
 80025f6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80025fa:	1912      	adds	r2, r2, r4
 80025fc:	eb45 0303 	adc.w	r3, r5, r3
 8002600:	f04f 0000 	mov.w	r0, #0
 8002604:	f04f 0100 	mov.w	r1, #0
 8002608:	00d9      	lsls	r1, r3, #3
 800260a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800260e:	00d0      	lsls	r0, r2, #3
 8002610:	4602      	mov	r2, r0
 8002612:	460b      	mov	r3, r1
 8002614:	1911      	adds	r1, r2, r4
 8002616:	65b9      	str	r1, [r7, #88]	; 0x58
 8002618:	416b      	adcs	r3, r5
 800261a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800261c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	461a      	mov	r2, r3
 8002622:	f04f 0300 	mov.w	r3, #0
 8002626:	1891      	adds	r1, r2, r2
 8002628:	62b9      	str	r1, [r7, #40]	; 0x28
 800262a:	415b      	adcs	r3, r3
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002632:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002636:	f7fd fe43 	bl	80002c0 <__aeabi_uldivmod>
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	4b8c      	ldr	r3, [pc, #560]	; (8002870 <UART_SetConfig+0x38c>)
 8002640:	fba3 1302 	umull	r1, r3, r3, r2
 8002644:	095b      	lsrs	r3, r3, #5
 8002646:	2164      	movs	r1, #100	; 0x64
 8002648:	fb01 f303 	mul.w	r3, r1, r3
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	3332      	adds	r3, #50	; 0x32
 8002652:	4a87      	ldr	r2, [pc, #540]	; (8002870 <UART_SetConfig+0x38c>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002660:	441e      	add	r6, r3
 8002662:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002664:	4618      	mov	r0, r3
 8002666:	f04f 0100 	mov.w	r1, #0
 800266a:	4602      	mov	r2, r0
 800266c:	460b      	mov	r3, r1
 800266e:	1894      	adds	r4, r2, r2
 8002670:	623c      	str	r4, [r7, #32]
 8002672:	415b      	adcs	r3, r3
 8002674:	627b      	str	r3, [r7, #36]	; 0x24
 8002676:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800267a:	1812      	adds	r2, r2, r0
 800267c:	eb41 0303 	adc.w	r3, r1, r3
 8002680:	f04f 0400 	mov.w	r4, #0
 8002684:	f04f 0500 	mov.w	r5, #0
 8002688:	00dd      	lsls	r5, r3, #3
 800268a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800268e:	00d4      	lsls	r4, r2, #3
 8002690:	4622      	mov	r2, r4
 8002692:	462b      	mov	r3, r5
 8002694:	1814      	adds	r4, r2, r0
 8002696:	653c      	str	r4, [r7, #80]	; 0x50
 8002698:	414b      	adcs	r3, r1
 800269a:	657b      	str	r3, [r7, #84]	; 0x54
 800269c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	461a      	mov	r2, r3
 80026a2:	f04f 0300 	mov.w	r3, #0
 80026a6:	1891      	adds	r1, r2, r2
 80026a8:	61b9      	str	r1, [r7, #24]
 80026aa:	415b      	adcs	r3, r3
 80026ac:	61fb      	str	r3, [r7, #28]
 80026ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80026b2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80026b6:	f7fd fe03 	bl	80002c0 <__aeabi_uldivmod>
 80026ba:	4602      	mov	r2, r0
 80026bc:	460b      	mov	r3, r1
 80026be:	4b6c      	ldr	r3, [pc, #432]	; (8002870 <UART_SetConfig+0x38c>)
 80026c0:	fba3 1302 	umull	r1, r3, r3, r2
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	2164      	movs	r1, #100	; 0x64
 80026c8:	fb01 f303 	mul.w	r3, r1, r3
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	00db      	lsls	r3, r3, #3
 80026d0:	3332      	adds	r3, #50	; 0x32
 80026d2:	4a67      	ldr	r2, [pc, #412]	; (8002870 <UART_SetConfig+0x38c>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	f003 0207 	and.w	r2, r3, #7
 80026de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4432      	add	r2, r6
 80026e4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80026e6:	e0b9      	b.n	800285c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80026e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026ea:	461c      	mov	r4, r3
 80026ec:	f04f 0500 	mov.w	r5, #0
 80026f0:	4622      	mov	r2, r4
 80026f2:	462b      	mov	r3, r5
 80026f4:	1891      	adds	r1, r2, r2
 80026f6:	6139      	str	r1, [r7, #16]
 80026f8:	415b      	adcs	r3, r3
 80026fa:	617b      	str	r3, [r7, #20]
 80026fc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002700:	1912      	adds	r2, r2, r4
 8002702:	eb45 0303 	adc.w	r3, r5, r3
 8002706:	f04f 0000 	mov.w	r0, #0
 800270a:	f04f 0100 	mov.w	r1, #0
 800270e:	00d9      	lsls	r1, r3, #3
 8002710:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002714:	00d0      	lsls	r0, r2, #3
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	eb12 0804 	adds.w	r8, r2, r4
 800271e:	eb43 0905 	adc.w	r9, r3, r5
 8002722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	4618      	mov	r0, r3
 8002728:	f04f 0100 	mov.w	r1, #0
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	f04f 0300 	mov.w	r3, #0
 8002734:	008b      	lsls	r3, r1, #2
 8002736:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800273a:	0082      	lsls	r2, r0, #2
 800273c:	4640      	mov	r0, r8
 800273e:	4649      	mov	r1, r9
 8002740:	f7fd fdbe 	bl	80002c0 <__aeabi_uldivmod>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4b49      	ldr	r3, [pc, #292]	; (8002870 <UART_SetConfig+0x38c>)
 800274a:	fba3 2302 	umull	r2, r3, r3, r2
 800274e:	095b      	lsrs	r3, r3, #5
 8002750:	011e      	lsls	r6, r3, #4
 8002752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002754:	4618      	mov	r0, r3
 8002756:	f04f 0100 	mov.w	r1, #0
 800275a:	4602      	mov	r2, r0
 800275c:	460b      	mov	r3, r1
 800275e:	1894      	adds	r4, r2, r2
 8002760:	60bc      	str	r4, [r7, #8]
 8002762:	415b      	adcs	r3, r3
 8002764:	60fb      	str	r3, [r7, #12]
 8002766:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800276a:	1812      	adds	r2, r2, r0
 800276c:	eb41 0303 	adc.w	r3, r1, r3
 8002770:	f04f 0400 	mov.w	r4, #0
 8002774:	f04f 0500 	mov.w	r5, #0
 8002778:	00dd      	lsls	r5, r3, #3
 800277a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800277e:	00d4      	lsls	r4, r2, #3
 8002780:	4622      	mov	r2, r4
 8002782:	462b      	mov	r3, r5
 8002784:	1814      	adds	r4, r2, r0
 8002786:	64bc      	str	r4, [r7, #72]	; 0x48
 8002788:	414b      	adcs	r3, r1
 800278a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800278c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	4618      	mov	r0, r3
 8002792:	f04f 0100 	mov.w	r1, #0
 8002796:	f04f 0200 	mov.w	r2, #0
 800279a:	f04f 0300 	mov.w	r3, #0
 800279e:	008b      	lsls	r3, r1, #2
 80027a0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80027a4:	0082      	lsls	r2, r0, #2
 80027a6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80027aa:	f7fd fd89 	bl	80002c0 <__aeabi_uldivmod>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <UART_SetConfig+0x38c>)
 80027b4:	fba3 1302 	umull	r1, r3, r3, r2
 80027b8:	095b      	lsrs	r3, r3, #5
 80027ba:	2164      	movs	r1, #100	; 0x64
 80027bc:	fb01 f303 	mul.w	r3, r1, r3
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	3332      	adds	r3, #50	; 0x32
 80027c6:	4a2a      	ldr	r2, [pc, #168]	; (8002870 <UART_SetConfig+0x38c>)
 80027c8:	fba2 2303 	umull	r2, r3, r2, r3
 80027cc:	095b      	lsrs	r3, r3, #5
 80027ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027d2:	441e      	add	r6, r3
 80027d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d6:	4618      	mov	r0, r3
 80027d8:	f04f 0100 	mov.w	r1, #0
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	1894      	adds	r4, r2, r2
 80027e2:	603c      	str	r4, [r7, #0]
 80027e4:	415b      	adcs	r3, r3
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80027ec:	1812      	adds	r2, r2, r0
 80027ee:	eb41 0303 	adc.w	r3, r1, r3
 80027f2:	f04f 0400 	mov.w	r4, #0
 80027f6:	f04f 0500 	mov.w	r5, #0
 80027fa:	00dd      	lsls	r5, r3, #3
 80027fc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002800:	00d4      	lsls	r4, r2, #3
 8002802:	4622      	mov	r2, r4
 8002804:	462b      	mov	r3, r5
 8002806:	eb12 0a00 	adds.w	sl, r2, r0
 800280a:	eb43 0b01 	adc.w	fp, r3, r1
 800280e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4618      	mov	r0, r3
 8002814:	f04f 0100 	mov.w	r1, #0
 8002818:	f04f 0200 	mov.w	r2, #0
 800281c:	f04f 0300 	mov.w	r3, #0
 8002820:	008b      	lsls	r3, r1, #2
 8002822:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002826:	0082      	lsls	r2, r0, #2
 8002828:	4650      	mov	r0, sl
 800282a:	4659      	mov	r1, fp
 800282c:	f7fd fd48 	bl	80002c0 <__aeabi_uldivmod>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <UART_SetConfig+0x38c>)
 8002836:	fba3 1302 	umull	r1, r3, r3, r2
 800283a:	095b      	lsrs	r3, r3, #5
 800283c:	2164      	movs	r1, #100	; 0x64
 800283e:	fb01 f303 	mul.w	r3, r1, r3
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	011b      	lsls	r3, r3, #4
 8002846:	3332      	adds	r3, #50	; 0x32
 8002848:	4a09      	ldr	r2, [pc, #36]	; (8002870 <UART_SetConfig+0x38c>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	f003 020f 	and.w	r2, r3, #15
 8002854:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4432      	add	r2, r6
 800285a:	609a      	str	r2, [r3, #8]
}
 800285c:	bf00      	nop
 800285e:	377c      	adds	r7, #124	; 0x7c
 8002860:	46bd      	mov	sp, r7
 8002862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002866:	bf00      	nop
 8002868:	40011000 	.word	0x40011000
 800286c:	40011400 	.word	0x40011400
 8002870:	51eb851f 	.word	0x51eb851f

08002874 <__assert_func>:
 8002874:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002876:	4614      	mov	r4, r2
 8002878:	461a      	mov	r2, r3
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <__assert_func+0x2c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4605      	mov	r5, r0
 8002880:	68d8      	ldr	r0, [r3, #12]
 8002882:	b14c      	cbz	r4, 8002898 <__assert_func+0x24>
 8002884:	4b07      	ldr	r3, [pc, #28]	; (80028a4 <__assert_func+0x30>)
 8002886:	9100      	str	r1, [sp, #0]
 8002888:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800288c:	4906      	ldr	r1, [pc, #24]	; (80028a8 <__assert_func+0x34>)
 800288e:	462b      	mov	r3, r5
 8002890:	f000 f818 	bl	80028c4 <fiprintf>
 8002894:	f000 fef8 	bl	8003688 <abort>
 8002898:	4b04      	ldr	r3, [pc, #16]	; (80028ac <__assert_func+0x38>)
 800289a:	461c      	mov	r4, r3
 800289c:	e7f3      	b.n	8002886 <__assert_func+0x12>
 800289e:	bf00      	nop
 80028a0:	2000002c 	.word	0x2000002c
 80028a4:	08004154 	.word	0x08004154
 80028a8:	08004161 	.word	0x08004161
 80028ac:	0800418f 	.word	0x0800418f

080028b0 <atoi>:
 80028b0:	220a      	movs	r2, #10
 80028b2:	2100      	movs	r1, #0
 80028b4:	f000 bddc 	b.w	8003470 <strtol>

080028b8 <__errno>:
 80028b8:	4b01      	ldr	r3, [pc, #4]	; (80028c0 <__errno+0x8>)
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	2000002c 	.word	0x2000002c

080028c4 <fiprintf>:
 80028c4:	b40e      	push	{r1, r2, r3}
 80028c6:	b503      	push	{r0, r1, lr}
 80028c8:	4601      	mov	r1, r0
 80028ca:	ab03      	add	r3, sp, #12
 80028cc:	4805      	ldr	r0, [pc, #20]	; (80028e4 <fiprintf+0x20>)
 80028ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80028d2:	6800      	ldr	r0, [r0, #0]
 80028d4:	9301      	str	r3, [sp, #4]
 80028d6:	f000 f931 	bl	8002b3c <_vfiprintf_r>
 80028da:	b002      	add	sp, #8
 80028dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80028e0:	b003      	add	sp, #12
 80028e2:	4770      	bx	lr
 80028e4:	2000002c 	.word	0x2000002c

080028e8 <__libc_init_array>:
 80028e8:	b570      	push	{r4, r5, r6, lr}
 80028ea:	4d0d      	ldr	r5, [pc, #52]	; (8002920 <__libc_init_array+0x38>)
 80028ec:	4c0d      	ldr	r4, [pc, #52]	; (8002924 <__libc_init_array+0x3c>)
 80028ee:	1b64      	subs	r4, r4, r5
 80028f0:	10a4      	asrs	r4, r4, #2
 80028f2:	2600      	movs	r6, #0
 80028f4:	42a6      	cmp	r6, r4
 80028f6:	d109      	bne.n	800290c <__libc_init_array+0x24>
 80028f8:	4d0b      	ldr	r5, [pc, #44]	; (8002928 <__libc_init_array+0x40>)
 80028fa:	4c0c      	ldr	r4, [pc, #48]	; (800292c <__libc_init_array+0x44>)
 80028fc:	f001 fb98 	bl	8004030 <_init>
 8002900:	1b64      	subs	r4, r4, r5
 8002902:	10a4      	asrs	r4, r4, #2
 8002904:	2600      	movs	r6, #0
 8002906:	42a6      	cmp	r6, r4
 8002908:	d105      	bne.n	8002916 <__libc_init_array+0x2e>
 800290a:	bd70      	pop	{r4, r5, r6, pc}
 800290c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002910:	4798      	blx	r3
 8002912:	3601      	adds	r6, #1
 8002914:	e7ee      	b.n	80028f4 <__libc_init_array+0xc>
 8002916:	f855 3b04 	ldr.w	r3, [r5], #4
 800291a:	4798      	blx	r3
 800291c:	3601      	adds	r6, #1
 800291e:	e7f2      	b.n	8002906 <__libc_init_array+0x1e>
 8002920:	080043d0 	.word	0x080043d0
 8002924:	080043d0 	.word	0x080043d0
 8002928:	080043d0 	.word	0x080043d0
 800292c:	080043d4 	.word	0x080043d4

08002930 <__itoa>:
 8002930:	1e93      	subs	r3, r2, #2
 8002932:	2b22      	cmp	r3, #34	; 0x22
 8002934:	b510      	push	{r4, lr}
 8002936:	460c      	mov	r4, r1
 8002938:	d904      	bls.n	8002944 <__itoa+0x14>
 800293a:	2300      	movs	r3, #0
 800293c:	700b      	strb	r3, [r1, #0]
 800293e:	461c      	mov	r4, r3
 8002940:	4620      	mov	r0, r4
 8002942:	bd10      	pop	{r4, pc}
 8002944:	2a0a      	cmp	r2, #10
 8002946:	d109      	bne.n	800295c <__itoa+0x2c>
 8002948:	2800      	cmp	r0, #0
 800294a:	da07      	bge.n	800295c <__itoa+0x2c>
 800294c:	232d      	movs	r3, #45	; 0x2d
 800294e:	700b      	strb	r3, [r1, #0]
 8002950:	4240      	negs	r0, r0
 8002952:	2101      	movs	r1, #1
 8002954:	4421      	add	r1, r4
 8002956:	f000 fd95 	bl	8003484 <__utoa>
 800295a:	e7f1      	b.n	8002940 <__itoa+0x10>
 800295c:	2100      	movs	r1, #0
 800295e:	e7f9      	b.n	8002954 <__itoa+0x24>

08002960 <itoa>:
 8002960:	f7ff bfe6 	b.w	8002930 <__itoa>

08002964 <malloc>:
 8002964:	4b02      	ldr	r3, [pc, #8]	; (8002970 <malloc+0xc>)
 8002966:	4601      	mov	r1, r0
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	f000 b863 	b.w	8002a34 <_malloc_r>
 800296e:	bf00      	nop
 8002970:	2000002c 	.word	0x2000002c

08002974 <free>:
 8002974:	4b02      	ldr	r3, [pc, #8]	; (8002980 <free+0xc>)
 8002976:	4601      	mov	r1, r0
 8002978:	6818      	ldr	r0, [r3, #0]
 800297a:	f000 b80b 	b.w	8002994 <_free_r>
 800297e:	bf00      	nop
 8002980:	2000002c 	.word	0x2000002c

08002984 <memset>:
 8002984:	4402      	add	r2, r0
 8002986:	4603      	mov	r3, r0
 8002988:	4293      	cmp	r3, r2
 800298a:	d100      	bne.n	800298e <memset+0xa>
 800298c:	4770      	bx	lr
 800298e:	f803 1b01 	strb.w	r1, [r3], #1
 8002992:	e7f9      	b.n	8002988 <memset+0x4>

08002994 <_free_r>:
 8002994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002996:	2900      	cmp	r1, #0
 8002998:	d048      	beq.n	8002a2c <_free_r+0x98>
 800299a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800299e:	9001      	str	r0, [sp, #4]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	f1a1 0404 	sub.w	r4, r1, #4
 80029a6:	bfb8      	it	lt
 80029a8:	18e4      	addlt	r4, r4, r3
 80029aa:	f001 f8bb 	bl	8003b24 <__malloc_lock>
 80029ae:	4a20      	ldr	r2, [pc, #128]	; (8002a30 <_free_r+0x9c>)
 80029b0:	9801      	ldr	r0, [sp, #4]
 80029b2:	6813      	ldr	r3, [r2, #0]
 80029b4:	4615      	mov	r5, r2
 80029b6:	b933      	cbnz	r3, 80029c6 <_free_r+0x32>
 80029b8:	6063      	str	r3, [r4, #4]
 80029ba:	6014      	str	r4, [r2, #0]
 80029bc:	b003      	add	sp, #12
 80029be:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80029c2:	f001 b8b5 	b.w	8003b30 <__malloc_unlock>
 80029c6:	42a3      	cmp	r3, r4
 80029c8:	d90b      	bls.n	80029e2 <_free_r+0x4e>
 80029ca:	6821      	ldr	r1, [r4, #0]
 80029cc:	1862      	adds	r2, r4, r1
 80029ce:	4293      	cmp	r3, r2
 80029d0:	bf04      	itt	eq
 80029d2:	681a      	ldreq	r2, [r3, #0]
 80029d4:	685b      	ldreq	r3, [r3, #4]
 80029d6:	6063      	str	r3, [r4, #4]
 80029d8:	bf04      	itt	eq
 80029da:	1852      	addeq	r2, r2, r1
 80029dc:	6022      	streq	r2, [r4, #0]
 80029de:	602c      	str	r4, [r5, #0]
 80029e0:	e7ec      	b.n	80029bc <_free_r+0x28>
 80029e2:	461a      	mov	r2, r3
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	b10b      	cbz	r3, 80029ec <_free_r+0x58>
 80029e8:	42a3      	cmp	r3, r4
 80029ea:	d9fa      	bls.n	80029e2 <_free_r+0x4e>
 80029ec:	6811      	ldr	r1, [r2, #0]
 80029ee:	1855      	adds	r5, r2, r1
 80029f0:	42a5      	cmp	r5, r4
 80029f2:	d10b      	bne.n	8002a0c <_free_r+0x78>
 80029f4:	6824      	ldr	r4, [r4, #0]
 80029f6:	4421      	add	r1, r4
 80029f8:	1854      	adds	r4, r2, r1
 80029fa:	42a3      	cmp	r3, r4
 80029fc:	6011      	str	r1, [r2, #0]
 80029fe:	d1dd      	bne.n	80029bc <_free_r+0x28>
 8002a00:	681c      	ldr	r4, [r3, #0]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	6053      	str	r3, [r2, #4]
 8002a06:	4421      	add	r1, r4
 8002a08:	6011      	str	r1, [r2, #0]
 8002a0a:	e7d7      	b.n	80029bc <_free_r+0x28>
 8002a0c:	d902      	bls.n	8002a14 <_free_r+0x80>
 8002a0e:	230c      	movs	r3, #12
 8002a10:	6003      	str	r3, [r0, #0]
 8002a12:	e7d3      	b.n	80029bc <_free_r+0x28>
 8002a14:	6825      	ldr	r5, [r4, #0]
 8002a16:	1961      	adds	r1, r4, r5
 8002a18:	428b      	cmp	r3, r1
 8002a1a:	bf04      	itt	eq
 8002a1c:	6819      	ldreq	r1, [r3, #0]
 8002a1e:	685b      	ldreq	r3, [r3, #4]
 8002a20:	6063      	str	r3, [r4, #4]
 8002a22:	bf04      	itt	eq
 8002a24:	1949      	addeq	r1, r1, r5
 8002a26:	6021      	streq	r1, [r4, #0]
 8002a28:	6054      	str	r4, [r2, #4]
 8002a2a:	e7c7      	b.n	80029bc <_free_r+0x28>
 8002a2c:	b003      	add	sp, #12
 8002a2e:	bd30      	pop	{r4, r5, pc}
 8002a30:	200000b0 	.word	0x200000b0

08002a34 <_malloc_r>:
 8002a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a36:	1ccd      	adds	r5, r1, #3
 8002a38:	f025 0503 	bic.w	r5, r5, #3
 8002a3c:	3508      	adds	r5, #8
 8002a3e:	2d0c      	cmp	r5, #12
 8002a40:	bf38      	it	cc
 8002a42:	250c      	movcc	r5, #12
 8002a44:	2d00      	cmp	r5, #0
 8002a46:	4606      	mov	r6, r0
 8002a48:	db01      	blt.n	8002a4e <_malloc_r+0x1a>
 8002a4a:	42a9      	cmp	r1, r5
 8002a4c:	d903      	bls.n	8002a56 <_malloc_r+0x22>
 8002a4e:	230c      	movs	r3, #12
 8002a50:	6033      	str	r3, [r6, #0]
 8002a52:	2000      	movs	r0, #0
 8002a54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a56:	f001 f865 	bl	8003b24 <__malloc_lock>
 8002a5a:	4921      	ldr	r1, [pc, #132]	; (8002ae0 <_malloc_r+0xac>)
 8002a5c:	680a      	ldr	r2, [r1, #0]
 8002a5e:	4614      	mov	r4, r2
 8002a60:	b99c      	cbnz	r4, 8002a8a <_malloc_r+0x56>
 8002a62:	4f20      	ldr	r7, [pc, #128]	; (8002ae4 <_malloc_r+0xb0>)
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	b923      	cbnz	r3, 8002a72 <_malloc_r+0x3e>
 8002a68:	4621      	mov	r1, r4
 8002a6a:	4630      	mov	r0, r6
 8002a6c:	f000 fba0 	bl	80031b0 <_sbrk_r>
 8002a70:	6038      	str	r0, [r7, #0]
 8002a72:	4629      	mov	r1, r5
 8002a74:	4630      	mov	r0, r6
 8002a76:	f000 fb9b 	bl	80031b0 <_sbrk_r>
 8002a7a:	1c43      	adds	r3, r0, #1
 8002a7c:	d123      	bne.n	8002ac6 <_malloc_r+0x92>
 8002a7e:	230c      	movs	r3, #12
 8002a80:	6033      	str	r3, [r6, #0]
 8002a82:	4630      	mov	r0, r6
 8002a84:	f001 f854 	bl	8003b30 <__malloc_unlock>
 8002a88:	e7e3      	b.n	8002a52 <_malloc_r+0x1e>
 8002a8a:	6823      	ldr	r3, [r4, #0]
 8002a8c:	1b5b      	subs	r3, r3, r5
 8002a8e:	d417      	bmi.n	8002ac0 <_malloc_r+0x8c>
 8002a90:	2b0b      	cmp	r3, #11
 8002a92:	d903      	bls.n	8002a9c <_malloc_r+0x68>
 8002a94:	6023      	str	r3, [r4, #0]
 8002a96:	441c      	add	r4, r3
 8002a98:	6025      	str	r5, [r4, #0]
 8002a9a:	e004      	b.n	8002aa6 <_malloc_r+0x72>
 8002a9c:	6863      	ldr	r3, [r4, #4]
 8002a9e:	42a2      	cmp	r2, r4
 8002aa0:	bf0c      	ite	eq
 8002aa2:	600b      	streq	r3, [r1, #0]
 8002aa4:	6053      	strne	r3, [r2, #4]
 8002aa6:	4630      	mov	r0, r6
 8002aa8:	f001 f842 	bl	8003b30 <__malloc_unlock>
 8002aac:	f104 000b 	add.w	r0, r4, #11
 8002ab0:	1d23      	adds	r3, r4, #4
 8002ab2:	f020 0007 	bic.w	r0, r0, #7
 8002ab6:	1ac2      	subs	r2, r0, r3
 8002ab8:	d0cc      	beq.n	8002a54 <_malloc_r+0x20>
 8002aba:	1a1b      	subs	r3, r3, r0
 8002abc:	50a3      	str	r3, [r4, r2]
 8002abe:	e7c9      	b.n	8002a54 <_malloc_r+0x20>
 8002ac0:	4622      	mov	r2, r4
 8002ac2:	6864      	ldr	r4, [r4, #4]
 8002ac4:	e7cc      	b.n	8002a60 <_malloc_r+0x2c>
 8002ac6:	1cc4      	adds	r4, r0, #3
 8002ac8:	f024 0403 	bic.w	r4, r4, #3
 8002acc:	42a0      	cmp	r0, r4
 8002ace:	d0e3      	beq.n	8002a98 <_malloc_r+0x64>
 8002ad0:	1a21      	subs	r1, r4, r0
 8002ad2:	4630      	mov	r0, r6
 8002ad4:	f000 fb6c 	bl	80031b0 <_sbrk_r>
 8002ad8:	3001      	adds	r0, #1
 8002ada:	d1dd      	bne.n	8002a98 <_malloc_r+0x64>
 8002adc:	e7cf      	b.n	8002a7e <_malloc_r+0x4a>
 8002ade:	bf00      	nop
 8002ae0:	200000b0 	.word	0x200000b0
 8002ae4:	200000b4 	.word	0x200000b4

08002ae8 <__sfputc_r>:
 8002ae8:	6893      	ldr	r3, [r2, #8]
 8002aea:	3b01      	subs	r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	b410      	push	{r4}
 8002af0:	6093      	str	r3, [r2, #8]
 8002af2:	da08      	bge.n	8002b06 <__sfputc_r+0x1e>
 8002af4:	6994      	ldr	r4, [r2, #24]
 8002af6:	42a3      	cmp	r3, r4
 8002af8:	db01      	blt.n	8002afe <__sfputc_r+0x16>
 8002afa:	290a      	cmp	r1, #10
 8002afc:	d103      	bne.n	8002b06 <__sfputc_r+0x1e>
 8002afe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b02:	f000 bd01 	b.w	8003508 <__swbuf_r>
 8002b06:	6813      	ldr	r3, [r2, #0]
 8002b08:	1c58      	adds	r0, r3, #1
 8002b0a:	6010      	str	r0, [r2, #0]
 8002b0c:	7019      	strb	r1, [r3, #0]
 8002b0e:	4608      	mov	r0, r1
 8002b10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <__sfputs_r>:
 8002b16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b18:	4606      	mov	r6, r0
 8002b1a:	460f      	mov	r7, r1
 8002b1c:	4614      	mov	r4, r2
 8002b1e:	18d5      	adds	r5, r2, r3
 8002b20:	42ac      	cmp	r4, r5
 8002b22:	d101      	bne.n	8002b28 <__sfputs_r+0x12>
 8002b24:	2000      	movs	r0, #0
 8002b26:	e007      	b.n	8002b38 <__sfputs_r+0x22>
 8002b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002b2c:	463a      	mov	r2, r7
 8002b2e:	4630      	mov	r0, r6
 8002b30:	f7ff ffda 	bl	8002ae8 <__sfputc_r>
 8002b34:	1c43      	adds	r3, r0, #1
 8002b36:	d1f3      	bne.n	8002b20 <__sfputs_r+0xa>
 8002b38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002b3c <_vfiprintf_r>:
 8002b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b40:	460d      	mov	r5, r1
 8002b42:	b09d      	sub	sp, #116	; 0x74
 8002b44:	4614      	mov	r4, r2
 8002b46:	4698      	mov	r8, r3
 8002b48:	4606      	mov	r6, r0
 8002b4a:	b118      	cbz	r0, 8002b54 <_vfiprintf_r+0x18>
 8002b4c:	6983      	ldr	r3, [r0, #24]
 8002b4e:	b90b      	cbnz	r3, 8002b54 <_vfiprintf_r+0x18>
 8002b50:	f000 febc 	bl	80038cc <__sinit>
 8002b54:	4b89      	ldr	r3, [pc, #548]	; (8002d7c <_vfiprintf_r+0x240>)
 8002b56:	429d      	cmp	r5, r3
 8002b58:	d11b      	bne.n	8002b92 <_vfiprintf_r+0x56>
 8002b5a:	6875      	ldr	r5, [r6, #4]
 8002b5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b5e:	07d9      	lsls	r1, r3, #31
 8002b60:	d405      	bmi.n	8002b6e <_vfiprintf_r+0x32>
 8002b62:	89ab      	ldrh	r3, [r5, #12]
 8002b64:	059a      	lsls	r2, r3, #22
 8002b66:	d402      	bmi.n	8002b6e <_vfiprintf_r+0x32>
 8002b68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002b6a:	f000 ff4d 	bl	8003a08 <__retarget_lock_acquire_recursive>
 8002b6e:	89ab      	ldrh	r3, [r5, #12]
 8002b70:	071b      	lsls	r3, r3, #28
 8002b72:	d501      	bpl.n	8002b78 <_vfiprintf_r+0x3c>
 8002b74:	692b      	ldr	r3, [r5, #16]
 8002b76:	b9eb      	cbnz	r3, 8002bb4 <_vfiprintf_r+0x78>
 8002b78:	4629      	mov	r1, r5
 8002b7a:	4630      	mov	r0, r6
 8002b7c:	f000 fd16 	bl	80035ac <__swsetup_r>
 8002b80:	b1c0      	cbz	r0, 8002bb4 <_vfiprintf_r+0x78>
 8002b82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002b84:	07dc      	lsls	r4, r3, #31
 8002b86:	d50e      	bpl.n	8002ba6 <_vfiprintf_r+0x6a>
 8002b88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b8c:	b01d      	add	sp, #116	; 0x74
 8002b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b92:	4b7b      	ldr	r3, [pc, #492]	; (8002d80 <_vfiprintf_r+0x244>)
 8002b94:	429d      	cmp	r5, r3
 8002b96:	d101      	bne.n	8002b9c <_vfiprintf_r+0x60>
 8002b98:	68b5      	ldr	r5, [r6, #8]
 8002b9a:	e7df      	b.n	8002b5c <_vfiprintf_r+0x20>
 8002b9c:	4b79      	ldr	r3, [pc, #484]	; (8002d84 <_vfiprintf_r+0x248>)
 8002b9e:	429d      	cmp	r5, r3
 8002ba0:	bf08      	it	eq
 8002ba2:	68f5      	ldreq	r5, [r6, #12]
 8002ba4:	e7da      	b.n	8002b5c <_vfiprintf_r+0x20>
 8002ba6:	89ab      	ldrh	r3, [r5, #12]
 8002ba8:	0598      	lsls	r0, r3, #22
 8002baa:	d4ed      	bmi.n	8002b88 <_vfiprintf_r+0x4c>
 8002bac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002bae:	f000 ff2c 	bl	8003a0a <__retarget_lock_release_recursive>
 8002bb2:	e7e9      	b.n	8002b88 <_vfiprintf_r+0x4c>
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	9309      	str	r3, [sp, #36]	; 0x24
 8002bb8:	2320      	movs	r3, #32
 8002bba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002bbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8002bc2:	2330      	movs	r3, #48	; 0x30
 8002bc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8002d88 <_vfiprintf_r+0x24c>
 8002bc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002bcc:	f04f 0901 	mov.w	r9, #1
 8002bd0:	4623      	mov	r3, r4
 8002bd2:	469a      	mov	sl, r3
 8002bd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002bd8:	b10a      	cbz	r2, 8002bde <_vfiprintf_r+0xa2>
 8002bda:	2a25      	cmp	r2, #37	; 0x25
 8002bdc:	d1f9      	bne.n	8002bd2 <_vfiprintf_r+0x96>
 8002bde:	ebba 0b04 	subs.w	fp, sl, r4
 8002be2:	d00b      	beq.n	8002bfc <_vfiprintf_r+0xc0>
 8002be4:	465b      	mov	r3, fp
 8002be6:	4622      	mov	r2, r4
 8002be8:	4629      	mov	r1, r5
 8002bea:	4630      	mov	r0, r6
 8002bec:	f7ff ff93 	bl	8002b16 <__sfputs_r>
 8002bf0:	3001      	adds	r0, #1
 8002bf2:	f000 80aa 	beq.w	8002d4a <_vfiprintf_r+0x20e>
 8002bf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002bf8:	445a      	add	r2, fp
 8002bfa:	9209      	str	r2, [sp, #36]	; 0x24
 8002bfc:	f89a 3000 	ldrb.w	r3, [sl]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 80a2 	beq.w	8002d4a <_vfiprintf_r+0x20e>
 8002c06:	2300      	movs	r3, #0
 8002c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002c0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002c10:	f10a 0a01 	add.w	sl, sl, #1
 8002c14:	9304      	str	r3, [sp, #16]
 8002c16:	9307      	str	r3, [sp, #28]
 8002c18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002c1c:	931a      	str	r3, [sp, #104]	; 0x68
 8002c1e:	4654      	mov	r4, sl
 8002c20:	2205      	movs	r2, #5
 8002c22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c26:	4858      	ldr	r0, [pc, #352]	; (8002d88 <_vfiprintf_r+0x24c>)
 8002c28:	f7fd fafa 	bl	8000220 <memchr>
 8002c2c:	9a04      	ldr	r2, [sp, #16]
 8002c2e:	b9d8      	cbnz	r0, 8002c68 <_vfiprintf_r+0x12c>
 8002c30:	06d1      	lsls	r1, r2, #27
 8002c32:	bf44      	itt	mi
 8002c34:	2320      	movmi	r3, #32
 8002c36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c3a:	0713      	lsls	r3, r2, #28
 8002c3c:	bf44      	itt	mi
 8002c3e:	232b      	movmi	r3, #43	; 0x2b
 8002c40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002c44:	f89a 3000 	ldrb.w	r3, [sl]
 8002c48:	2b2a      	cmp	r3, #42	; 0x2a
 8002c4a:	d015      	beq.n	8002c78 <_vfiprintf_r+0x13c>
 8002c4c:	9a07      	ldr	r2, [sp, #28]
 8002c4e:	4654      	mov	r4, sl
 8002c50:	2000      	movs	r0, #0
 8002c52:	f04f 0c0a 	mov.w	ip, #10
 8002c56:	4621      	mov	r1, r4
 8002c58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002c5c:	3b30      	subs	r3, #48	; 0x30
 8002c5e:	2b09      	cmp	r3, #9
 8002c60:	d94e      	bls.n	8002d00 <_vfiprintf_r+0x1c4>
 8002c62:	b1b0      	cbz	r0, 8002c92 <_vfiprintf_r+0x156>
 8002c64:	9207      	str	r2, [sp, #28]
 8002c66:	e014      	b.n	8002c92 <_vfiprintf_r+0x156>
 8002c68:	eba0 0308 	sub.w	r3, r0, r8
 8002c6c:	fa09 f303 	lsl.w	r3, r9, r3
 8002c70:	4313      	orrs	r3, r2
 8002c72:	9304      	str	r3, [sp, #16]
 8002c74:	46a2      	mov	sl, r4
 8002c76:	e7d2      	b.n	8002c1e <_vfiprintf_r+0xe2>
 8002c78:	9b03      	ldr	r3, [sp, #12]
 8002c7a:	1d19      	adds	r1, r3, #4
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	9103      	str	r1, [sp, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	bfbb      	ittet	lt
 8002c84:	425b      	neglt	r3, r3
 8002c86:	f042 0202 	orrlt.w	r2, r2, #2
 8002c8a:	9307      	strge	r3, [sp, #28]
 8002c8c:	9307      	strlt	r3, [sp, #28]
 8002c8e:	bfb8      	it	lt
 8002c90:	9204      	strlt	r2, [sp, #16]
 8002c92:	7823      	ldrb	r3, [r4, #0]
 8002c94:	2b2e      	cmp	r3, #46	; 0x2e
 8002c96:	d10c      	bne.n	8002cb2 <_vfiprintf_r+0x176>
 8002c98:	7863      	ldrb	r3, [r4, #1]
 8002c9a:	2b2a      	cmp	r3, #42	; 0x2a
 8002c9c:	d135      	bne.n	8002d0a <_vfiprintf_r+0x1ce>
 8002c9e:	9b03      	ldr	r3, [sp, #12]
 8002ca0:	1d1a      	adds	r2, r3, #4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	9203      	str	r2, [sp, #12]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	bfb8      	it	lt
 8002caa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002cae:	3402      	adds	r4, #2
 8002cb0:	9305      	str	r3, [sp, #20]
 8002cb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8002d98 <_vfiprintf_r+0x25c>
 8002cb6:	7821      	ldrb	r1, [r4, #0]
 8002cb8:	2203      	movs	r2, #3
 8002cba:	4650      	mov	r0, sl
 8002cbc:	f7fd fab0 	bl	8000220 <memchr>
 8002cc0:	b140      	cbz	r0, 8002cd4 <_vfiprintf_r+0x198>
 8002cc2:	2340      	movs	r3, #64	; 0x40
 8002cc4:	eba0 000a 	sub.w	r0, r0, sl
 8002cc8:	fa03 f000 	lsl.w	r0, r3, r0
 8002ccc:	9b04      	ldr	r3, [sp, #16]
 8002cce:	4303      	orrs	r3, r0
 8002cd0:	3401      	adds	r4, #1
 8002cd2:	9304      	str	r3, [sp, #16]
 8002cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002cd8:	482c      	ldr	r0, [pc, #176]	; (8002d8c <_vfiprintf_r+0x250>)
 8002cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002cde:	2206      	movs	r2, #6
 8002ce0:	f7fd fa9e 	bl	8000220 <memchr>
 8002ce4:	2800      	cmp	r0, #0
 8002ce6:	d03f      	beq.n	8002d68 <_vfiprintf_r+0x22c>
 8002ce8:	4b29      	ldr	r3, [pc, #164]	; (8002d90 <_vfiprintf_r+0x254>)
 8002cea:	bb1b      	cbnz	r3, 8002d34 <_vfiprintf_r+0x1f8>
 8002cec:	9b03      	ldr	r3, [sp, #12]
 8002cee:	3307      	adds	r3, #7
 8002cf0:	f023 0307 	bic.w	r3, r3, #7
 8002cf4:	3308      	adds	r3, #8
 8002cf6:	9303      	str	r3, [sp, #12]
 8002cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002cfa:	443b      	add	r3, r7
 8002cfc:	9309      	str	r3, [sp, #36]	; 0x24
 8002cfe:	e767      	b.n	8002bd0 <_vfiprintf_r+0x94>
 8002d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8002d04:	460c      	mov	r4, r1
 8002d06:	2001      	movs	r0, #1
 8002d08:	e7a5      	b.n	8002c56 <_vfiprintf_r+0x11a>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	3401      	adds	r4, #1
 8002d0e:	9305      	str	r3, [sp, #20]
 8002d10:	4619      	mov	r1, r3
 8002d12:	f04f 0c0a 	mov.w	ip, #10
 8002d16:	4620      	mov	r0, r4
 8002d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002d1c:	3a30      	subs	r2, #48	; 0x30
 8002d1e:	2a09      	cmp	r2, #9
 8002d20:	d903      	bls.n	8002d2a <_vfiprintf_r+0x1ee>
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0c5      	beq.n	8002cb2 <_vfiprintf_r+0x176>
 8002d26:	9105      	str	r1, [sp, #20]
 8002d28:	e7c3      	b.n	8002cb2 <_vfiprintf_r+0x176>
 8002d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8002d2e:	4604      	mov	r4, r0
 8002d30:	2301      	movs	r3, #1
 8002d32:	e7f0      	b.n	8002d16 <_vfiprintf_r+0x1da>
 8002d34:	ab03      	add	r3, sp, #12
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	462a      	mov	r2, r5
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <_vfiprintf_r+0x258>)
 8002d3c:	a904      	add	r1, sp, #16
 8002d3e:	4630      	mov	r0, r6
 8002d40:	f3af 8000 	nop.w
 8002d44:	4607      	mov	r7, r0
 8002d46:	1c78      	adds	r0, r7, #1
 8002d48:	d1d6      	bne.n	8002cf8 <_vfiprintf_r+0x1bc>
 8002d4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8002d4c:	07d9      	lsls	r1, r3, #31
 8002d4e:	d405      	bmi.n	8002d5c <_vfiprintf_r+0x220>
 8002d50:	89ab      	ldrh	r3, [r5, #12]
 8002d52:	059a      	lsls	r2, r3, #22
 8002d54:	d402      	bmi.n	8002d5c <_vfiprintf_r+0x220>
 8002d56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8002d58:	f000 fe57 	bl	8003a0a <__retarget_lock_release_recursive>
 8002d5c:	89ab      	ldrh	r3, [r5, #12]
 8002d5e:	065b      	lsls	r3, r3, #25
 8002d60:	f53f af12 	bmi.w	8002b88 <_vfiprintf_r+0x4c>
 8002d64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002d66:	e711      	b.n	8002b8c <_vfiprintf_r+0x50>
 8002d68:	ab03      	add	r3, sp, #12
 8002d6a:	9300      	str	r3, [sp, #0]
 8002d6c:	462a      	mov	r2, r5
 8002d6e:	4b09      	ldr	r3, [pc, #36]	; (8002d94 <_vfiprintf_r+0x258>)
 8002d70:	a904      	add	r1, sp, #16
 8002d72:	4630      	mov	r0, r6
 8002d74:	f000 f880 	bl	8002e78 <_printf_i>
 8002d78:	e7e4      	b.n	8002d44 <_vfiprintf_r+0x208>
 8002d7a:	bf00      	nop
 8002d7c:	08004388 	.word	0x08004388
 8002d80:	080043a8 	.word	0x080043a8
 8002d84:	08004368 	.word	0x08004368
 8002d88:	08004194 	.word	0x08004194
 8002d8c:	0800419e 	.word	0x0800419e
 8002d90:	00000000 	.word	0x00000000
 8002d94:	08002b17 	.word	0x08002b17
 8002d98:	0800419a 	.word	0x0800419a

08002d9c <_printf_common>:
 8002d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002da0:	4616      	mov	r6, r2
 8002da2:	4699      	mov	r9, r3
 8002da4:	688a      	ldr	r2, [r1, #8]
 8002da6:	690b      	ldr	r3, [r1, #16]
 8002da8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002dac:	4293      	cmp	r3, r2
 8002dae:	bfb8      	it	lt
 8002db0:	4613      	movlt	r3, r2
 8002db2:	6033      	str	r3, [r6, #0]
 8002db4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002db8:	4607      	mov	r7, r0
 8002dba:	460c      	mov	r4, r1
 8002dbc:	b10a      	cbz	r2, 8002dc2 <_printf_common+0x26>
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	6033      	str	r3, [r6, #0]
 8002dc2:	6823      	ldr	r3, [r4, #0]
 8002dc4:	0699      	lsls	r1, r3, #26
 8002dc6:	bf42      	ittt	mi
 8002dc8:	6833      	ldrmi	r3, [r6, #0]
 8002dca:	3302      	addmi	r3, #2
 8002dcc:	6033      	strmi	r3, [r6, #0]
 8002dce:	6825      	ldr	r5, [r4, #0]
 8002dd0:	f015 0506 	ands.w	r5, r5, #6
 8002dd4:	d106      	bne.n	8002de4 <_printf_common+0x48>
 8002dd6:	f104 0a19 	add.w	sl, r4, #25
 8002dda:	68e3      	ldr	r3, [r4, #12]
 8002ddc:	6832      	ldr	r2, [r6, #0]
 8002dde:	1a9b      	subs	r3, r3, r2
 8002de0:	42ab      	cmp	r3, r5
 8002de2:	dc26      	bgt.n	8002e32 <_printf_common+0x96>
 8002de4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002de8:	1e13      	subs	r3, r2, #0
 8002dea:	6822      	ldr	r2, [r4, #0]
 8002dec:	bf18      	it	ne
 8002dee:	2301      	movne	r3, #1
 8002df0:	0692      	lsls	r2, r2, #26
 8002df2:	d42b      	bmi.n	8002e4c <_printf_common+0xb0>
 8002df4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002df8:	4649      	mov	r1, r9
 8002dfa:	4638      	mov	r0, r7
 8002dfc:	47c0      	blx	r8
 8002dfe:	3001      	adds	r0, #1
 8002e00:	d01e      	beq.n	8002e40 <_printf_common+0xa4>
 8002e02:	6823      	ldr	r3, [r4, #0]
 8002e04:	68e5      	ldr	r5, [r4, #12]
 8002e06:	6832      	ldr	r2, [r6, #0]
 8002e08:	f003 0306 	and.w	r3, r3, #6
 8002e0c:	2b04      	cmp	r3, #4
 8002e0e:	bf08      	it	eq
 8002e10:	1aad      	subeq	r5, r5, r2
 8002e12:	68a3      	ldr	r3, [r4, #8]
 8002e14:	6922      	ldr	r2, [r4, #16]
 8002e16:	bf0c      	ite	eq
 8002e18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002e1c:	2500      	movne	r5, #0
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	bfc4      	itt	gt
 8002e22:	1a9b      	subgt	r3, r3, r2
 8002e24:	18ed      	addgt	r5, r5, r3
 8002e26:	2600      	movs	r6, #0
 8002e28:	341a      	adds	r4, #26
 8002e2a:	42b5      	cmp	r5, r6
 8002e2c:	d11a      	bne.n	8002e64 <_printf_common+0xc8>
 8002e2e:	2000      	movs	r0, #0
 8002e30:	e008      	b.n	8002e44 <_printf_common+0xa8>
 8002e32:	2301      	movs	r3, #1
 8002e34:	4652      	mov	r2, sl
 8002e36:	4649      	mov	r1, r9
 8002e38:	4638      	mov	r0, r7
 8002e3a:	47c0      	blx	r8
 8002e3c:	3001      	adds	r0, #1
 8002e3e:	d103      	bne.n	8002e48 <_printf_common+0xac>
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002e48:	3501      	adds	r5, #1
 8002e4a:	e7c6      	b.n	8002dda <_printf_common+0x3e>
 8002e4c:	18e1      	adds	r1, r4, r3
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	2030      	movs	r0, #48	; 0x30
 8002e52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002e56:	4422      	add	r2, r4
 8002e58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002e5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002e60:	3302      	adds	r3, #2
 8002e62:	e7c7      	b.n	8002df4 <_printf_common+0x58>
 8002e64:	2301      	movs	r3, #1
 8002e66:	4622      	mov	r2, r4
 8002e68:	4649      	mov	r1, r9
 8002e6a:	4638      	mov	r0, r7
 8002e6c:	47c0      	blx	r8
 8002e6e:	3001      	adds	r0, #1
 8002e70:	d0e6      	beq.n	8002e40 <_printf_common+0xa4>
 8002e72:	3601      	adds	r6, #1
 8002e74:	e7d9      	b.n	8002e2a <_printf_common+0x8e>
	...

08002e78 <_printf_i>:
 8002e78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002e7c:	460c      	mov	r4, r1
 8002e7e:	4691      	mov	r9, r2
 8002e80:	7e27      	ldrb	r7, [r4, #24]
 8002e82:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002e84:	2f78      	cmp	r7, #120	; 0x78
 8002e86:	4680      	mov	r8, r0
 8002e88:	469a      	mov	sl, r3
 8002e8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002e8e:	d807      	bhi.n	8002ea0 <_printf_i+0x28>
 8002e90:	2f62      	cmp	r7, #98	; 0x62
 8002e92:	d80a      	bhi.n	8002eaa <_printf_i+0x32>
 8002e94:	2f00      	cmp	r7, #0
 8002e96:	f000 80d8 	beq.w	800304a <_printf_i+0x1d2>
 8002e9a:	2f58      	cmp	r7, #88	; 0x58
 8002e9c:	f000 80a3 	beq.w	8002fe6 <_printf_i+0x16e>
 8002ea0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002ea4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002ea8:	e03a      	b.n	8002f20 <_printf_i+0xa8>
 8002eaa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002eae:	2b15      	cmp	r3, #21
 8002eb0:	d8f6      	bhi.n	8002ea0 <_printf_i+0x28>
 8002eb2:	a001      	add	r0, pc, #4	; (adr r0, 8002eb8 <_printf_i+0x40>)
 8002eb4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8002eb8:	08002f11 	.word	0x08002f11
 8002ebc:	08002f25 	.word	0x08002f25
 8002ec0:	08002ea1 	.word	0x08002ea1
 8002ec4:	08002ea1 	.word	0x08002ea1
 8002ec8:	08002ea1 	.word	0x08002ea1
 8002ecc:	08002ea1 	.word	0x08002ea1
 8002ed0:	08002f25 	.word	0x08002f25
 8002ed4:	08002ea1 	.word	0x08002ea1
 8002ed8:	08002ea1 	.word	0x08002ea1
 8002edc:	08002ea1 	.word	0x08002ea1
 8002ee0:	08002ea1 	.word	0x08002ea1
 8002ee4:	08003031 	.word	0x08003031
 8002ee8:	08002f55 	.word	0x08002f55
 8002eec:	08003013 	.word	0x08003013
 8002ef0:	08002ea1 	.word	0x08002ea1
 8002ef4:	08002ea1 	.word	0x08002ea1
 8002ef8:	08003053 	.word	0x08003053
 8002efc:	08002ea1 	.word	0x08002ea1
 8002f00:	08002f55 	.word	0x08002f55
 8002f04:	08002ea1 	.word	0x08002ea1
 8002f08:	08002ea1 	.word	0x08002ea1
 8002f0c:	0800301b 	.word	0x0800301b
 8002f10:	680b      	ldr	r3, [r1, #0]
 8002f12:	1d1a      	adds	r2, r3, #4
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	600a      	str	r2, [r1, #0]
 8002f18:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8002f1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0a3      	b.n	800306c <_printf_i+0x1f4>
 8002f24:	6825      	ldr	r5, [r4, #0]
 8002f26:	6808      	ldr	r0, [r1, #0]
 8002f28:	062e      	lsls	r6, r5, #24
 8002f2a:	f100 0304 	add.w	r3, r0, #4
 8002f2e:	d50a      	bpl.n	8002f46 <_printf_i+0xce>
 8002f30:	6805      	ldr	r5, [r0, #0]
 8002f32:	600b      	str	r3, [r1, #0]
 8002f34:	2d00      	cmp	r5, #0
 8002f36:	da03      	bge.n	8002f40 <_printf_i+0xc8>
 8002f38:	232d      	movs	r3, #45	; 0x2d
 8002f3a:	426d      	negs	r5, r5
 8002f3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f40:	485e      	ldr	r0, [pc, #376]	; (80030bc <_printf_i+0x244>)
 8002f42:	230a      	movs	r3, #10
 8002f44:	e019      	b.n	8002f7a <_printf_i+0x102>
 8002f46:	f015 0f40 	tst.w	r5, #64	; 0x40
 8002f4a:	6805      	ldr	r5, [r0, #0]
 8002f4c:	600b      	str	r3, [r1, #0]
 8002f4e:	bf18      	it	ne
 8002f50:	b22d      	sxthne	r5, r5
 8002f52:	e7ef      	b.n	8002f34 <_printf_i+0xbc>
 8002f54:	680b      	ldr	r3, [r1, #0]
 8002f56:	6825      	ldr	r5, [r4, #0]
 8002f58:	1d18      	adds	r0, r3, #4
 8002f5a:	6008      	str	r0, [r1, #0]
 8002f5c:	0628      	lsls	r0, r5, #24
 8002f5e:	d501      	bpl.n	8002f64 <_printf_i+0xec>
 8002f60:	681d      	ldr	r5, [r3, #0]
 8002f62:	e002      	b.n	8002f6a <_printf_i+0xf2>
 8002f64:	0669      	lsls	r1, r5, #25
 8002f66:	d5fb      	bpl.n	8002f60 <_printf_i+0xe8>
 8002f68:	881d      	ldrh	r5, [r3, #0]
 8002f6a:	4854      	ldr	r0, [pc, #336]	; (80030bc <_printf_i+0x244>)
 8002f6c:	2f6f      	cmp	r7, #111	; 0x6f
 8002f6e:	bf0c      	ite	eq
 8002f70:	2308      	moveq	r3, #8
 8002f72:	230a      	movne	r3, #10
 8002f74:	2100      	movs	r1, #0
 8002f76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002f7a:	6866      	ldr	r6, [r4, #4]
 8002f7c:	60a6      	str	r6, [r4, #8]
 8002f7e:	2e00      	cmp	r6, #0
 8002f80:	bfa2      	ittt	ge
 8002f82:	6821      	ldrge	r1, [r4, #0]
 8002f84:	f021 0104 	bicge.w	r1, r1, #4
 8002f88:	6021      	strge	r1, [r4, #0]
 8002f8a:	b90d      	cbnz	r5, 8002f90 <_printf_i+0x118>
 8002f8c:	2e00      	cmp	r6, #0
 8002f8e:	d04d      	beq.n	800302c <_printf_i+0x1b4>
 8002f90:	4616      	mov	r6, r2
 8002f92:	fbb5 f1f3 	udiv	r1, r5, r3
 8002f96:	fb03 5711 	mls	r7, r3, r1, r5
 8002f9a:	5dc7      	ldrb	r7, [r0, r7]
 8002f9c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002fa0:	462f      	mov	r7, r5
 8002fa2:	42bb      	cmp	r3, r7
 8002fa4:	460d      	mov	r5, r1
 8002fa6:	d9f4      	bls.n	8002f92 <_printf_i+0x11a>
 8002fa8:	2b08      	cmp	r3, #8
 8002faa:	d10b      	bne.n	8002fc4 <_printf_i+0x14c>
 8002fac:	6823      	ldr	r3, [r4, #0]
 8002fae:	07df      	lsls	r7, r3, #31
 8002fb0:	d508      	bpl.n	8002fc4 <_printf_i+0x14c>
 8002fb2:	6923      	ldr	r3, [r4, #16]
 8002fb4:	6861      	ldr	r1, [r4, #4]
 8002fb6:	4299      	cmp	r1, r3
 8002fb8:	bfde      	ittt	le
 8002fba:	2330      	movle	r3, #48	; 0x30
 8002fbc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002fc0:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8002fc4:	1b92      	subs	r2, r2, r6
 8002fc6:	6122      	str	r2, [r4, #16]
 8002fc8:	f8cd a000 	str.w	sl, [sp]
 8002fcc:	464b      	mov	r3, r9
 8002fce:	aa03      	add	r2, sp, #12
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	4640      	mov	r0, r8
 8002fd4:	f7ff fee2 	bl	8002d9c <_printf_common>
 8002fd8:	3001      	adds	r0, #1
 8002fda:	d14c      	bne.n	8003076 <_printf_i+0x1fe>
 8002fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fe0:	b004      	add	sp, #16
 8002fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002fe6:	4835      	ldr	r0, [pc, #212]	; (80030bc <_printf_i+0x244>)
 8002fe8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8002fec:	6823      	ldr	r3, [r4, #0]
 8002fee:	680e      	ldr	r6, [r1, #0]
 8002ff0:	061f      	lsls	r7, r3, #24
 8002ff2:	f856 5b04 	ldr.w	r5, [r6], #4
 8002ff6:	600e      	str	r6, [r1, #0]
 8002ff8:	d514      	bpl.n	8003024 <_printf_i+0x1ac>
 8002ffa:	07d9      	lsls	r1, r3, #31
 8002ffc:	bf44      	itt	mi
 8002ffe:	f043 0320 	orrmi.w	r3, r3, #32
 8003002:	6023      	strmi	r3, [r4, #0]
 8003004:	b91d      	cbnz	r5, 800300e <_printf_i+0x196>
 8003006:	6823      	ldr	r3, [r4, #0]
 8003008:	f023 0320 	bic.w	r3, r3, #32
 800300c:	6023      	str	r3, [r4, #0]
 800300e:	2310      	movs	r3, #16
 8003010:	e7b0      	b.n	8002f74 <_printf_i+0xfc>
 8003012:	6823      	ldr	r3, [r4, #0]
 8003014:	f043 0320 	orr.w	r3, r3, #32
 8003018:	6023      	str	r3, [r4, #0]
 800301a:	2378      	movs	r3, #120	; 0x78
 800301c:	4828      	ldr	r0, [pc, #160]	; (80030c0 <_printf_i+0x248>)
 800301e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003022:	e7e3      	b.n	8002fec <_printf_i+0x174>
 8003024:	065e      	lsls	r6, r3, #25
 8003026:	bf48      	it	mi
 8003028:	b2ad      	uxthmi	r5, r5
 800302a:	e7e6      	b.n	8002ffa <_printf_i+0x182>
 800302c:	4616      	mov	r6, r2
 800302e:	e7bb      	b.n	8002fa8 <_printf_i+0x130>
 8003030:	680b      	ldr	r3, [r1, #0]
 8003032:	6826      	ldr	r6, [r4, #0]
 8003034:	6960      	ldr	r0, [r4, #20]
 8003036:	1d1d      	adds	r5, r3, #4
 8003038:	600d      	str	r5, [r1, #0]
 800303a:	0635      	lsls	r5, r6, #24
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	d501      	bpl.n	8003044 <_printf_i+0x1cc>
 8003040:	6018      	str	r0, [r3, #0]
 8003042:	e002      	b.n	800304a <_printf_i+0x1d2>
 8003044:	0671      	lsls	r1, r6, #25
 8003046:	d5fb      	bpl.n	8003040 <_printf_i+0x1c8>
 8003048:	8018      	strh	r0, [r3, #0]
 800304a:	2300      	movs	r3, #0
 800304c:	6123      	str	r3, [r4, #16]
 800304e:	4616      	mov	r6, r2
 8003050:	e7ba      	b.n	8002fc8 <_printf_i+0x150>
 8003052:	680b      	ldr	r3, [r1, #0]
 8003054:	1d1a      	adds	r2, r3, #4
 8003056:	600a      	str	r2, [r1, #0]
 8003058:	681e      	ldr	r6, [r3, #0]
 800305a:	6862      	ldr	r2, [r4, #4]
 800305c:	2100      	movs	r1, #0
 800305e:	4630      	mov	r0, r6
 8003060:	f7fd f8de 	bl	8000220 <memchr>
 8003064:	b108      	cbz	r0, 800306a <_printf_i+0x1f2>
 8003066:	1b80      	subs	r0, r0, r6
 8003068:	6060      	str	r0, [r4, #4]
 800306a:	6863      	ldr	r3, [r4, #4]
 800306c:	6123      	str	r3, [r4, #16]
 800306e:	2300      	movs	r3, #0
 8003070:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003074:	e7a8      	b.n	8002fc8 <_printf_i+0x150>
 8003076:	6923      	ldr	r3, [r4, #16]
 8003078:	4632      	mov	r2, r6
 800307a:	4649      	mov	r1, r9
 800307c:	4640      	mov	r0, r8
 800307e:	47d0      	blx	sl
 8003080:	3001      	adds	r0, #1
 8003082:	d0ab      	beq.n	8002fdc <_printf_i+0x164>
 8003084:	6823      	ldr	r3, [r4, #0]
 8003086:	079b      	lsls	r3, r3, #30
 8003088:	d413      	bmi.n	80030b2 <_printf_i+0x23a>
 800308a:	68e0      	ldr	r0, [r4, #12]
 800308c:	9b03      	ldr	r3, [sp, #12]
 800308e:	4298      	cmp	r0, r3
 8003090:	bfb8      	it	lt
 8003092:	4618      	movlt	r0, r3
 8003094:	e7a4      	b.n	8002fe0 <_printf_i+0x168>
 8003096:	2301      	movs	r3, #1
 8003098:	4632      	mov	r2, r6
 800309a:	4649      	mov	r1, r9
 800309c:	4640      	mov	r0, r8
 800309e:	47d0      	blx	sl
 80030a0:	3001      	adds	r0, #1
 80030a2:	d09b      	beq.n	8002fdc <_printf_i+0x164>
 80030a4:	3501      	adds	r5, #1
 80030a6:	68e3      	ldr	r3, [r4, #12]
 80030a8:	9903      	ldr	r1, [sp, #12]
 80030aa:	1a5b      	subs	r3, r3, r1
 80030ac:	42ab      	cmp	r3, r5
 80030ae:	dcf2      	bgt.n	8003096 <_printf_i+0x21e>
 80030b0:	e7eb      	b.n	800308a <_printf_i+0x212>
 80030b2:	2500      	movs	r5, #0
 80030b4:	f104 0619 	add.w	r6, r4, #25
 80030b8:	e7f5      	b.n	80030a6 <_printf_i+0x22e>
 80030ba:	bf00      	nop
 80030bc:	080041a5 	.word	0x080041a5
 80030c0:	080041b6 	.word	0x080041b6

080030c4 <_puts_r>:
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	460e      	mov	r6, r1
 80030c8:	4605      	mov	r5, r0
 80030ca:	b118      	cbz	r0, 80030d4 <_puts_r+0x10>
 80030cc:	6983      	ldr	r3, [r0, #24]
 80030ce:	b90b      	cbnz	r3, 80030d4 <_puts_r+0x10>
 80030d0:	f000 fbfc 	bl	80038cc <__sinit>
 80030d4:	69ab      	ldr	r3, [r5, #24]
 80030d6:	68ac      	ldr	r4, [r5, #8]
 80030d8:	b913      	cbnz	r3, 80030e0 <_puts_r+0x1c>
 80030da:	4628      	mov	r0, r5
 80030dc:	f000 fbf6 	bl	80038cc <__sinit>
 80030e0:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <_puts_r+0xd0>)
 80030e2:	429c      	cmp	r4, r3
 80030e4:	d120      	bne.n	8003128 <_puts_r+0x64>
 80030e6:	686c      	ldr	r4, [r5, #4]
 80030e8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80030ea:	07db      	lsls	r3, r3, #31
 80030ec:	d405      	bmi.n	80030fa <_puts_r+0x36>
 80030ee:	89a3      	ldrh	r3, [r4, #12]
 80030f0:	0598      	lsls	r0, r3, #22
 80030f2:	d402      	bmi.n	80030fa <_puts_r+0x36>
 80030f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80030f6:	f000 fc87 	bl	8003a08 <__retarget_lock_acquire_recursive>
 80030fa:	89a3      	ldrh	r3, [r4, #12]
 80030fc:	0719      	lsls	r1, r3, #28
 80030fe:	d51d      	bpl.n	800313c <_puts_r+0x78>
 8003100:	6923      	ldr	r3, [r4, #16]
 8003102:	b1db      	cbz	r3, 800313c <_puts_r+0x78>
 8003104:	3e01      	subs	r6, #1
 8003106:	68a3      	ldr	r3, [r4, #8]
 8003108:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800310c:	3b01      	subs	r3, #1
 800310e:	60a3      	str	r3, [r4, #8]
 8003110:	bb39      	cbnz	r1, 8003162 <_puts_r+0x9e>
 8003112:	2b00      	cmp	r3, #0
 8003114:	da38      	bge.n	8003188 <_puts_r+0xc4>
 8003116:	4622      	mov	r2, r4
 8003118:	210a      	movs	r1, #10
 800311a:	4628      	mov	r0, r5
 800311c:	f000 f9f4 	bl	8003508 <__swbuf_r>
 8003120:	3001      	adds	r0, #1
 8003122:	d011      	beq.n	8003148 <_puts_r+0x84>
 8003124:	250a      	movs	r5, #10
 8003126:	e011      	b.n	800314c <_puts_r+0x88>
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <_puts_r+0xd4>)
 800312a:	429c      	cmp	r4, r3
 800312c:	d101      	bne.n	8003132 <_puts_r+0x6e>
 800312e:	68ac      	ldr	r4, [r5, #8]
 8003130:	e7da      	b.n	80030e8 <_puts_r+0x24>
 8003132:	4b1a      	ldr	r3, [pc, #104]	; (800319c <_puts_r+0xd8>)
 8003134:	429c      	cmp	r4, r3
 8003136:	bf08      	it	eq
 8003138:	68ec      	ldreq	r4, [r5, #12]
 800313a:	e7d5      	b.n	80030e8 <_puts_r+0x24>
 800313c:	4621      	mov	r1, r4
 800313e:	4628      	mov	r0, r5
 8003140:	f000 fa34 	bl	80035ac <__swsetup_r>
 8003144:	2800      	cmp	r0, #0
 8003146:	d0dd      	beq.n	8003104 <_puts_r+0x40>
 8003148:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800314c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800314e:	07da      	lsls	r2, r3, #31
 8003150:	d405      	bmi.n	800315e <_puts_r+0x9a>
 8003152:	89a3      	ldrh	r3, [r4, #12]
 8003154:	059b      	lsls	r3, r3, #22
 8003156:	d402      	bmi.n	800315e <_puts_r+0x9a>
 8003158:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800315a:	f000 fc56 	bl	8003a0a <__retarget_lock_release_recursive>
 800315e:	4628      	mov	r0, r5
 8003160:	bd70      	pop	{r4, r5, r6, pc}
 8003162:	2b00      	cmp	r3, #0
 8003164:	da04      	bge.n	8003170 <_puts_r+0xac>
 8003166:	69a2      	ldr	r2, [r4, #24]
 8003168:	429a      	cmp	r2, r3
 800316a:	dc06      	bgt.n	800317a <_puts_r+0xb6>
 800316c:	290a      	cmp	r1, #10
 800316e:	d004      	beq.n	800317a <_puts_r+0xb6>
 8003170:	6823      	ldr	r3, [r4, #0]
 8003172:	1c5a      	adds	r2, r3, #1
 8003174:	6022      	str	r2, [r4, #0]
 8003176:	7019      	strb	r1, [r3, #0]
 8003178:	e7c5      	b.n	8003106 <_puts_r+0x42>
 800317a:	4622      	mov	r2, r4
 800317c:	4628      	mov	r0, r5
 800317e:	f000 f9c3 	bl	8003508 <__swbuf_r>
 8003182:	3001      	adds	r0, #1
 8003184:	d1bf      	bne.n	8003106 <_puts_r+0x42>
 8003186:	e7df      	b.n	8003148 <_puts_r+0x84>
 8003188:	6823      	ldr	r3, [r4, #0]
 800318a:	250a      	movs	r5, #10
 800318c:	1c5a      	adds	r2, r3, #1
 800318e:	6022      	str	r2, [r4, #0]
 8003190:	701d      	strb	r5, [r3, #0]
 8003192:	e7db      	b.n	800314c <_puts_r+0x88>
 8003194:	08004388 	.word	0x08004388
 8003198:	080043a8 	.word	0x080043a8
 800319c:	08004368 	.word	0x08004368

080031a0 <puts>:
 80031a0:	4b02      	ldr	r3, [pc, #8]	; (80031ac <puts+0xc>)
 80031a2:	4601      	mov	r1, r0
 80031a4:	6818      	ldr	r0, [r3, #0]
 80031a6:	f7ff bf8d 	b.w	80030c4 <_puts_r>
 80031aa:	bf00      	nop
 80031ac:	2000002c 	.word	0x2000002c

080031b0 <_sbrk_r>:
 80031b0:	b538      	push	{r3, r4, r5, lr}
 80031b2:	4d06      	ldr	r5, [pc, #24]	; (80031cc <_sbrk_r+0x1c>)
 80031b4:	2300      	movs	r3, #0
 80031b6:	4604      	mov	r4, r0
 80031b8:	4608      	mov	r0, r1
 80031ba:	602b      	str	r3, [r5, #0]
 80031bc:	f7fd fec0 	bl	8000f40 <_sbrk>
 80031c0:	1c43      	adds	r3, r0, #1
 80031c2:	d102      	bne.n	80031ca <_sbrk_r+0x1a>
 80031c4:	682b      	ldr	r3, [r5, #0]
 80031c6:	b103      	cbz	r3, 80031ca <_sbrk_r+0x1a>
 80031c8:	6023      	str	r3, [r4, #0]
 80031ca:	bd38      	pop	{r3, r4, r5, pc}
 80031cc:	20000154 	.word	0x20000154

080031d0 <siprintf>:
 80031d0:	b40e      	push	{r1, r2, r3}
 80031d2:	b500      	push	{lr}
 80031d4:	b09c      	sub	sp, #112	; 0x70
 80031d6:	ab1d      	add	r3, sp, #116	; 0x74
 80031d8:	9002      	str	r0, [sp, #8]
 80031da:	9006      	str	r0, [sp, #24]
 80031dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80031e0:	4809      	ldr	r0, [pc, #36]	; (8003208 <siprintf+0x38>)
 80031e2:	9107      	str	r1, [sp, #28]
 80031e4:	9104      	str	r1, [sp, #16]
 80031e6:	4909      	ldr	r1, [pc, #36]	; (800320c <siprintf+0x3c>)
 80031e8:	f853 2b04 	ldr.w	r2, [r3], #4
 80031ec:	9105      	str	r1, [sp, #20]
 80031ee:	6800      	ldr	r0, [r0, #0]
 80031f0:	9301      	str	r3, [sp, #4]
 80031f2:	a902      	add	r1, sp, #8
 80031f4:	f000 fd24 	bl	8003c40 <_svfiprintf_r>
 80031f8:	9b02      	ldr	r3, [sp, #8]
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]
 80031fe:	b01c      	add	sp, #112	; 0x70
 8003200:	f85d eb04 	ldr.w	lr, [sp], #4
 8003204:	b003      	add	sp, #12
 8003206:	4770      	bx	lr
 8003208:	2000002c 	.word	0x2000002c
 800320c:	ffff0208 	.word	0xffff0208

08003210 <strcat>:
 8003210:	b510      	push	{r4, lr}
 8003212:	4602      	mov	r2, r0
 8003214:	7814      	ldrb	r4, [r2, #0]
 8003216:	4613      	mov	r3, r2
 8003218:	3201      	adds	r2, #1
 800321a:	2c00      	cmp	r4, #0
 800321c:	d1fa      	bne.n	8003214 <strcat+0x4>
 800321e:	3b01      	subs	r3, #1
 8003220:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003224:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003228:	2a00      	cmp	r2, #0
 800322a:	d1f9      	bne.n	8003220 <strcat+0x10>
 800322c:	bd10      	pop	{r4, pc}

0800322e <strchr>:
 800322e:	b2c9      	uxtb	r1, r1
 8003230:	4603      	mov	r3, r0
 8003232:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003236:	b11a      	cbz	r2, 8003240 <strchr+0x12>
 8003238:	428a      	cmp	r2, r1
 800323a:	d1f9      	bne.n	8003230 <strchr+0x2>
 800323c:	4618      	mov	r0, r3
 800323e:	4770      	bx	lr
 8003240:	2900      	cmp	r1, #0
 8003242:	bf18      	it	ne
 8003244:	2300      	movne	r3, #0
 8003246:	e7f9      	b.n	800323c <strchr+0xe>

08003248 <strdup>:
 8003248:	4b02      	ldr	r3, [pc, #8]	; (8003254 <strdup+0xc>)
 800324a:	4601      	mov	r1, r0
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	f000 b803 	b.w	8003258 <_strdup_r>
 8003252:	bf00      	nop
 8003254:	2000002c 	.word	0x2000002c

08003258 <_strdup_r>:
 8003258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800325a:	4604      	mov	r4, r0
 800325c:	4608      	mov	r0, r1
 800325e:	460d      	mov	r5, r1
 8003260:	f7fc ffd6 	bl	8000210 <strlen>
 8003264:	1c42      	adds	r2, r0, #1
 8003266:	4611      	mov	r1, r2
 8003268:	4620      	mov	r0, r4
 800326a:	9201      	str	r2, [sp, #4]
 800326c:	f7ff fbe2 	bl	8002a34 <_malloc_r>
 8003270:	4604      	mov	r4, r0
 8003272:	b118      	cbz	r0, 800327c <_strdup_r+0x24>
 8003274:	9a01      	ldr	r2, [sp, #4]
 8003276:	4629      	mov	r1, r5
 8003278:	f000 fc2c 	bl	8003ad4 <memcpy>
 800327c:	4620      	mov	r0, r4
 800327e:	b003      	add	sp, #12
 8003280:	bd30      	pop	{r4, r5, pc}

08003282 <strstr>:
 8003282:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003284:	780c      	ldrb	r4, [r1, #0]
 8003286:	b164      	cbz	r4, 80032a2 <strstr+0x20>
 8003288:	4603      	mov	r3, r0
 800328a:	781a      	ldrb	r2, [r3, #0]
 800328c:	4618      	mov	r0, r3
 800328e:	1c5e      	adds	r6, r3, #1
 8003290:	b90a      	cbnz	r2, 8003296 <strstr+0x14>
 8003292:	4610      	mov	r0, r2
 8003294:	e005      	b.n	80032a2 <strstr+0x20>
 8003296:	4294      	cmp	r4, r2
 8003298:	d108      	bne.n	80032ac <strstr+0x2a>
 800329a:	460d      	mov	r5, r1
 800329c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80032a0:	b902      	cbnz	r2, 80032a4 <strstr+0x22>
 80032a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032a4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 80032a8:	4297      	cmp	r7, r2
 80032aa:	d0f7      	beq.n	800329c <strstr+0x1a>
 80032ac:	4633      	mov	r3, r6
 80032ae:	e7ec      	b.n	800328a <strstr+0x8>

080032b0 <strtok>:
 80032b0:	4b16      	ldr	r3, [pc, #88]	; (800330c <strtok+0x5c>)
 80032b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80032b4:	681e      	ldr	r6, [r3, #0]
 80032b6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80032b8:	4605      	mov	r5, r0
 80032ba:	b9fc      	cbnz	r4, 80032fc <strtok+0x4c>
 80032bc:	2050      	movs	r0, #80	; 0x50
 80032be:	9101      	str	r1, [sp, #4]
 80032c0:	f7ff fb50 	bl	8002964 <malloc>
 80032c4:	9901      	ldr	r1, [sp, #4]
 80032c6:	65b0      	str	r0, [r6, #88]	; 0x58
 80032c8:	4602      	mov	r2, r0
 80032ca:	b920      	cbnz	r0, 80032d6 <strtok+0x26>
 80032cc:	4b10      	ldr	r3, [pc, #64]	; (8003310 <strtok+0x60>)
 80032ce:	4811      	ldr	r0, [pc, #68]	; (8003314 <strtok+0x64>)
 80032d0:	2157      	movs	r1, #87	; 0x57
 80032d2:	f7ff facf 	bl	8002874 <__assert_func>
 80032d6:	e9c0 4400 	strd	r4, r4, [r0]
 80032da:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80032de:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80032e2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80032e6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80032ea:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80032ee:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80032f2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80032f6:	6184      	str	r4, [r0, #24]
 80032f8:	7704      	strb	r4, [r0, #28]
 80032fa:	6244      	str	r4, [r0, #36]	; 0x24
 80032fc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80032fe:	2301      	movs	r3, #1
 8003300:	4628      	mov	r0, r5
 8003302:	b002      	add	sp, #8
 8003304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003308:	f000 b806 	b.w	8003318 <__strtok_r>
 800330c:	2000002c 	.word	0x2000002c
 8003310:	080041c7 	.word	0x080041c7
 8003314:	080041de 	.word	0x080041de

08003318 <__strtok_r>:
 8003318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800331a:	b908      	cbnz	r0, 8003320 <__strtok_r+0x8>
 800331c:	6810      	ldr	r0, [r2, #0]
 800331e:	b188      	cbz	r0, 8003344 <__strtok_r+0x2c>
 8003320:	4604      	mov	r4, r0
 8003322:	4620      	mov	r0, r4
 8003324:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003328:	460f      	mov	r7, r1
 800332a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800332e:	b91e      	cbnz	r6, 8003338 <__strtok_r+0x20>
 8003330:	b965      	cbnz	r5, 800334c <__strtok_r+0x34>
 8003332:	6015      	str	r5, [r2, #0]
 8003334:	4628      	mov	r0, r5
 8003336:	e005      	b.n	8003344 <__strtok_r+0x2c>
 8003338:	42b5      	cmp	r5, r6
 800333a:	d1f6      	bne.n	800332a <__strtok_r+0x12>
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1f0      	bne.n	8003322 <__strtok_r+0xa>
 8003340:	6014      	str	r4, [r2, #0]
 8003342:	7003      	strb	r3, [r0, #0]
 8003344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003346:	461c      	mov	r4, r3
 8003348:	e00c      	b.n	8003364 <__strtok_r+0x4c>
 800334a:	b915      	cbnz	r5, 8003352 <__strtok_r+0x3a>
 800334c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003350:	460e      	mov	r6, r1
 8003352:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003356:	42ab      	cmp	r3, r5
 8003358:	d1f7      	bne.n	800334a <__strtok_r+0x32>
 800335a:	2b00      	cmp	r3, #0
 800335c:	d0f3      	beq.n	8003346 <__strtok_r+0x2e>
 800335e:	2300      	movs	r3, #0
 8003360:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003364:	6014      	str	r4, [r2, #0]
 8003366:	e7ed      	b.n	8003344 <__strtok_r+0x2c>

08003368 <_strtol_l.isra.0>:
 8003368:	2b01      	cmp	r3, #1
 800336a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800336e:	d001      	beq.n	8003374 <_strtol_l.isra.0+0xc>
 8003370:	2b24      	cmp	r3, #36	; 0x24
 8003372:	d906      	bls.n	8003382 <_strtol_l.isra.0+0x1a>
 8003374:	f7ff faa0 	bl	80028b8 <__errno>
 8003378:	2316      	movs	r3, #22
 800337a:	6003      	str	r3, [r0, #0]
 800337c:	2000      	movs	r0, #0
 800337e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003382:	4f3a      	ldr	r7, [pc, #232]	; (800346c <_strtol_l.isra.0+0x104>)
 8003384:	468e      	mov	lr, r1
 8003386:	4676      	mov	r6, lr
 8003388:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800338c:	5de5      	ldrb	r5, [r4, r7]
 800338e:	f015 0508 	ands.w	r5, r5, #8
 8003392:	d1f8      	bne.n	8003386 <_strtol_l.isra.0+0x1e>
 8003394:	2c2d      	cmp	r4, #45	; 0x2d
 8003396:	d134      	bne.n	8003402 <_strtol_l.isra.0+0x9a>
 8003398:	f89e 4000 	ldrb.w	r4, [lr]
 800339c:	f04f 0801 	mov.w	r8, #1
 80033a0:	f106 0e02 	add.w	lr, r6, #2
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d05c      	beq.n	8003462 <_strtol_l.isra.0+0xfa>
 80033a8:	2b10      	cmp	r3, #16
 80033aa:	d10c      	bne.n	80033c6 <_strtol_l.isra.0+0x5e>
 80033ac:	2c30      	cmp	r4, #48	; 0x30
 80033ae:	d10a      	bne.n	80033c6 <_strtol_l.isra.0+0x5e>
 80033b0:	f89e 4000 	ldrb.w	r4, [lr]
 80033b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80033b8:	2c58      	cmp	r4, #88	; 0x58
 80033ba:	d14d      	bne.n	8003458 <_strtol_l.isra.0+0xf0>
 80033bc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80033c0:	2310      	movs	r3, #16
 80033c2:	f10e 0e02 	add.w	lr, lr, #2
 80033c6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80033ca:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 80033ce:	2600      	movs	r6, #0
 80033d0:	fbbc f9f3 	udiv	r9, ip, r3
 80033d4:	4635      	mov	r5, r6
 80033d6:	fb03 ca19 	mls	sl, r3, r9, ip
 80033da:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 80033de:	2f09      	cmp	r7, #9
 80033e0:	d818      	bhi.n	8003414 <_strtol_l.isra.0+0xac>
 80033e2:	463c      	mov	r4, r7
 80033e4:	42a3      	cmp	r3, r4
 80033e6:	dd24      	ble.n	8003432 <_strtol_l.isra.0+0xca>
 80033e8:	2e00      	cmp	r6, #0
 80033ea:	db1f      	blt.n	800342c <_strtol_l.isra.0+0xc4>
 80033ec:	45a9      	cmp	r9, r5
 80033ee:	d31d      	bcc.n	800342c <_strtol_l.isra.0+0xc4>
 80033f0:	d101      	bne.n	80033f6 <_strtol_l.isra.0+0x8e>
 80033f2:	45a2      	cmp	sl, r4
 80033f4:	db1a      	blt.n	800342c <_strtol_l.isra.0+0xc4>
 80033f6:	fb05 4503 	mla	r5, r5, r3, r4
 80033fa:	2601      	movs	r6, #1
 80033fc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8003400:	e7eb      	b.n	80033da <_strtol_l.isra.0+0x72>
 8003402:	2c2b      	cmp	r4, #43	; 0x2b
 8003404:	bf08      	it	eq
 8003406:	f89e 4000 	ldrbeq.w	r4, [lr]
 800340a:	46a8      	mov	r8, r5
 800340c:	bf08      	it	eq
 800340e:	f106 0e02 	addeq.w	lr, r6, #2
 8003412:	e7c7      	b.n	80033a4 <_strtol_l.isra.0+0x3c>
 8003414:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003418:	2f19      	cmp	r7, #25
 800341a:	d801      	bhi.n	8003420 <_strtol_l.isra.0+0xb8>
 800341c:	3c37      	subs	r4, #55	; 0x37
 800341e:	e7e1      	b.n	80033e4 <_strtol_l.isra.0+0x7c>
 8003420:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003424:	2f19      	cmp	r7, #25
 8003426:	d804      	bhi.n	8003432 <_strtol_l.isra.0+0xca>
 8003428:	3c57      	subs	r4, #87	; 0x57
 800342a:	e7db      	b.n	80033e4 <_strtol_l.isra.0+0x7c>
 800342c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8003430:	e7e4      	b.n	80033fc <_strtol_l.isra.0+0x94>
 8003432:	2e00      	cmp	r6, #0
 8003434:	da05      	bge.n	8003442 <_strtol_l.isra.0+0xda>
 8003436:	2322      	movs	r3, #34	; 0x22
 8003438:	6003      	str	r3, [r0, #0]
 800343a:	4665      	mov	r5, ip
 800343c:	b942      	cbnz	r2, 8003450 <_strtol_l.isra.0+0xe8>
 800343e:	4628      	mov	r0, r5
 8003440:	e79d      	b.n	800337e <_strtol_l.isra.0+0x16>
 8003442:	f1b8 0f00 	cmp.w	r8, #0
 8003446:	d000      	beq.n	800344a <_strtol_l.isra.0+0xe2>
 8003448:	426d      	negs	r5, r5
 800344a:	2a00      	cmp	r2, #0
 800344c:	d0f7      	beq.n	800343e <_strtol_l.isra.0+0xd6>
 800344e:	b10e      	cbz	r6, 8003454 <_strtol_l.isra.0+0xec>
 8003450:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8003454:	6011      	str	r1, [r2, #0]
 8003456:	e7f2      	b.n	800343e <_strtol_l.isra.0+0xd6>
 8003458:	2430      	movs	r4, #48	; 0x30
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1b3      	bne.n	80033c6 <_strtol_l.isra.0+0x5e>
 800345e:	2308      	movs	r3, #8
 8003460:	e7b1      	b.n	80033c6 <_strtol_l.isra.0+0x5e>
 8003462:	2c30      	cmp	r4, #48	; 0x30
 8003464:	d0a4      	beq.n	80033b0 <_strtol_l.isra.0+0x48>
 8003466:	230a      	movs	r3, #10
 8003468:	e7ad      	b.n	80033c6 <_strtol_l.isra.0+0x5e>
 800346a:	bf00      	nop
 800346c:	08004265 	.word	0x08004265

08003470 <strtol>:
 8003470:	4613      	mov	r3, r2
 8003472:	460a      	mov	r2, r1
 8003474:	4601      	mov	r1, r0
 8003476:	4802      	ldr	r0, [pc, #8]	; (8003480 <strtol+0x10>)
 8003478:	6800      	ldr	r0, [r0, #0]
 800347a:	f7ff bf75 	b.w	8003368 <_strtol_l.isra.0>
 800347e:	bf00      	nop
 8003480:	2000002c 	.word	0x2000002c

08003484 <__utoa>:
 8003484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003486:	4c1f      	ldr	r4, [pc, #124]	; (8003504 <__utoa+0x80>)
 8003488:	b08b      	sub	sp, #44	; 0x2c
 800348a:	4605      	mov	r5, r0
 800348c:	460b      	mov	r3, r1
 800348e:	466e      	mov	r6, sp
 8003490:	f104 0c20 	add.w	ip, r4, #32
 8003494:	6820      	ldr	r0, [r4, #0]
 8003496:	6861      	ldr	r1, [r4, #4]
 8003498:	4637      	mov	r7, r6
 800349a:	c703      	stmia	r7!, {r0, r1}
 800349c:	3408      	adds	r4, #8
 800349e:	4564      	cmp	r4, ip
 80034a0:	463e      	mov	r6, r7
 80034a2:	d1f7      	bne.n	8003494 <__utoa+0x10>
 80034a4:	7921      	ldrb	r1, [r4, #4]
 80034a6:	7139      	strb	r1, [r7, #4]
 80034a8:	1e91      	subs	r1, r2, #2
 80034aa:	6820      	ldr	r0, [r4, #0]
 80034ac:	6038      	str	r0, [r7, #0]
 80034ae:	2922      	cmp	r1, #34	; 0x22
 80034b0:	f04f 0100 	mov.w	r1, #0
 80034b4:	d904      	bls.n	80034c0 <__utoa+0x3c>
 80034b6:	7019      	strb	r1, [r3, #0]
 80034b8:	460b      	mov	r3, r1
 80034ba:	4618      	mov	r0, r3
 80034bc:	b00b      	add	sp, #44	; 0x2c
 80034be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034c0:	1e58      	subs	r0, r3, #1
 80034c2:	4684      	mov	ip, r0
 80034c4:	fbb5 f7f2 	udiv	r7, r5, r2
 80034c8:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
 80034cc:	fb02 5617 	mls	r6, r2, r7, r5
 80034d0:	4476      	add	r6, lr
 80034d2:	460c      	mov	r4, r1
 80034d4:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80034d8:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80034dc:	462e      	mov	r6, r5
 80034de:	42b2      	cmp	r2, r6
 80034e0:	f101 0101 	add.w	r1, r1, #1
 80034e4:	463d      	mov	r5, r7
 80034e6:	d9ed      	bls.n	80034c4 <__utoa+0x40>
 80034e8:	2200      	movs	r2, #0
 80034ea:	545a      	strb	r2, [r3, r1]
 80034ec:	1919      	adds	r1, r3, r4
 80034ee:	1aa5      	subs	r5, r4, r2
 80034f0:	42aa      	cmp	r2, r5
 80034f2:	dae2      	bge.n	80034ba <__utoa+0x36>
 80034f4:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80034f8:	780e      	ldrb	r6, [r1, #0]
 80034fa:	7006      	strb	r6, [r0, #0]
 80034fc:	3201      	adds	r2, #1
 80034fe:	f801 5901 	strb.w	r5, [r1], #-1
 8003502:	e7f4      	b.n	80034ee <__utoa+0x6a>
 8003504:	0800423f 	.word	0x0800423f

08003508 <__swbuf_r>:
 8003508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800350a:	460e      	mov	r6, r1
 800350c:	4614      	mov	r4, r2
 800350e:	4605      	mov	r5, r0
 8003510:	b118      	cbz	r0, 800351a <__swbuf_r+0x12>
 8003512:	6983      	ldr	r3, [r0, #24]
 8003514:	b90b      	cbnz	r3, 800351a <__swbuf_r+0x12>
 8003516:	f000 f9d9 	bl	80038cc <__sinit>
 800351a:	4b21      	ldr	r3, [pc, #132]	; (80035a0 <__swbuf_r+0x98>)
 800351c:	429c      	cmp	r4, r3
 800351e:	d12b      	bne.n	8003578 <__swbuf_r+0x70>
 8003520:	686c      	ldr	r4, [r5, #4]
 8003522:	69a3      	ldr	r3, [r4, #24]
 8003524:	60a3      	str	r3, [r4, #8]
 8003526:	89a3      	ldrh	r3, [r4, #12]
 8003528:	071a      	lsls	r2, r3, #28
 800352a:	d52f      	bpl.n	800358c <__swbuf_r+0x84>
 800352c:	6923      	ldr	r3, [r4, #16]
 800352e:	b36b      	cbz	r3, 800358c <__swbuf_r+0x84>
 8003530:	6923      	ldr	r3, [r4, #16]
 8003532:	6820      	ldr	r0, [r4, #0]
 8003534:	1ac0      	subs	r0, r0, r3
 8003536:	6963      	ldr	r3, [r4, #20]
 8003538:	b2f6      	uxtb	r6, r6
 800353a:	4283      	cmp	r3, r0
 800353c:	4637      	mov	r7, r6
 800353e:	dc04      	bgt.n	800354a <__swbuf_r+0x42>
 8003540:	4621      	mov	r1, r4
 8003542:	4628      	mov	r0, r5
 8003544:	f000 f92e 	bl	80037a4 <_fflush_r>
 8003548:	bb30      	cbnz	r0, 8003598 <__swbuf_r+0x90>
 800354a:	68a3      	ldr	r3, [r4, #8]
 800354c:	3b01      	subs	r3, #1
 800354e:	60a3      	str	r3, [r4, #8]
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	1c5a      	adds	r2, r3, #1
 8003554:	6022      	str	r2, [r4, #0]
 8003556:	701e      	strb	r6, [r3, #0]
 8003558:	6963      	ldr	r3, [r4, #20]
 800355a:	3001      	adds	r0, #1
 800355c:	4283      	cmp	r3, r0
 800355e:	d004      	beq.n	800356a <__swbuf_r+0x62>
 8003560:	89a3      	ldrh	r3, [r4, #12]
 8003562:	07db      	lsls	r3, r3, #31
 8003564:	d506      	bpl.n	8003574 <__swbuf_r+0x6c>
 8003566:	2e0a      	cmp	r6, #10
 8003568:	d104      	bne.n	8003574 <__swbuf_r+0x6c>
 800356a:	4621      	mov	r1, r4
 800356c:	4628      	mov	r0, r5
 800356e:	f000 f919 	bl	80037a4 <_fflush_r>
 8003572:	b988      	cbnz	r0, 8003598 <__swbuf_r+0x90>
 8003574:	4638      	mov	r0, r7
 8003576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003578:	4b0a      	ldr	r3, [pc, #40]	; (80035a4 <__swbuf_r+0x9c>)
 800357a:	429c      	cmp	r4, r3
 800357c:	d101      	bne.n	8003582 <__swbuf_r+0x7a>
 800357e:	68ac      	ldr	r4, [r5, #8]
 8003580:	e7cf      	b.n	8003522 <__swbuf_r+0x1a>
 8003582:	4b09      	ldr	r3, [pc, #36]	; (80035a8 <__swbuf_r+0xa0>)
 8003584:	429c      	cmp	r4, r3
 8003586:	bf08      	it	eq
 8003588:	68ec      	ldreq	r4, [r5, #12]
 800358a:	e7ca      	b.n	8003522 <__swbuf_r+0x1a>
 800358c:	4621      	mov	r1, r4
 800358e:	4628      	mov	r0, r5
 8003590:	f000 f80c 	bl	80035ac <__swsetup_r>
 8003594:	2800      	cmp	r0, #0
 8003596:	d0cb      	beq.n	8003530 <__swbuf_r+0x28>
 8003598:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800359c:	e7ea      	b.n	8003574 <__swbuf_r+0x6c>
 800359e:	bf00      	nop
 80035a0:	08004388 	.word	0x08004388
 80035a4:	080043a8 	.word	0x080043a8
 80035a8:	08004368 	.word	0x08004368

080035ac <__swsetup_r>:
 80035ac:	4b32      	ldr	r3, [pc, #200]	; (8003678 <__swsetup_r+0xcc>)
 80035ae:	b570      	push	{r4, r5, r6, lr}
 80035b0:	681d      	ldr	r5, [r3, #0]
 80035b2:	4606      	mov	r6, r0
 80035b4:	460c      	mov	r4, r1
 80035b6:	b125      	cbz	r5, 80035c2 <__swsetup_r+0x16>
 80035b8:	69ab      	ldr	r3, [r5, #24]
 80035ba:	b913      	cbnz	r3, 80035c2 <__swsetup_r+0x16>
 80035bc:	4628      	mov	r0, r5
 80035be:	f000 f985 	bl	80038cc <__sinit>
 80035c2:	4b2e      	ldr	r3, [pc, #184]	; (800367c <__swsetup_r+0xd0>)
 80035c4:	429c      	cmp	r4, r3
 80035c6:	d10f      	bne.n	80035e8 <__swsetup_r+0x3c>
 80035c8:	686c      	ldr	r4, [r5, #4]
 80035ca:	89a3      	ldrh	r3, [r4, #12]
 80035cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80035d0:	0719      	lsls	r1, r3, #28
 80035d2:	d42c      	bmi.n	800362e <__swsetup_r+0x82>
 80035d4:	06dd      	lsls	r5, r3, #27
 80035d6:	d411      	bmi.n	80035fc <__swsetup_r+0x50>
 80035d8:	2309      	movs	r3, #9
 80035da:	6033      	str	r3, [r6, #0]
 80035dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80035e0:	81a3      	strh	r3, [r4, #12]
 80035e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035e6:	e03e      	b.n	8003666 <__swsetup_r+0xba>
 80035e8:	4b25      	ldr	r3, [pc, #148]	; (8003680 <__swsetup_r+0xd4>)
 80035ea:	429c      	cmp	r4, r3
 80035ec:	d101      	bne.n	80035f2 <__swsetup_r+0x46>
 80035ee:	68ac      	ldr	r4, [r5, #8]
 80035f0:	e7eb      	b.n	80035ca <__swsetup_r+0x1e>
 80035f2:	4b24      	ldr	r3, [pc, #144]	; (8003684 <__swsetup_r+0xd8>)
 80035f4:	429c      	cmp	r4, r3
 80035f6:	bf08      	it	eq
 80035f8:	68ec      	ldreq	r4, [r5, #12]
 80035fa:	e7e6      	b.n	80035ca <__swsetup_r+0x1e>
 80035fc:	0758      	lsls	r0, r3, #29
 80035fe:	d512      	bpl.n	8003626 <__swsetup_r+0x7a>
 8003600:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003602:	b141      	cbz	r1, 8003616 <__swsetup_r+0x6a>
 8003604:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003608:	4299      	cmp	r1, r3
 800360a:	d002      	beq.n	8003612 <__swsetup_r+0x66>
 800360c:	4630      	mov	r0, r6
 800360e:	f7ff f9c1 	bl	8002994 <_free_r>
 8003612:	2300      	movs	r3, #0
 8003614:	6363      	str	r3, [r4, #52]	; 0x34
 8003616:	89a3      	ldrh	r3, [r4, #12]
 8003618:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800361c:	81a3      	strh	r3, [r4, #12]
 800361e:	2300      	movs	r3, #0
 8003620:	6063      	str	r3, [r4, #4]
 8003622:	6923      	ldr	r3, [r4, #16]
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	89a3      	ldrh	r3, [r4, #12]
 8003628:	f043 0308 	orr.w	r3, r3, #8
 800362c:	81a3      	strh	r3, [r4, #12]
 800362e:	6923      	ldr	r3, [r4, #16]
 8003630:	b94b      	cbnz	r3, 8003646 <__swsetup_r+0x9a>
 8003632:	89a3      	ldrh	r3, [r4, #12]
 8003634:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003638:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800363c:	d003      	beq.n	8003646 <__swsetup_r+0x9a>
 800363e:	4621      	mov	r1, r4
 8003640:	4630      	mov	r0, r6
 8003642:	f000 fa07 	bl	8003a54 <__smakebuf_r>
 8003646:	89a0      	ldrh	r0, [r4, #12]
 8003648:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800364c:	f010 0301 	ands.w	r3, r0, #1
 8003650:	d00a      	beq.n	8003668 <__swsetup_r+0xbc>
 8003652:	2300      	movs	r3, #0
 8003654:	60a3      	str	r3, [r4, #8]
 8003656:	6963      	ldr	r3, [r4, #20]
 8003658:	425b      	negs	r3, r3
 800365a:	61a3      	str	r3, [r4, #24]
 800365c:	6923      	ldr	r3, [r4, #16]
 800365e:	b943      	cbnz	r3, 8003672 <__swsetup_r+0xc6>
 8003660:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003664:	d1ba      	bne.n	80035dc <__swsetup_r+0x30>
 8003666:	bd70      	pop	{r4, r5, r6, pc}
 8003668:	0781      	lsls	r1, r0, #30
 800366a:	bf58      	it	pl
 800366c:	6963      	ldrpl	r3, [r4, #20]
 800366e:	60a3      	str	r3, [r4, #8]
 8003670:	e7f4      	b.n	800365c <__swsetup_r+0xb0>
 8003672:	2000      	movs	r0, #0
 8003674:	e7f7      	b.n	8003666 <__swsetup_r+0xba>
 8003676:	bf00      	nop
 8003678:	2000002c 	.word	0x2000002c
 800367c:	08004388 	.word	0x08004388
 8003680:	080043a8 	.word	0x080043a8
 8003684:	08004368 	.word	0x08004368

08003688 <abort>:
 8003688:	b508      	push	{r3, lr}
 800368a:	2006      	movs	r0, #6
 800368c:	f000 fc00 	bl	8003e90 <raise>
 8003690:	2001      	movs	r0, #1
 8003692:	f7fd fbdd 	bl	8000e50 <_exit>
	...

08003698 <__sflush_r>:
 8003698:	898a      	ldrh	r2, [r1, #12]
 800369a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369e:	4605      	mov	r5, r0
 80036a0:	0710      	lsls	r0, r2, #28
 80036a2:	460c      	mov	r4, r1
 80036a4:	d458      	bmi.n	8003758 <__sflush_r+0xc0>
 80036a6:	684b      	ldr	r3, [r1, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	dc05      	bgt.n	80036b8 <__sflush_r+0x20>
 80036ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	dc02      	bgt.n	80036b8 <__sflush_r+0x20>
 80036b2:	2000      	movs	r0, #0
 80036b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036ba:	2e00      	cmp	r6, #0
 80036bc:	d0f9      	beq.n	80036b2 <__sflush_r+0x1a>
 80036be:	2300      	movs	r3, #0
 80036c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036c4:	682f      	ldr	r7, [r5, #0]
 80036c6:	602b      	str	r3, [r5, #0]
 80036c8:	d032      	beq.n	8003730 <__sflush_r+0x98>
 80036ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	075a      	lsls	r2, r3, #29
 80036d0:	d505      	bpl.n	80036de <__sflush_r+0x46>
 80036d2:	6863      	ldr	r3, [r4, #4]
 80036d4:	1ac0      	subs	r0, r0, r3
 80036d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036d8:	b10b      	cbz	r3, 80036de <__sflush_r+0x46>
 80036da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036dc:	1ac0      	subs	r0, r0, r3
 80036de:	2300      	movs	r3, #0
 80036e0:	4602      	mov	r2, r0
 80036e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036e4:	6a21      	ldr	r1, [r4, #32]
 80036e6:	4628      	mov	r0, r5
 80036e8:	47b0      	blx	r6
 80036ea:	1c43      	adds	r3, r0, #1
 80036ec:	89a3      	ldrh	r3, [r4, #12]
 80036ee:	d106      	bne.n	80036fe <__sflush_r+0x66>
 80036f0:	6829      	ldr	r1, [r5, #0]
 80036f2:	291d      	cmp	r1, #29
 80036f4:	d82c      	bhi.n	8003750 <__sflush_r+0xb8>
 80036f6:	4a2a      	ldr	r2, [pc, #168]	; (80037a0 <__sflush_r+0x108>)
 80036f8:	40ca      	lsrs	r2, r1
 80036fa:	07d6      	lsls	r6, r2, #31
 80036fc:	d528      	bpl.n	8003750 <__sflush_r+0xb8>
 80036fe:	2200      	movs	r2, #0
 8003700:	6062      	str	r2, [r4, #4]
 8003702:	04d9      	lsls	r1, r3, #19
 8003704:	6922      	ldr	r2, [r4, #16]
 8003706:	6022      	str	r2, [r4, #0]
 8003708:	d504      	bpl.n	8003714 <__sflush_r+0x7c>
 800370a:	1c42      	adds	r2, r0, #1
 800370c:	d101      	bne.n	8003712 <__sflush_r+0x7a>
 800370e:	682b      	ldr	r3, [r5, #0]
 8003710:	b903      	cbnz	r3, 8003714 <__sflush_r+0x7c>
 8003712:	6560      	str	r0, [r4, #84]	; 0x54
 8003714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003716:	602f      	str	r7, [r5, #0]
 8003718:	2900      	cmp	r1, #0
 800371a:	d0ca      	beq.n	80036b2 <__sflush_r+0x1a>
 800371c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003720:	4299      	cmp	r1, r3
 8003722:	d002      	beq.n	800372a <__sflush_r+0x92>
 8003724:	4628      	mov	r0, r5
 8003726:	f7ff f935 	bl	8002994 <_free_r>
 800372a:	2000      	movs	r0, #0
 800372c:	6360      	str	r0, [r4, #52]	; 0x34
 800372e:	e7c1      	b.n	80036b4 <__sflush_r+0x1c>
 8003730:	6a21      	ldr	r1, [r4, #32]
 8003732:	2301      	movs	r3, #1
 8003734:	4628      	mov	r0, r5
 8003736:	47b0      	blx	r6
 8003738:	1c41      	adds	r1, r0, #1
 800373a:	d1c7      	bne.n	80036cc <__sflush_r+0x34>
 800373c:	682b      	ldr	r3, [r5, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0c4      	beq.n	80036cc <__sflush_r+0x34>
 8003742:	2b1d      	cmp	r3, #29
 8003744:	d001      	beq.n	800374a <__sflush_r+0xb2>
 8003746:	2b16      	cmp	r3, #22
 8003748:	d101      	bne.n	800374e <__sflush_r+0xb6>
 800374a:	602f      	str	r7, [r5, #0]
 800374c:	e7b1      	b.n	80036b2 <__sflush_r+0x1a>
 800374e:	89a3      	ldrh	r3, [r4, #12]
 8003750:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003754:	81a3      	strh	r3, [r4, #12]
 8003756:	e7ad      	b.n	80036b4 <__sflush_r+0x1c>
 8003758:	690f      	ldr	r7, [r1, #16]
 800375a:	2f00      	cmp	r7, #0
 800375c:	d0a9      	beq.n	80036b2 <__sflush_r+0x1a>
 800375e:	0793      	lsls	r3, r2, #30
 8003760:	680e      	ldr	r6, [r1, #0]
 8003762:	bf08      	it	eq
 8003764:	694b      	ldreq	r3, [r1, #20]
 8003766:	600f      	str	r7, [r1, #0]
 8003768:	bf18      	it	ne
 800376a:	2300      	movne	r3, #0
 800376c:	eba6 0807 	sub.w	r8, r6, r7
 8003770:	608b      	str	r3, [r1, #8]
 8003772:	f1b8 0f00 	cmp.w	r8, #0
 8003776:	dd9c      	ble.n	80036b2 <__sflush_r+0x1a>
 8003778:	6a21      	ldr	r1, [r4, #32]
 800377a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800377c:	4643      	mov	r3, r8
 800377e:	463a      	mov	r2, r7
 8003780:	4628      	mov	r0, r5
 8003782:	47b0      	blx	r6
 8003784:	2800      	cmp	r0, #0
 8003786:	dc06      	bgt.n	8003796 <__sflush_r+0xfe>
 8003788:	89a3      	ldrh	r3, [r4, #12]
 800378a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800378e:	81a3      	strh	r3, [r4, #12]
 8003790:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003794:	e78e      	b.n	80036b4 <__sflush_r+0x1c>
 8003796:	4407      	add	r7, r0
 8003798:	eba8 0800 	sub.w	r8, r8, r0
 800379c:	e7e9      	b.n	8003772 <__sflush_r+0xda>
 800379e:	bf00      	nop
 80037a0:	20400001 	.word	0x20400001

080037a4 <_fflush_r>:
 80037a4:	b538      	push	{r3, r4, r5, lr}
 80037a6:	690b      	ldr	r3, [r1, #16]
 80037a8:	4605      	mov	r5, r0
 80037aa:	460c      	mov	r4, r1
 80037ac:	b913      	cbnz	r3, 80037b4 <_fflush_r+0x10>
 80037ae:	2500      	movs	r5, #0
 80037b0:	4628      	mov	r0, r5
 80037b2:	bd38      	pop	{r3, r4, r5, pc}
 80037b4:	b118      	cbz	r0, 80037be <_fflush_r+0x1a>
 80037b6:	6983      	ldr	r3, [r0, #24]
 80037b8:	b90b      	cbnz	r3, 80037be <_fflush_r+0x1a>
 80037ba:	f000 f887 	bl	80038cc <__sinit>
 80037be:	4b14      	ldr	r3, [pc, #80]	; (8003810 <_fflush_r+0x6c>)
 80037c0:	429c      	cmp	r4, r3
 80037c2:	d11b      	bne.n	80037fc <_fflush_r+0x58>
 80037c4:	686c      	ldr	r4, [r5, #4]
 80037c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d0ef      	beq.n	80037ae <_fflush_r+0xa>
 80037ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80037d0:	07d0      	lsls	r0, r2, #31
 80037d2:	d404      	bmi.n	80037de <_fflush_r+0x3a>
 80037d4:	0599      	lsls	r1, r3, #22
 80037d6:	d402      	bmi.n	80037de <_fflush_r+0x3a>
 80037d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037da:	f000 f915 	bl	8003a08 <__retarget_lock_acquire_recursive>
 80037de:	4628      	mov	r0, r5
 80037e0:	4621      	mov	r1, r4
 80037e2:	f7ff ff59 	bl	8003698 <__sflush_r>
 80037e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80037e8:	07da      	lsls	r2, r3, #31
 80037ea:	4605      	mov	r5, r0
 80037ec:	d4e0      	bmi.n	80037b0 <_fflush_r+0xc>
 80037ee:	89a3      	ldrh	r3, [r4, #12]
 80037f0:	059b      	lsls	r3, r3, #22
 80037f2:	d4dd      	bmi.n	80037b0 <_fflush_r+0xc>
 80037f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80037f6:	f000 f908 	bl	8003a0a <__retarget_lock_release_recursive>
 80037fa:	e7d9      	b.n	80037b0 <_fflush_r+0xc>
 80037fc:	4b05      	ldr	r3, [pc, #20]	; (8003814 <_fflush_r+0x70>)
 80037fe:	429c      	cmp	r4, r3
 8003800:	d101      	bne.n	8003806 <_fflush_r+0x62>
 8003802:	68ac      	ldr	r4, [r5, #8]
 8003804:	e7df      	b.n	80037c6 <_fflush_r+0x22>
 8003806:	4b04      	ldr	r3, [pc, #16]	; (8003818 <_fflush_r+0x74>)
 8003808:	429c      	cmp	r4, r3
 800380a:	bf08      	it	eq
 800380c:	68ec      	ldreq	r4, [r5, #12]
 800380e:	e7da      	b.n	80037c6 <_fflush_r+0x22>
 8003810:	08004388 	.word	0x08004388
 8003814:	080043a8 	.word	0x080043a8
 8003818:	08004368 	.word	0x08004368

0800381c <std>:
 800381c:	2300      	movs	r3, #0
 800381e:	b510      	push	{r4, lr}
 8003820:	4604      	mov	r4, r0
 8003822:	e9c0 3300 	strd	r3, r3, [r0]
 8003826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800382a:	6083      	str	r3, [r0, #8]
 800382c:	8181      	strh	r1, [r0, #12]
 800382e:	6643      	str	r3, [r0, #100]	; 0x64
 8003830:	81c2      	strh	r2, [r0, #14]
 8003832:	6183      	str	r3, [r0, #24]
 8003834:	4619      	mov	r1, r3
 8003836:	2208      	movs	r2, #8
 8003838:	305c      	adds	r0, #92	; 0x5c
 800383a:	f7ff f8a3 	bl	8002984 <memset>
 800383e:	4b05      	ldr	r3, [pc, #20]	; (8003854 <std+0x38>)
 8003840:	6263      	str	r3, [r4, #36]	; 0x24
 8003842:	4b05      	ldr	r3, [pc, #20]	; (8003858 <std+0x3c>)
 8003844:	62a3      	str	r3, [r4, #40]	; 0x28
 8003846:	4b05      	ldr	r3, [pc, #20]	; (800385c <std+0x40>)
 8003848:	62e3      	str	r3, [r4, #44]	; 0x2c
 800384a:	4b05      	ldr	r3, [pc, #20]	; (8003860 <std+0x44>)
 800384c:	6224      	str	r4, [r4, #32]
 800384e:	6323      	str	r3, [r4, #48]	; 0x30
 8003850:	bd10      	pop	{r4, pc}
 8003852:	bf00      	nop
 8003854:	08003ec9 	.word	0x08003ec9
 8003858:	08003eeb 	.word	0x08003eeb
 800385c:	08003f23 	.word	0x08003f23
 8003860:	08003f47 	.word	0x08003f47

08003864 <_cleanup_r>:
 8003864:	4901      	ldr	r1, [pc, #4]	; (800386c <_cleanup_r+0x8>)
 8003866:	f000 b8af 	b.w	80039c8 <_fwalk_reent>
 800386a:	bf00      	nop
 800386c:	080037a5 	.word	0x080037a5

08003870 <__sfmoreglue>:
 8003870:	b570      	push	{r4, r5, r6, lr}
 8003872:	1e4a      	subs	r2, r1, #1
 8003874:	2568      	movs	r5, #104	; 0x68
 8003876:	4355      	muls	r5, r2
 8003878:	460e      	mov	r6, r1
 800387a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800387e:	f7ff f8d9 	bl	8002a34 <_malloc_r>
 8003882:	4604      	mov	r4, r0
 8003884:	b140      	cbz	r0, 8003898 <__sfmoreglue+0x28>
 8003886:	2100      	movs	r1, #0
 8003888:	e9c0 1600 	strd	r1, r6, [r0]
 800388c:	300c      	adds	r0, #12
 800388e:	60a0      	str	r0, [r4, #8]
 8003890:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003894:	f7ff f876 	bl	8002984 <memset>
 8003898:	4620      	mov	r0, r4
 800389a:	bd70      	pop	{r4, r5, r6, pc}

0800389c <__sfp_lock_acquire>:
 800389c:	4801      	ldr	r0, [pc, #4]	; (80038a4 <__sfp_lock_acquire+0x8>)
 800389e:	f000 b8b3 	b.w	8003a08 <__retarget_lock_acquire_recursive>
 80038a2:	bf00      	nop
 80038a4:	20000150 	.word	0x20000150

080038a8 <__sfp_lock_release>:
 80038a8:	4801      	ldr	r0, [pc, #4]	; (80038b0 <__sfp_lock_release+0x8>)
 80038aa:	f000 b8ae 	b.w	8003a0a <__retarget_lock_release_recursive>
 80038ae:	bf00      	nop
 80038b0:	20000150 	.word	0x20000150

080038b4 <__sinit_lock_acquire>:
 80038b4:	4801      	ldr	r0, [pc, #4]	; (80038bc <__sinit_lock_acquire+0x8>)
 80038b6:	f000 b8a7 	b.w	8003a08 <__retarget_lock_acquire_recursive>
 80038ba:	bf00      	nop
 80038bc:	2000014b 	.word	0x2000014b

080038c0 <__sinit_lock_release>:
 80038c0:	4801      	ldr	r0, [pc, #4]	; (80038c8 <__sinit_lock_release+0x8>)
 80038c2:	f000 b8a2 	b.w	8003a0a <__retarget_lock_release_recursive>
 80038c6:	bf00      	nop
 80038c8:	2000014b 	.word	0x2000014b

080038cc <__sinit>:
 80038cc:	b510      	push	{r4, lr}
 80038ce:	4604      	mov	r4, r0
 80038d0:	f7ff fff0 	bl	80038b4 <__sinit_lock_acquire>
 80038d4:	69a3      	ldr	r3, [r4, #24]
 80038d6:	b11b      	cbz	r3, 80038e0 <__sinit+0x14>
 80038d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80038dc:	f7ff bff0 	b.w	80038c0 <__sinit_lock_release>
 80038e0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80038e4:	6523      	str	r3, [r4, #80]	; 0x50
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <__sinit+0x68>)
 80038e8:	4a13      	ldr	r2, [pc, #76]	; (8003938 <__sinit+0x6c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	62a2      	str	r2, [r4, #40]	; 0x28
 80038ee:	42a3      	cmp	r3, r4
 80038f0:	bf04      	itt	eq
 80038f2:	2301      	moveq	r3, #1
 80038f4:	61a3      	streq	r3, [r4, #24]
 80038f6:	4620      	mov	r0, r4
 80038f8:	f000 f820 	bl	800393c <__sfp>
 80038fc:	6060      	str	r0, [r4, #4]
 80038fe:	4620      	mov	r0, r4
 8003900:	f000 f81c 	bl	800393c <__sfp>
 8003904:	60a0      	str	r0, [r4, #8]
 8003906:	4620      	mov	r0, r4
 8003908:	f000 f818 	bl	800393c <__sfp>
 800390c:	2200      	movs	r2, #0
 800390e:	60e0      	str	r0, [r4, #12]
 8003910:	2104      	movs	r1, #4
 8003912:	6860      	ldr	r0, [r4, #4]
 8003914:	f7ff ff82 	bl	800381c <std>
 8003918:	68a0      	ldr	r0, [r4, #8]
 800391a:	2201      	movs	r2, #1
 800391c:	2109      	movs	r1, #9
 800391e:	f7ff ff7d 	bl	800381c <std>
 8003922:	68e0      	ldr	r0, [r4, #12]
 8003924:	2202      	movs	r2, #2
 8003926:	2112      	movs	r1, #18
 8003928:	f7ff ff78 	bl	800381c <std>
 800392c:	2301      	movs	r3, #1
 800392e:	61a3      	str	r3, [r4, #24]
 8003930:	e7d2      	b.n	80038d8 <__sinit+0xc>
 8003932:	bf00      	nop
 8003934:	08004190 	.word	0x08004190
 8003938:	08003865 	.word	0x08003865

0800393c <__sfp>:
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	4607      	mov	r7, r0
 8003940:	f7ff ffac 	bl	800389c <__sfp_lock_acquire>
 8003944:	4b1e      	ldr	r3, [pc, #120]	; (80039c0 <__sfp+0x84>)
 8003946:	681e      	ldr	r6, [r3, #0]
 8003948:	69b3      	ldr	r3, [r6, #24]
 800394a:	b913      	cbnz	r3, 8003952 <__sfp+0x16>
 800394c:	4630      	mov	r0, r6
 800394e:	f7ff ffbd 	bl	80038cc <__sinit>
 8003952:	3648      	adds	r6, #72	; 0x48
 8003954:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003958:	3b01      	subs	r3, #1
 800395a:	d503      	bpl.n	8003964 <__sfp+0x28>
 800395c:	6833      	ldr	r3, [r6, #0]
 800395e:	b30b      	cbz	r3, 80039a4 <__sfp+0x68>
 8003960:	6836      	ldr	r6, [r6, #0]
 8003962:	e7f7      	b.n	8003954 <__sfp+0x18>
 8003964:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003968:	b9d5      	cbnz	r5, 80039a0 <__sfp+0x64>
 800396a:	4b16      	ldr	r3, [pc, #88]	; (80039c4 <__sfp+0x88>)
 800396c:	60e3      	str	r3, [r4, #12]
 800396e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003972:	6665      	str	r5, [r4, #100]	; 0x64
 8003974:	f000 f847 	bl	8003a06 <__retarget_lock_init_recursive>
 8003978:	f7ff ff96 	bl	80038a8 <__sfp_lock_release>
 800397c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003980:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003984:	6025      	str	r5, [r4, #0]
 8003986:	61a5      	str	r5, [r4, #24]
 8003988:	2208      	movs	r2, #8
 800398a:	4629      	mov	r1, r5
 800398c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003990:	f7fe fff8 	bl	8002984 <memset>
 8003994:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003998:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800399c:	4620      	mov	r0, r4
 800399e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039a0:	3468      	adds	r4, #104	; 0x68
 80039a2:	e7d9      	b.n	8003958 <__sfp+0x1c>
 80039a4:	2104      	movs	r1, #4
 80039a6:	4638      	mov	r0, r7
 80039a8:	f7ff ff62 	bl	8003870 <__sfmoreglue>
 80039ac:	4604      	mov	r4, r0
 80039ae:	6030      	str	r0, [r6, #0]
 80039b0:	2800      	cmp	r0, #0
 80039b2:	d1d5      	bne.n	8003960 <__sfp+0x24>
 80039b4:	f7ff ff78 	bl	80038a8 <__sfp_lock_release>
 80039b8:	230c      	movs	r3, #12
 80039ba:	603b      	str	r3, [r7, #0]
 80039bc:	e7ee      	b.n	800399c <__sfp+0x60>
 80039be:	bf00      	nop
 80039c0:	08004190 	.word	0x08004190
 80039c4:	ffff0001 	.word	0xffff0001

080039c8 <_fwalk_reent>:
 80039c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80039cc:	4606      	mov	r6, r0
 80039ce:	4688      	mov	r8, r1
 80039d0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80039d4:	2700      	movs	r7, #0
 80039d6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80039da:	f1b9 0901 	subs.w	r9, r9, #1
 80039de:	d505      	bpl.n	80039ec <_fwalk_reent+0x24>
 80039e0:	6824      	ldr	r4, [r4, #0]
 80039e2:	2c00      	cmp	r4, #0
 80039e4:	d1f7      	bne.n	80039d6 <_fwalk_reent+0xe>
 80039e6:	4638      	mov	r0, r7
 80039e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80039ec:	89ab      	ldrh	r3, [r5, #12]
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d907      	bls.n	8003a02 <_fwalk_reent+0x3a>
 80039f2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80039f6:	3301      	adds	r3, #1
 80039f8:	d003      	beq.n	8003a02 <_fwalk_reent+0x3a>
 80039fa:	4629      	mov	r1, r5
 80039fc:	4630      	mov	r0, r6
 80039fe:	47c0      	blx	r8
 8003a00:	4307      	orrs	r7, r0
 8003a02:	3568      	adds	r5, #104	; 0x68
 8003a04:	e7e9      	b.n	80039da <_fwalk_reent+0x12>

08003a06 <__retarget_lock_init_recursive>:
 8003a06:	4770      	bx	lr

08003a08 <__retarget_lock_acquire_recursive>:
 8003a08:	4770      	bx	lr

08003a0a <__retarget_lock_release_recursive>:
 8003a0a:	4770      	bx	lr

08003a0c <__swhatbuf_r>:
 8003a0c:	b570      	push	{r4, r5, r6, lr}
 8003a0e:	460e      	mov	r6, r1
 8003a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a14:	2900      	cmp	r1, #0
 8003a16:	b096      	sub	sp, #88	; 0x58
 8003a18:	4614      	mov	r4, r2
 8003a1a:	461d      	mov	r5, r3
 8003a1c:	da07      	bge.n	8003a2e <__swhatbuf_r+0x22>
 8003a1e:	2300      	movs	r3, #0
 8003a20:	602b      	str	r3, [r5, #0]
 8003a22:	89b3      	ldrh	r3, [r6, #12]
 8003a24:	061a      	lsls	r2, r3, #24
 8003a26:	d410      	bmi.n	8003a4a <__swhatbuf_r+0x3e>
 8003a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a2c:	e00e      	b.n	8003a4c <__swhatbuf_r+0x40>
 8003a2e:	466a      	mov	r2, sp
 8003a30:	f000 fab0 	bl	8003f94 <_fstat_r>
 8003a34:	2800      	cmp	r0, #0
 8003a36:	dbf2      	blt.n	8003a1e <__swhatbuf_r+0x12>
 8003a38:	9a01      	ldr	r2, [sp, #4]
 8003a3a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003a3e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003a42:	425a      	negs	r2, r3
 8003a44:	415a      	adcs	r2, r3
 8003a46:	602a      	str	r2, [r5, #0]
 8003a48:	e7ee      	b.n	8003a28 <__swhatbuf_r+0x1c>
 8003a4a:	2340      	movs	r3, #64	; 0x40
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	6023      	str	r3, [r4, #0]
 8003a50:	b016      	add	sp, #88	; 0x58
 8003a52:	bd70      	pop	{r4, r5, r6, pc}

08003a54 <__smakebuf_r>:
 8003a54:	898b      	ldrh	r3, [r1, #12]
 8003a56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003a58:	079d      	lsls	r5, r3, #30
 8003a5a:	4606      	mov	r6, r0
 8003a5c:	460c      	mov	r4, r1
 8003a5e:	d507      	bpl.n	8003a70 <__smakebuf_r+0x1c>
 8003a60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003a64:	6023      	str	r3, [r4, #0]
 8003a66:	6123      	str	r3, [r4, #16]
 8003a68:	2301      	movs	r3, #1
 8003a6a:	6163      	str	r3, [r4, #20]
 8003a6c:	b002      	add	sp, #8
 8003a6e:	bd70      	pop	{r4, r5, r6, pc}
 8003a70:	ab01      	add	r3, sp, #4
 8003a72:	466a      	mov	r2, sp
 8003a74:	f7ff ffca 	bl	8003a0c <__swhatbuf_r>
 8003a78:	9900      	ldr	r1, [sp, #0]
 8003a7a:	4605      	mov	r5, r0
 8003a7c:	4630      	mov	r0, r6
 8003a7e:	f7fe ffd9 	bl	8002a34 <_malloc_r>
 8003a82:	b948      	cbnz	r0, 8003a98 <__smakebuf_r+0x44>
 8003a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a88:	059a      	lsls	r2, r3, #22
 8003a8a:	d4ef      	bmi.n	8003a6c <__smakebuf_r+0x18>
 8003a8c:	f023 0303 	bic.w	r3, r3, #3
 8003a90:	f043 0302 	orr.w	r3, r3, #2
 8003a94:	81a3      	strh	r3, [r4, #12]
 8003a96:	e7e3      	b.n	8003a60 <__smakebuf_r+0xc>
 8003a98:	4b0d      	ldr	r3, [pc, #52]	; (8003ad0 <__smakebuf_r+0x7c>)
 8003a9a:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a9c:	89a3      	ldrh	r3, [r4, #12]
 8003a9e:	6020      	str	r0, [r4, #0]
 8003aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa4:	81a3      	strh	r3, [r4, #12]
 8003aa6:	9b00      	ldr	r3, [sp, #0]
 8003aa8:	6163      	str	r3, [r4, #20]
 8003aaa:	9b01      	ldr	r3, [sp, #4]
 8003aac:	6120      	str	r0, [r4, #16]
 8003aae:	b15b      	cbz	r3, 8003ac8 <__smakebuf_r+0x74>
 8003ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	f000 fa7f 	bl	8003fb8 <_isatty_r>
 8003aba:	b128      	cbz	r0, 8003ac8 <__smakebuf_r+0x74>
 8003abc:	89a3      	ldrh	r3, [r4, #12]
 8003abe:	f023 0303 	bic.w	r3, r3, #3
 8003ac2:	f043 0301 	orr.w	r3, r3, #1
 8003ac6:	81a3      	strh	r3, [r4, #12]
 8003ac8:	89a0      	ldrh	r0, [r4, #12]
 8003aca:	4305      	orrs	r5, r0
 8003acc:	81a5      	strh	r5, [r4, #12]
 8003ace:	e7cd      	b.n	8003a6c <__smakebuf_r+0x18>
 8003ad0:	08003865 	.word	0x08003865

08003ad4 <memcpy>:
 8003ad4:	440a      	add	r2, r1
 8003ad6:	4291      	cmp	r1, r2
 8003ad8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8003adc:	d100      	bne.n	8003ae0 <memcpy+0xc>
 8003ade:	4770      	bx	lr
 8003ae0:	b510      	push	{r4, lr}
 8003ae2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ae6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003aea:	4291      	cmp	r1, r2
 8003aec:	d1f9      	bne.n	8003ae2 <memcpy+0xe>
 8003aee:	bd10      	pop	{r4, pc}

08003af0 <memmove>:
 8003af0:	4288      	cmp	r0, r1
 8003af2:	b510      	push	{r4, lr}
 8003af4:	eb01 0402 	add.w	r4, r1, r2
 8003af8:	d902      	bls.n	8003b00 <memmove+0x10>
 8003afa:	4284      	cmp	r4, r0
 8003afc:	4623      	mov	r3, r4
 8003afe:	d807      	bhi.n	8003b10 <memmove+0x20>
 8003b00:	1e43      	subs	r3, r0, #1
 8003b02:	42a1      	cmp	r1, r4
 8003b04:	d008      	beq.n	8003b18 <memmove+0x28>
 8003b06:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003b0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003b0e:	e7f8      	b.n	8003b02 <memmove+0x12>
 8003b10:	4402      	add	r2, r0
 8003b12:	4601      	mov	r1, r0
 8003b14:	428a      	cmp	r2, r1
 8003b16:	d100      	bne.n	8003b1a <memmove+0x2a>
 8003b18:	bd10      	pop	{r4, pc}
 8003b1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003b22:	e7f7      	b.n	8003b14 <memmove+0x24>

08003b24 <__malloc_lock>:
 8003b24:	4801      	ldr	r0, [pc, #4]	; (8003b2c <__malloc_lock+0x8>)
 8003b26:	f7ff bf6f 	b.w	8003a08 <__retarget_lock_acquire_recursive>
 8003b2a:	bf00      	nop
 8003b2c:	2000014c 	.word	0x2000014c

08003b30 <__malloc_unlock>:
 8003b30:	4801      	ldr	r0, [pc, #4]	; (8003b38 <__malloc_unlock+0x8>)
 8003b32:	f7ff bf6a 	b.w	8003a0a <__retarget_lock_release_recursive>
 8003b36:	bf00      	nop
 8003b38:	2000014c 	.word	0x2000014c

08003b3c <_realloc_r>:
 8003b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b3e:	4607      	mov	r7, r0
 8003b40:	4614      	mov	r4, r2
 8003b42:	460e      	mov	r6, r1
 8003b44:	b921      	cbnz	r1, 8003b50 <_realloc_r+0x14>
 8003b46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	f7fe bf72 	b.w	8002a34 <_malloc_r>
 8003b50:	b922      	cbnz	r2, 8003b5c <_realloc_r+0x20>
 8003b52:	f7fe ff1f 	bl	8002994 <_free_r>
 8003b56:	4625      	mov	r5, r4
 8003b58:	4628      	mov	r0, r5
 8003b5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b5c:	f000 fa4e 	bl	8003ffc <_malloc_usable_size_r>
 8003b60:	42a0      	cmp	r0, r4
 8003b62:	d20f      	bcs.n	8003b84 <_realloc_r+0x48>
 8003b64:	4621      	mov	r1, r4
 8003b66:	4638      	mov	r0, r7
 8003b68:	f7fe ff64 	bl	8002a34 <_malloc_r>
 8003b6c:	4605      	mov	r5, r0
 8003b6e:	2800      	cmp	r0, #0
 8003b70:	d0f2      	beq.n	8003b58 <_realloc_r+0x1c>
 8003b72:	4631      	mov	r1, r6
 8003b74:	4622      	mov	r2, r4
 8003b76:	f7ff ffad 	bl	8003ad4 <memcpy>
 8003b7a:	4631      	mov	r1, r6
 8003b7c:	4638      	mov	r0, r7
 8003b7e:	f7fe ff09 	bl	8002994 <_free_r>
 8003b82:	e7e9      	b.n	8003b58 <_realloc_r+0x1c>
 8003b84:	4635      	mov	r5, r6
 8003b86:	e7e7      	b.n	8003b58 <_realloc_r+0x1c>

08003b88 <__ssputs_r>:
 8003b88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b8c:	688e      	ldr	r6, [r1, #8]
 8003b8e:	429e      	cmp	r6, r3
 8003b90:	4682      	mov	sl, r0
 8003b92:	460c      	mov	r4, r1
 8003b94:	4690      	mov	r8, r2
 8003b96:	461f      	mov	r7, r3
 8003b98:	d838      	bhi.n	8003c0c <__ssputs_r+0x84>
 8003b9a:	898a      	ldrh	r2, [r1, #12]
 8003b9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003ba0:	d032      	beq.n	8003c08 <__ssputs_r+0x80>
 8003ba2:	6825      	ldr	r5, [r4, #0]
 8003ba4:	6909      	ldr	r1, [r1, #16]
 8003ba6:	eba5 0901 	sub.w	r9, r5, r1
 8003baa:	6965      	ldr	r5, [r4, #20]
 8003bac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003bb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	444b      	add	r3, r9
 8003bb8:	106d      	asrs	r5, r5, #1
 8003bba:	429d      	cmp	r5, r3
 8003bbc:	bf38      	it	cc
 8003bbe:	461d      	movcc	r5, r3
 8003bc0:	0553      	lsls	r3, r2, #21
 8003bc2:	d531      	bpl.n	8003c28 <__ssputs_r+0xa0>
 8003bc4:	4629      	mov	r1, r5
 8003bc6:	f7fe ff35 	bl	8002a34 <_malloc_r>
 8003bca:	4606      	mov	r6, r0
 8003bcc:	b950      	cbnz	r0, 8003be4 <__ssputs_r+0x5c>
 8003bce:	230c      	movs	r3, #12
 8003bd0:	f8ca 3000 	str.w	r3, [sl]
 8003bd4:	89a3      	ldrh	r3, [r4, #12]
 8003bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003bda:	81a3      	strh	r3, [r4, #12]
 8003bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003be0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003be4:	6921      	ldr	r1, [r4, #16]
 8003be6:	464a      	mov	r2, r9
 8003be8:	f7ff ff74 	bl	8003ad4 <memcpy>
 8003bec:	89a3      	ldrh	r3, [r4, #12]
 8003bee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf6:	81a3      	strh	r3, [r4, #12]
 8003bf8:	6126      	str	r6, [r4, #16]
 8003bfa:	6165      	str	r5, [r4, #20]
 8003bfc:	444e      	add	r6, r9
 8003bfe:	eba5 0509 	sub.w	r5, r5, r9
 8003c02:	6026      	str	r6, [r4, #0]
 8003c04:	60a5      	str	r5, [r4, #8]
 8003c06:	463e      	mov	r6, r7
 8003c08:	42be      	cmp	r6, r7
 8003c0a:	d900      	bls.n	8003c0e <__ssputs_r+0x86>
 8003c0c:	463e      	mov	r6, r7
 8003c0e:	4632      	mov	r2, r6
 8003c10:	6820      	ldr	r0, [r4, #0]
 8003c12:	4641      	mov	r1, r8
 8003c14:	f7ff ff6c 	bl	8003af0 <memmove>
 8003c18:	68a3      	ldr	r3, [r4, #8]
 8003c1a:	6822      	ldr	r2, [r4, #0]
 8003c1c:	1b9b      	subs	r3, r3, r6
 8003c1e:	4432      	add	r2, r6
 8003c20:	60a3      	str	r3, [r4, #8]
 8003c22:	6022      	str	r2, [r4, #0]
 8003c24:	2000      	movs	r0, #0
 8003c26:	e7db      	b.n	8003be0 <__ssputs_r+0x58>
 8003c28:	462a      	mov	r2, r5
 8003c2a:	f7ff ff87 	bl	8003b3c <_realloc_r>
 8003c2e:	4606      	mov	r6, r0
 8003c30:	2800      	cmp	r0, #0
 8003c32:	d1e1      	bne.n	8003bf8 <__ssputs_r+0x70>
 8003c34:	6921      	ldr	r1, [r4, #16]
 8003c36:	4650      	mov	r0, sl
 8003c38:	f7fe feac 	bl	8002994 <_free_r>
 8003c3c:	e7c7      	b.n	8003bce <__ssputs_r+0x46>
	...

08003c40 <_svfiprintf_r>:
 8003c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c44:	4698      	mov	r8, r3
 8003c46:	898b      	ldrh	r3, [r1, #12]
 8003c48:	061b      	lsls	r3, r3, #24
 8003c4a:	b09d      	sub	sp, #116	; 0x74
 8003c4c:	4607      	mov	r7, r0
 8003c4e:	460d      	mov	r5, r1
 8003c50:	4614      	mov	r4, r2
 8003c52:	d50e      	bpl.n	8003c72 <_svfiprintf_r+0x32>
 8003c54:	690b      	ldr	r3, [r1, #16]
 8003c56:	b963      	cbnz	r3, 8003c72 <_svfiprintf_r+0x32>
 8003c58:	2140      	movs	r1, #64	; 0x40
 8003c5a:	f7fe feeb 	bl	8002a34 <_malloc_r>
 8003c5e:	6028      	str	r0, [r5, #0]
 8003c60:	6128      	str	r0, [r5, #16]
 8003c62:	b920      	cbnz	r0, 8003c6e <_svfiprintf_r+0x2e>
 8003c64:	230c      	movs	r3, #12
 8003c66:	603b      	str	r3, [r7, #0]
 8003c68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003c6c:	e0d1      	b.n	8003e12 <_svfiprintf_r+0x1d2>
 8003c6e:	2340      	movs	r3, #64	; 0x40
 8003c70:	616b      	str	r3, [r5, #20]
 8003c72:	2300      	movs	r3, #0
 8003c74:	9309      	str	r3, [sp, #36]	; 0x24
 8003c76:	2320      	movs	r3, #32
 8003c78:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c7c:	f8cd 800c 	str.w	r8, [sp, #12]
 8003c80:	2330      	movs	r3, #48	; 0x30
 8003c82:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003e2c <_svfiprintf_r+0x1ec>
 8003c86:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c8a:	f04f 0901 	mov.w	r9, #1
 8003c8e:	4623      	mov	r3, r4
 8003c90:	469a      	mov	sl, r3
 8003c92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003c96:	b10a      	cbz	r2, 8003c9c <_svfiprintf_r+0x5c>
 8003c98:	2a25      	cmp	r2, #37	; 0x25
 8003c9a:	d1f9      	bne.n	8003c90 <_svfiprintf_r+0x50>
 8003c9c:	ebba 0b04 	subs.w	fp, sl, r4
 8003ca0:	d00b      	beq.n	8003cba <_svfiprintf_r+0x7a>
 8003ca2:	465b      	mov	r3, fp
 8003ca4:	4622      	mov	r2, r4
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	4638      	mov	r0, r7
 8003caa:	f7ff ff6d 	bl	8003b88 <__ssputs_r>
 8003cae:	3001      	adds	r0, #1
 8003cb0:	f000 80aa 	beq.w	8003e08 <_svfiprintf_r+0x1c8>
 8003cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003cb6:	445a      	add	r2, fp
 8003cb8:	9209      	str	r2, [sp, #36]	; 0x24
 8003cba:	f89a 3000 	ldrb.w	r3, [sl]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	f000 80a2 	beq.w	8003e08 <_svfiprintf_r+0x1c8>
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003cce:	f10a 0a01 	add.w	sl, sl, #1
 8003cd2:	9304      	str	r3, [sp, #16]
 8003cd4:	9307      	str	r3, [sp, #28]
 8003cd6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003cda:	931a      	str	r3, [sp, #104]	; 0x68
 8003cdc:	4654      	mov	r4, sl
 8003cde:	2205      	movs	r2, #5
 8003ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003ce4:	4851      	ldr	r0, [pc, #324]	; (8003e2c <_svfiprintf_r+0x1ec>)
 8003ce6:	f7fc fa9b 	bl	8000220 <memchr>
 8003cea:	9a04      	ldr	r2, [sp, #16]
 8003cec:	b9d8      	cbnz	r0, 8003d26 <_svfiprintf_r+0xe6>
 8003cee:	06d0      	lsls	r0, r2, #27
 8003cf0:	bf44      	itt	mi
 8003cf2:	2320      	movmi	r3, #32
 8003cf4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003cf8:	0711      	lsls	r1, r2, #28
 8003cfa:	bf44      	itt	mi
 8003cfc:	232b      	movmi	r3, #43	; 0x2b
 8003cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003d02:	f89a 3000 	ldrb.w	r3, [sl]
 8003d06:	2b2a      	cmp	r3, #42	; 0x2a
 8003d08:	d015      	beq.n	8003d36 <_svfiprintf_r+0xf6>
 8003d0a:	9a07      	ldr	r2, [sp, #28]
 8003d0c:	4654      	mov	r4, sl
 8003d0e:	2000      	movs	r0, #0
 8003d10:	f04f 0c0a 	mov.w	ip, #10
 8003d14:	4621      	mov	r1, r4
 8003d16:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003d1a:	3b30      	subs	r3, #48	; 0x30
 8003d1c:	2b09      	cmp	r3, #9
 8003d1e:	d94e      	bls.n	8003dbe <_svfiprintf_r+0x17e>
 8003d20:	b1b0      	cbz	r0, 8003d50 <_svfiprintf_r+0x110>
 8003d22:	9207      	str	r2, [sp, #28]
 8003d24:	e014      	b.n	8003d50 <_svfiprintf_r+0x110>
 8003d26:	eba0 0308 	sub.w	r3, r0, r8
 8003d2a:	fa09 f303 	lsl.w	r3, r9, r3
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	9304      	str	r3, [sp, #16]
 8003d32:	46a2      	mov	sl, r4
 8003d34:	e7d2      	b.n	8003cdc <_svfiprintf_r+0x9c>
 8003d36:	9b03      	ldr	r3, [sp, #12]
 8003d38:	1d19      	adds	r1, r3, #4
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	9103      	str	r1, [sp, #12]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	bfbb      	ittet	lt
 8003d42:	425b      	neglt	r3, r3
 8003d44:	f042 0202 	orrlt.w	r2, r2, #2
 8003d48:	9307      	strge	r3, [sp, #28]
 8003d4a:	9307      	strlt	r3, [sp, #28]
 8003d4c:	bfb8      	it	lt
 8003d4e:	9204      	strlt	r2, [sp, #16]
 8003d50:	7823      	ldrb	r3, [r4, #0]
 8003d52:	2b2e      	cmp	r3, #46	; 0x2e
 8003d54:	d10c      	bne.n	8003d70 <_svfiprintf_r+0x130>
 8003d56:	7863      	ldrb	r3, [r4, #1]
 8003d58:	2b2a      	cmp	r3, #42	; 0x2a
 8003d5a:	d135      	bne.n	8003dc8 <_svfiprintf_r+0x188>
 8003d5c:	9b03      	ldr	r3, [sp, #12]
 8003d5e:	1d1a      	adds	r2, r3, #4
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	9203      	str	r2, [sp, #12]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bfb8      	it	lt
 8003d68:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8003d6c:	3402      	adds	r4, #2
 8003d6e:	9305      	str	r3, [sp, #20]
 8003d70:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8003e3c <_svfiprintf_r+0x1fc>
 8003d74:	7821      	ldrb	r1, [r4, #0]
 8003d76:	2203      	movs	r2, #3
 8003d78:	4650      	mov	r0, sl
 8003d7a:	f7fc fa51 	bl	8000220 <memchr>
 8003d7e:	b140      	cbz	r0, 8003d92 <_svfiprintf_r+0x152>
 8003d80:	2340      	movs	r3, #64	; 0x40
 8003d82:	eba0 000a 	sub.w	r0, r0, sl
 8003d86:	fa03 f000 	lsl.w	r0, r3, r0
 8003d8a:	9b04      	ldr	r3, [sp, #16]
 8003d8c:	4303      	orrs	r3, r0
 8003d8e:	3401      	adds	r4, #1
 8003d90:	9304      	str	r3, [sp, #16]
 8003d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d96:	4826      	ldr	r0, [pc, #152]	; (8003e30 <_svfiprintf_r+0x1f0>)
 8003d98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d9c:	2206      	movs	r2, #6
 8003d9e:	f7fc fa3f 	bl	8000220 <memchr>
 8003da2:	2800      	cmp	r0, #0
 8003da4:	d038      	beq.n	8003e18 <_svfiprintf_r+0x1d8>
 8003da6:	4b23      	ldr	r3, [pc, #140]	; (8003e34 <_svfiprintf_r+0x1f4>)
 8003da8:	bb1b      	cbnz	r3, 8003df2 <_svfiprintf_r+0x1b2>
 8003daa:	9b03      	ldr	r3, [sp, #12]
 8003dac:	3307      	adds	r3, #7
 8003dae:	f023 0307 	bic.w	r3, r3, #7
 8003db2:	3308      	adds	r3, #8
 8003db4:	9303      	str	r3, [sp, #12]
 8003db6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003db8:	4433      	add	r3, r6
 8003dba:	9309      	str	r3, [sp, #36]	; 0x24
 8003dbc:	e767      	b.n	8003c8e <_svfiprintf_r+0x4e>
 8003dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8003dc2:	460c      	mov	r4, r1
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	e7a5      	b.n	8003d14 <_svfiprintf_r+0xd4>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	3401      	adds	r4, #1
 8003dcc:	9305      	str	r3, [sp, #20]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f04f 0c0a 	mov.w	ip, #10
 8003dd4:	4620      	mov	r0, r4
 8003dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003dda:	3a30      	subs	r2, #48	; 0x30
 8003ddc:	2a09      	cmp	r2, #9
 8003dde:	d903      	bls.n	8003de8 <_svfiprintf_r+0x1a8>
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d0c5      	beq.n	8003d70 <_svfiprintf_r+0x130>
 8003de4:	9105      	str	r1, [sp, #20]
 8003de6:	e7c3      	b.n	8003d70 <_svfiprintf_r+0x130>
 8003de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8003dec:	4604      	mov	r4, r0
 8003dee:	2301      	movs	r3, #1
 8003df0:	e7f0      	b.n	8003dd4 <_svfiprintf_r+0x194>
 8003df2:	ab03      	add	r3, sp, #12
 8003df4:	9300      	str	r3, [sp, #0]
 8003df6:	462a      	mov	r2, r5
 8003df8:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <_svfiprintf_r+0x1f8>)
 8003dfa:	a904      	add	r1, sp, #16
 8003dfc:	4638      	mov	r0, r7
 8003dfe:	f3af 8000 	nop.w
 8003e02:	1c42      	adds	r2, r0, #1
 8003e04:	4606      	mov	r6, r0
 8003e06:	d1d6      	bne.n	8003db6 <_svfiprintf_r+0x176>
 8003e08:	89ab      	ldrh	r3, [r5, #12]
 8003e0a:	065b      	lsls	r3, r3, #25
 8003e0c:	f53f af2c 	bmi.w	8003c68 <_svfiprintf_r+0x28>
 8003e10:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003e12:	b01d      	add	sp, #116	; 0x74
 8003e14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e18:	ab03      	add	r3, sp, #12
 8003e1a:	9300      	str	r3, [sp, #0]
 8003e1c:	462a      	mov	r2, r5
 8003e1e:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <_svfiprintf_r+0x1f8>)
 8003e20:	a904      	add	r1, sp, #16
 8003e22:	4638      	mov	r0, r7
 8003e24:	f7ff f828 	bl	8002e78 <_printf_i>
 8003e28:	e7eb      	b.n	8003e02 <_svfiprintf_r+0x1c2>
 8003e2a:	bf00      	nop
 8003e2c:	08004194 	.word	0x08004194
 8003e30:	0800419e 	.word	0x0800419e
 8003e34:	00000000 	.word	0x00000000
 8003e38:	08003b89 	.word	0x08003b89
 8003e3c:	0800419a 	.word	0x0800419a

08003e40 <_raise_r>:
 8003e40:	291f      	cmp	r1, #31
 8003e42:	b538      	push	{r3, r4, r5, lr}
 8003e44:	4604      	mov	r4, r0
 8003e46:	460d      	mov	r5, r1
 8003e48:	d904      	bls.n	8003e54 <_raise_r+0x14>
 8003e4a:	2316      	movs	r3, #22
 8003e4c:	6003      	str	r3, [r0, #0]
 8003e4e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003e52:	bd38      	pop	{r3, r4, r5, pc}
 8003e54:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8003e56:	b112      	cbz	r2, 8003e5e <_raise_r+0x1e>
 8003e58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003e5c:	b94b      	cbnz	r3, 8003e72 <_raise_r+0x32>
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f000 f830 	bl	8003ec4 <_getpid_r>
 8003e64:	462a      	mov	r2, r5
 8003e66:	4601      	mov	r1, r0
 8003e68:	4620      	mov	r0, r4
 8003e6a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e6e:	f000 b817 	b.w	8003ea0 <_kill_r>
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d00a      	beq.n	8003e8c <_raise_r+0x4c>
 8003e76:	1c59      	adds	r1, r3, #1
 8003e78:	d103      	bne.n	8003e82 <_raise_r+0x42>
 8003e7a:	2316      	movs	r3, #22
 8003e7c:	6003      	str	r3, [r0, #0]
 8003e7e:	2001      	movs	r0, #1
 8003e80:	e7e7      	b.n	8003e52 <_raise_r+0x12>
 8003e82:	2400      	movs	r4, #0
 8003e84:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003e88:	4628      	mov	r0, r5
 8003e8a:	4798      	blx	r3
 8003e8c:	2000      	movs	r0, #0
 8003e8e:	e7e0      	b.n	8003e52 <_raise_r+0x12>

08003e90 <raise>:
 8003e90:	4b02      	ldr	r3, [pc, #8]	; (8003e9c <raise+0xc>)
 8003e92:	4601      	mov	r1, r0
 8003e94:	6818      	ldr	r0, [r3, #0]
 8003e96:	f7ff bfd3 	b.w	8003e40 <_raise_r>
 8003e9a:	bf00      	nop
 8003e9c:	2000002c 	.word	0x2000002c

08003ea0 <_kill_r>:
 8003ea0:	b538      	push	{r3, r4, r5, lr}
 8003ea2:	4d07      	ldr	r5, [pc, #28]	; (8003ec0 <_kill_r+0x20>)
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	602b      	str	r3, [r5, #0]
 8003eae:	f7fc ffbf 	bl	8000e30 <_kill>
 8003eb2:	1c43      	adds	r3, r0, #1
 8003eb4:	d102      	bne.n	8003ebc <_kill_r+0x1c>
 8003eb6:	682b      	ldr	r3, [r5, #0]
 8003eb8:	b103      	cbz	r3, 8003ebc <_kill_r+0x1c>
 8003eba:	6023      	str	r3, [r4, #0]
 8003ebc:	bd38      	pop	{r3, r4, r5, pc}
 8003ebe:	bf00      	nop
 8003ec0:	20000154 	.word	0x20000154

08003ec4 <_getpid_r>:
 8003ec4:	f7fc bfac 	b.w	8000e20 <_getpid>

08003ec8 <__sread>:
 8003ec8:	b510      	push	{r4, lr}
 8003eca:	460c      	mov	r4, r1
 8003ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ed0:	f000 f89c 	bl	800400c <_read_r>
 8003ed4:	2800      	cmp	r0, #0
 8003ed6:	bfab      	itete	ge
 8003ed8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003eda:	89a3      	ldrhlt	r3, [r4, #12]
 8003edc:	181b      	addge	r3, r3, r0
 8003ede:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003ee2:	bfac      	ite	ge
 8003ee4:	6563      	strge	r3, [r4, #84]	; 0x54
 8003ee6:	81a3      	strhlt	r3, [r4, #12]
 8003ee8:	bd10      	pop	{r4, pc}

08003eea <__swrite>:
 8003eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003eee:	461f      	mov	r7, r3
 8003ef0:	898b      	ldrh	r3, [r1, #12]
 8003ef2:	05db      	lsls	r3, r3, #23
 8003ef4:	4605      	mov	r5, r0
 8003ef6:	460c      	mov	r4, r1
 8003ef8:	4616      	mov	r6, r2
 8003efa:	d505      	bpl.n	8003f08 <__swrite+0x1e>
 8003efc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f00:	2302      	movs	r3, #2
 8003f02:	2200      	movs	r2, #0
 8003f04:	f000 f868 	bl	8003fd8 <_lseek_r>
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f12:	81a3      	strh	r3, [r4, #12]
 8003f14:	4632      	mov	r2, r6
 8003f16:	463b      	mov	r3, r7
 8003f18:	4628      	mov	r0, r5
 8003f1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f1e:	f000 b817 	b.w	8003f50 <_write_r>

08003f22 <__sseek>:
 8003f22:	b510      	push	{r4, lr}
 8003f24:	460c      	mov	r4, r1
 8003f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f2a:	f000 f855 	bl	8003fd8 <_lseek_r>
 8003f2e:	1c43      	adds	r3, r0, #1
 8003f30:	89a3      	ldrh	r3, [r4, #12]
 8003f32:	bf15      	itete	ne
 8003f34:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f36:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f3a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f3e:	81a3      	strheq	r3, [r4, #12]
 8003f40:	bf18      	it	ne
 8003f42:	81a3      	strhne	r3, [r4, #12]
 8003f44:	bd10      	pop	{r4, pc}

08003f46 <__sclose>:
 8003f46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4a:	f000 b813 	b.w	8003f74 <_close_r>
	...

08003f50 <_write_r>:
 8003f50:	b538      	push	{r3, r4, r5, lr}
 8003f52:	4d07      	ldr	r5, [pc, #28]	; (8003f70 <_write_r+0x20>)
 8003f54:	4604      	mov	r4, r0
 8003f56:	4608      	mov	r0, r1
 8003f58:	4611      	mov	r1, r2
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	602a      	str	r2, [r5, #0]
 8003f5e:	461a      	mov	r2, r3
 8003f60:	f7fc ff9d 	bl	8000e9e <_write>
 8003f64:	1c43      	adds	r3, r0, #1
 8003f66:	d102      	bne.n	8003f6e <_write_r+0x1e>
 8003f68:	682b      	ldr	r3, [r5, #0]
 8003f6a:	b103      	cbz	r3, 8003f6e <_write_r+0x1e>
 8003f6c:	6023      	str	r3, [r4, #0]
 8003f6e:	bd38      	pop	{r3, r4, r5, pc}
 8003f70:	20000154 	.word	0x20000154

08003f74 <_close_r>:
 8003f74:	b538      	push	{r3, r4, r5, lr}
 8003f76:	4d06      	ldr	r5, [pc, #24]	; (8003f90 <_close_r+0x1c>)
 8003f78:	2300      	movs	r3, #0
 8003f7a:	4604      	mov	r4, r0
 8003f7c:	4608      	mov	r0, r1
 8003f7e:	602b      	str	r3, [r5, #0]
 8003f80:	f7fc ffa9 	bl	8000ed6 <_close>
 8003f84:	1c43      	adds	r3, r0, #1
 8003f86:	d102      	bne.n	8003f8e <_close_r+0x1a>
 8003f88:	682b      	ldr	r3, [r5, #0]
 8003f8a:	b103      	cbz	r3, 8003f8e <_close_r+0x1a>
 8003f8c:	6023      	str	r3, [r4, #0]
 8003f8e:	bd38      	pop	{r3, r4, r5, pc}
 8003f90:	20000154 	.word	0x20000154

08003f94 <_fstat_r>:
 8003f94:	b538      	push	{r3, r4, r5, lr}
 8003f96:	4d07      	ldr	r5, [pc, #28]	; (8003fb4 <_fstat_r+0x20>)
 8003f98:	2300      	movs	r3, #0
 8003f9a:	4604      	mov	r4, r0
 8003f9c:	4608      	mov	r0, r1
 8003f9e:	4611      	mov	r1, r2
 8003fa0:	602b      	str	r3, [r5, #0]
 8003fa2:	f7fc ffa4 	bl	8000eee <_fstat>
 8003fa6:	1c43      	adds	r3, r0, #1
 8003fa8:	d102      	bne.n	8003fb0 <_fstat_r+0x1c>
 8003faa:	682b      	ldr	r3, [r5, #0]
 8003fac:	b103      	cbz	r3, 8003fb0 <_fstat_r+0x1c>
 8003fae:	6023      	str	r3, [r4, #0]
 8003fb0:	bd38      	pop	{r3, r4, r5, pc}
 8003fb2:	bf00      	nop
 8003fb4:	20000154 	.word	0x20000154

08003fb8 <_isatty_r>:
 8003fb8:	b538      	push	{r3, r4, r5, lr}
 8003fba:	4d06      	ldr	r5, [pc, #24]	; (8003fd4 <_isatty_r+0x1c>)
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	4604      	mov	r4, r0
 8003fc0:	4608      	mov	r0, r1
 8003fc2:	602b      	str	r3, [r5, #0]
 8003fc4:	f7fc ffa3 	bl	8000f0e <_isatty>
 8003fc8:	1c43      	adds	r3, r0, #1
 8003fca:	d102      	bne.n	8003fd2 <_isatty_r+0x1a>
 8003fcc:	682b      	ldr	r3, [r5, #0]
 8003fce:	b103      	cbz	r3, 8003fd2 <_isatty_r+0x1a>
 8003fd0:	6023      	str	r3, [r4, #0]
 8003fd2:	bd38      	pop	{r3, r4, r5, pc}
 8003fd4:	20000154 	.word	0x20000154

08003fd8 <_lseek_r>:
 8003fd8:	b538      	push	{r3, r4, r5, lr}
 8003fda:	4d07      	ldr	r5, [pc, #28]	; (8003ff8 <_lseek_r+0x20>)
 8003fdc:	4604      	mov	r4, r0
 8003fde:	4608      	mov	r0, r1
 8003fe0:	4611      	mov	r1, r2
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	602a      	str	r2, [r5, #0]
 8003fe6:	461a      	mov	r2, r3
 8003fe8:	f7fc ff9c 	bl	8000f24 <_lseek>
 8003fec:	1c43      	adds	r3, r0, #1
 8003fee:	d102      	bne.n	8003ff6 <_lseek_r+0x1e>
 8003ff0:	682b      	ldr	r3, [r5, #0]
 8003ff2:	b103      	cbz	r3, 8003ff6 <_lseek_r+0x1e>
 8003ff4:	6023      	str	r3, [r4, #0]
 8003ff6:	bd38      	pop	{r3, r4, r5, pc}
 8003ff8:	20000154 	.word	0x20000154

08003ffc <_malloc_usable_size_r>:
 8003ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004000:	1f18      	subs	r0, r3, #4
 8004002:	2b00      	cmp	r3, #0
 8004004:	bfbc      	itt	lt
 8004006:	580b      	ldrlt	r3, [r1, r0]
 8004008:	18c0      	addlt	r0, r0, r3
 800400a:	4770      	bx	lr

0800400c <_read_r>:
 800400c:	b538      	push	{r3, r4, r5, lr}
 800400e:	4d07      	ldr	r5, [pc, #28]	; (800402c <_read_r+0x20>)
 8004010:	4604      	mov	r4, r0
 8004012:	4608      	mov	r0, r1
 8004014:	4611      	mov	r1, r2
 8004016:	2200      	movs	r2, #0
 8004018:	602a      	str	r2, [r5, #0]
 800401a:	461a      	mov	r2, r3
 800401c:	f7fc ff22 	bl	8000e64 <_read>
 8004020:	1c43      	adds	r3, r0, #1
 8004022:	d102      	bne.n	800402a <_read_r+0x1e>
 8004024:	682b      	ldr	r3, [r5, #0]
 8004026:	b103      	cbz	r3, 800402a <_read_r+0x1e>
 8004028:	6023      	str	r3, [r4, #0]
 800402a:	bd38      	pop	{r3, r4, r5, pc}
 800402c:	20000154 	.word	0x20000154

08004030 <_init>:
 8004030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004032:	bf00      	nop
 8004034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004036:	bc08      	pop	{r3}
 8004038:	469e      	mov	lr, r3
 800403a:	4770      	bx	lr

0800403c <_fini>:
 800403c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800403e:	bf00      	nop
 8004040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004042:	bc08      	pop	{r3}
 8004044:	469e      	mov	lr, r3
 8004046:	4770      	bx	lr
